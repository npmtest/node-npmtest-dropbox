{"/home/travis/build/npmtest/node-npmtest-dropbox/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_dropbox */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/lib.npmtest_dropbox.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/lib.npmtest_dropbox.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_dropbox */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_dropbox = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_dropbox = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":65},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-dropbox && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_dropbox */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_dropbox","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_dropbox.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_dropbox.rollup.js'] =","            local.assetsDict['/assets.npmtest_dropbox.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_dropbox.__dirname + '/lib.npmtest_dropbox.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/index.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}}},"branchMap":{},"code":["var Dropbox = require('./dropbox');","","module.exports = Dropbox;",""],"l":{"1":1,"3":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/dropbox.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/dropbox.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":10},"end":{"line":18,"column":29}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":43},"end":{"line":29,"column":58}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":44}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":33}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":12}},"4":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":34}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":57}},"7":{"start":{"line":24,"column":0},"end":{"line":24,"column":40}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":61}},"9":{"start":{"line":29,"column":0},"end":{"line":31,"column":2}},"10":{"start":{"line":30,"column":2},"end":{"line":30,"column":78}},"11":{"start":{"line":33,"column":0},"end":{"line":33,"column":25}}},"branchMap":{},"code":["var DropboxBase = require('./dropbox-base');","var routes = require('./routes');","var Dropbox;","","/**"," * @class Dropbox"," * @extends DropboxBase"," * @classdesc The Dropbox SDK class that provides methods to read, write and"," * create files or folders in a user's Dropbox."," * @arg {Object} options"," * @arg {String} [options.accessToken] - An access token for making authenticated"," * requests."," * @arg {String} [options.clientId] - The client id for your app. Used to create"," * authentication URL."," * @arg {String} [options.selectUser] - Select user is only used by DropboxTeam."," * It specifies which user the team access token should be acting as."," */","Dropbox = function (options) {","  DropboxBase.call(this, options);","};","","Dropbox.prototype = Object.create(DropboxBase.prototype);","","Dropbox.prototype.constructor = Dropbox;","","// Add the user endpoint methods to the prototype","Dropbox.prototype = Object.assign(Dropbox.prototype, routes);","","Dropbox.prototype.filesGetSharedLinkFile = function (arg) {","  return this.request('sharing/get_shared_link_file', arg, 'api', 'download');","};","","module.exports = Dropbox;",""],"l":{"1":1,"2":1,"3":1,"18":1,"19":0,"22":1,"24":1,"27":1,"29":1,"30":0,"33":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/dropbox-base.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/dropbox-base.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":1,"45":0,"46":0,"47":0,"48":1,"49":0,"50":1,"51":0,"52":0,"53":0,"54":1,"55":0,"56":1,"57":0,"58":0,"59":0,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":14},"end":{"line":21,"column":33}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":39},"end":{"line":33,"column":62}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":39},"end":{"line":41,"column":51}}},"4":{"name":"(anonymous_4)","line":50,"loc":{"start":{"line":50,"column":36},"end":{"line":50,"column":56}}},"5":{"name":"(anonymous_5)","line":58,"loc":{"start":{"line":58,"column":36},"end":{"line":58,"column":48}}},"6":{"name":"(anonymous_6)","line":70,"loc":{"start":{"line":70,"column":45},"end":{"line":70,"column":75}}},"7":{"name":"(anonymous_7)","line":91,"loc":{"start":{"line":91,"column":32},"end":{"line":91,"column":73}}},"8":{"name":"(anonymous_8)","line":110,"loc":{"start":{"line":110,"column":38},"end":{"line":110,"column":63}}},"9":{"name":"(anonymous_9)","line":114,"loc":{"start":{"line":114,"column":38},"end":{"line":114,"column":50}}},"10":{"name":"(anonymous_10)","line":122,"loc":{"start":{"line":122,"column":43},"end":{"line":122,"column":73}}},"11":{"name":"(anonymous_11)","line":126,"loc":{"start":{"line":126,"column":43},"end":{"line":126,"column":55}}},"12":{"name":"(anonymous_12)","line":134,"loc":{"start":{"line":134,"column":41},"end":{"line":134,"column":69}}},"13":{"name":"(anonymous_13)","line":138,"loc":{"start":{"line":138,"column":41},"end":{"line":138,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":55}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":16}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":36}},"4":{"start":{"line":21,"column":0},"end":{"line":26,"column":2}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":26}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":41}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":35}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":39}},"9":{"start":{"line":33,"column":0},"end":{"line":35,"column":2}},"10":{"start":{"line":34,"column":2},"end":{"line":34,"column":33}},"11":{"start":{"line":41,"column":0},"end":{"line":43,"column":2}},"12":{"start":{"line":42,"column":2},"end":{"line":42,"column":26}},"13":{"start":{"line":50,"column":0},"end":{"line":52,"column":2}},"14":{"start":{"line":51,"column":2},"end":{"line":51,"column":27}},"15":{"start":{"line":58,"column":0},"end":{"line":60,"column":2}},"16":{"start":{"line":59,"column":2},"end":{"line":59,"column":23}},"17":{"start":{"line":70,"column":0},"end":{"line":89,"column":2}},"18":{"start":{"line":71,"column":2},"end":{"line":71,"column":65}},"19":{"start":{"line":72,"column":2},"end":{"line":72,"column":36}},"20":{"start":{"line":73,"column":2},"end":{"line":73,"column":14}},"21":{"start":{"line":74,"column":2},"end":{"line":76,"column":3}},"22":{"start":{"line":75,"column":4},"end":{"line":75,"column":96}},"23":{"start":{"line":77,"column":2},"end":{"line":79,"column":3}},"24":{"start":{"line":78,"column":4},"end":{"line":78,"column":51}},"25":{"start":{"line":81,"column":2},"end":{"line":81,"column":73}},"26":{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},"27":{"start":{"line":83,"column":4},"end":{"line":83,"column":55}},"28":{"start":{"line":85,"column":2},"end":{"line":87,"column":3}},"29":{"start":{"line":86,"column":4},"end":{"line":86,"column":42}},"30":{"start":{"line":88,"column":2},"end":{"line":88,"column":17}},"31":{"start":{"line":91,"column":0},"end":{"line":108,"column":2}},"32":{"start":{"line":92,"column":2},"end":{"line":92,"column":21}},"33":{"start":{"line":93,"column":2},"end":{"line":105,"column":3}},"34":{"start":{"line":95,"column":6},"end":{"line":95,"column":37}},"35":{"start":{"line":96,"column":6},"end":{"line":96,"column":12}},"36":{"start":{"line":98,"column":6},"end":{"line":98,"column":42}},"37":{"start":{"line":99,"column":6},"end":{"line":99,"column":12}},"38":{"start":{"line":101,"column":6},"end":{"line":101,"column":40}},"39":{"start":{"line":102,"column":6},"end":{"line":102,"column":12}},"40":{"start":{"line":104,"column":6},"end":{"line":104,"column":57}},"41":{"start":{"line":107,"column":2},"end":{"line":107,"column":81}},"42":{"start":{"line":110,"column":0},"end":{"line":112,"column":2}},"43":{"start":{"line":111,"column":2},"end":{"line":111,"column":51}},"44":{"start":{"line":114,"column":0},"end":{"line":120,"column":2}},"45":{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},"46":{"start":{"line":116,"column":4},"end":{"line":116,"column":64}},"47":{"start":{"line":119,"column":2},"end":{"line":119,"column":42}},"48":{"start":{"line":122,"column":0},"end":{"line":124,"column":2}},"49":{"start":{"line":123,"column":2},"end":{"line":123,"column":61}},"50":{"start":{"line":126,"column":0},"end":{"line":132,"column":2}},"51":{"start":{"line":127,"column":2},"end":{"line":129,"column":3}},"52":{"start":{"line":128,"column":4},"end":{"line":128,"column":74}},"53":{"start":{"line":131,"column":2},"end":{"line":131,"column":47}},"54":{"start":{"line":134,"column":0},"end":{"line":136,"column":2}},"55":{"start":{"line":135,"column":2},"end":{"line":135,"column":57}},"56":{"start":{"line":138,"column":0},"end":{"line":144,"column":2}},"57":{"start":{"line":139,"column":2},"end":{"line":141,"column":3}},"58":{"start":{"line":140,"column":4},"end":{"line":140,"column":70}},"59":{"start":{"line":143,"column":2},"end":{"line":143,"column":45}},"60":{"start":{"line":146,"column":0},"end":{"line":146,"column":29}}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":12},"end":{"line":22,"column":19}},{"start":{"line":22,"column":23},"end":{"line":22,"column":25}}]},"2":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":2},"end":{"line":74,"column":2}},{"start":{"line":74,"column":2},"end":{"line":74,"column":2}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":2},"end":{"line":77,"column":2}},{"start":{"line":77,"column":2},"end":{"line":77,"column":2}}]},"4":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"5":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":2},"end":{"line":85,"column":2}},{"start":{"line":85,"column":2},"end":{"line":85,"column":2}}]},"6":{"line":93,"type":"switch","locations":[{"start":{"line":94,"column":4},"end":{"line":96,"column":12}},{"start":{"line":97,"column":4},"end":{"line":99,"column":12}},{"start":{"line":100,"column":4},"end":{"line":102,"column":12}},{"start":{"line":103,"column":4},"end":{"line":104,"column":57}}]},"7":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":2},"end":{"line":115,"column":2}},{"start":{"line":115,"column":2},"end":{"line":115,"column":2}}]},"8":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":2},"end":{"line":127,"column":2}},{"start":{"line":127,"column":2},"end":{"line":127,"column":2}}]},"9":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":2},"end":{"line":139,"column":2}},{"start":{"line":139,"column":2},"end":{"line":139,"column":2}}]}},"code":["var REQUEST_CONSTANTS = require('./request-constants');","var DropboxBase;","","// Polyfill Object.assign() for older browsers","require('./object-assign-polyfill');","","/**"," * @private"," * @class DropboxBase"," * @classdesc The main Dropbox SDK class. This contains the methods that are"," * shared between Dropbox and DropboxTeam classes. It is marked as private so"," * that it doesn't show up in the docs because it is never used directly."," * @arg {Object} options"," * @arg {String} [options.accessToken] - An access token for making authenticated"," * requests."," * @arg {String} [options.clientId] - The client id fo ryour app. Used to create"," * authentication URL."," * @arg {Number} [options.selectUser] - User is the team access token would like"," * to act as."," */","DropboxBase = function (options) {","  options = options || {};","  this.accessToken = options.accessToken;","  this.clientId = options.clientId;","  this.selectUser = options.selectUser;","};","","/**"," * Set the access token used to authenticate requests to the API."," * @arg {String} accessToken - An access token"," * @returns {undefined}"," */","DropboxBase.prototype.setAccessToken = function (accessToken) {","  this.accessToken = accessToken;","};","","/**"," * Get the access token"," * @returns {String} Access token"," */","DropboxBase.prototype.getAccessToken = function () {","  return this.accessToken;","};","","/**"," * Set the client id, which is used to help gain an access token."," * @arg {String} clientId - Your apps client id"," * @returns {undefined}"," */","DropboxBase.prototype.setClientId = function (clientId) {","  this.clientId = clientId;","};","","/**"," * Get the client id"," * @returns {String} Client id"," */","DropboxBase.prototype.getClientId = function () {","  return this.clientId;","};","","/**"," * Get a URL that can be used to authenticate users for the Dropbox API."," * @arg {String} redirectUri - A URL to redirect the user to after"," * authenticating. This must be added to your app through the admin interface."," * @arg {String} [state] - State that will be returned in the redirect URL to help"," * prevent cross site scripting attacks."," * @returns {String} Url to send user to for Dropbox API authentication"," */","DropboxBase.prototype.getAuthenticationUrl = function (redirectUri, state) {","  var AUTH_BASE_URL = 'https://www.dropbox.com/oauth2/authorize';","  var clientId = this.getClientId();","  var authUrl;","  if (!clientId) {","    throw new Error('A client id is required. You can set the client id using .setClientId().');","  }","  if (!redirectUri) {","    throw new Error('A redirect uri is required.');","  }","","  authUrl = AUTH_BASE_URL + '?response_type=token&client_id=' + clientId;","  if (redirectUri) {","    authUrl = authUrl + '&redirect_uri=' + redirectUri;","  }","  if (state) {","    authUrl = authUrl + '&state=' + state;","  }","  return authUrl;","};","","DropboxBase.prototype.request = function (path, args, auth, host, style) {","  var request = null;","  switch (style) {","    case REQUEST_CONSTANTS.RPC:","      request = this.getRpcRequest();","      break;","    case REQUEST_CONSTANTS.DOWNLOAD:","      request = this.getDownloadRequest();","      break;","    case REQUEST_CONSTANTS.UPLOAD:","      request = this.getUploadRequest();","      break;","    default:","      throw new Error('Invalid request style: ' + style);","  }","","  return request(path, args, auth, host, this.getAccessToken(), this.selectUser);","};","","DropboxBase.prototype.setRpcRequest = function (newRpcRequest) {","  DropboxBase.prototype.rpcRequest = newRpcRequest;","};","","DropboxBase.prototype.getRpcRequest = function () {","  if (DropboxBase.prototype.rpcRequest === undefined) {","    DropboxBase.prototype.rpcRequest = require('./rpc-request');","  }","","  return DropboxBase.prototype.rpcRequest;","};","","DropboxBase.prototype.setDownloadRequest = function (newDownloadRequest) {","  DropboxBase.prototype.downloadRequest = newDownloadRequest;","};","","DropboxBase.prototype.getDownloadRequest = function () {","  if (DropboxBase.prototype.downloadRequest === undefined) {","    DropboxBase.prototype.downloadRequest = require('./download-request');","  }","","  return DropboxBase.prototype.downloadRequest;","};","","DropboxBase.prototype.setUploadRequest = function (newUploadRequest) {","  DropboxBase.prototype.uploadRequest = newUploadRequest;","};","","DropboxBase.prototype.getUploadRequest = function () {","  if (DropboxBase.prototype.uploadRequest === undefined) {","    DropboxBase.prototype.uploadRequest = require('./upload-request');","  }","","  return DropboxBase.prototype.uploadRequest;","};","","module.exports = DropboxBase;",""],"l":{"1":1,"2":1,"5":1,"21":1,"22":0,"23":0,"24":0,"25":0,"33":1,"34":0,"41":1,"42":0,"50":1,"51":0,"58":1,"59":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"77":0,"78":0,"81":0,"82":0,"83":0,"85":0,"86":0,"88":0,"91":1,"92":0,"93":0,"95":0,"96":0,"98":0,"99":0,"101":0,"102":0,"104":0,"107":0,"110":1,"111":0,"114":1,"115":0,"116":0,"119":0,"122":1,"123":0,"126":1,"127":0,"128":0,"131":0,"134":1,"135":0,"138":1,"139":0,"140":0,"143":0,"146":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/request-constants.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/request-constants.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":5,"column":2}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":35}}},"branchMap":{},"code":["var REQUEST_CONSTANTS = {","  RPC: 'rpc',","  DOWNLOAD: 'download',","  UPLOAD: 'upload'","};","","module.exports = REQUEST_CONSTANTS;",""],"l":{"1":1,"7":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/object-assign-polyfill.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/object-assign-polyfill.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":3},"end":{"line":4,"column":15}}},"2":{"name":"(anonymous_2)","line":5,"loc":{"start":{"line":5,"column":20},"end":{"line":5,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":28,"column":7}},"3":{"start":{"line":5,"column":4},"end":{"line":27,"column":6}},"4":{"start":{"line":7,"column":6},"end":{"line":7,"column":17}},"5":{"start":{"line":8,"column":6},"end":{"line":8,"column":16}},"6":{"start":{"line":9,"column":6},"end":{"line":9,"column":17}},"7":{"start":{"line":10,"column":6},"end":{"line":10,"column":18}},"8":{"start":{"line":11,"column":6},"end":{"line":13,"column":7}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":74}},"10":{"start":{"line":15,"column":6},"end":{"line":15,"column":30}},"11":{"start":{"line":16,"column":6},"end":{"line":25,"column":7}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":34}},"13":{"start":{"line":18,"column":8},"end":{"line":24,"column":9}},"14":{"start":{"line":19,"column":10},"end":{"line":23,"column":11}},"15":{"start":{"line":20,"column":12},"end":{"line":22,"column":13}},"16":{"start":{"line":21,"column":14},"end":{"line":21,"column":48}},"17":{"start":{"line":26,"column":6},"end":{"line":26,"column":20}}},"branchMap":{"1":{"line":3,"type":"if","locations":[{"start":{"line":3,"column":0},"end":{"line":3,"column":0}},{"start":{"line":3,"column":0},"end":{"line":3,"column":0}}]},"2":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":6},"end":{"line":11,"column":6}},{"start":{"line":11,"column":6},"end":{"line":11,"column":6}}]},"3":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":10},"end":{"line":11,"column":30}},{"start":{"line":11,"column":34},"end":{"line":11,"column":49}}]},"4":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":8}},{"start":{"line":18,"column":8},"end":{"line":18,"column":8}}]},"5":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":32}},{"start":{"line":18,"column":36},"end":{"line":18,"column":51}}]},"6":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":12},"end":{"line":20,"column":12}},{"start":{"line":20,"column":12},"end":{"line":20,"column":12}}]}},"code":["// Polyfill object.assign for legacy browsers","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign","if (typeof Object.assign !== 'function') {","  (function () {","    Object.assign = function (target) {","      'use strict';","      var output;","      var index;","      var source;","      var nextKey;","      if (target === undefined || target === null) {","        throw new TypeError('Cannot convert undefined or null to object');","      }","","      output = Object(target);","      for (index = 1; index < arguments.length; index++) {","        source = arguments[index];","        if (source !== undefined && source !== null) {","          for (nextKey in source) {","            if (source.hasOwnProperty(nextKey)) {","              output[nextKey] = source[nextKey];","            }","          }","        }","      }","      return output;","    };","  }());","}",""],"l":{"3":1,"4":0,"5":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"26":0}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/routes.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/routes.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":1,"63":0,"64":1,"65":0,"66":1,"67":0,"68":1,"69":0,"70":1,"71":0,"72":1,"73":0,"74":1,"75":0,"76":1,"77":0,"78":1,"79":0,"80":1,"81":0,"82":1,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":1,"91":0,"92":1,"93":0,"94":1,"95":0,"96":1,"97":0,"98":1,"99":0,"100":1,"101":0,"102":1,"103":0,"104":1,"105":0,"106":1,"107":0,"108":1,"109":0,"110":1,"111":0,"112":1,"113":0,"114":1,"115":0,"116":1,"117":0,"118":1,"119":0,"120":1,"121":0,"122":1,"123":0,"124":1,"125":0,"126":1,"127":0,"128":1,"129":0,"130":1,"131":0,"132":1,"133":0,"134":1,"135":0,"136":1,"137":0,"138":1,"139":0,"140":1,"141":0,"142":1,"143":0,"144":1,"145":0,"146":1,"147":0,"148":1,"149":0,"150":1,"151":0,"152":1,"153":0,"154":1,"155":0,"156":1,"157":0,"158":1,"159":0,"160":1,"161":0,"162":1,"163":0,"164":1,"165":0,"166":1,"167":0,"168":1,"169":0,"170":1,"171":0,"172":1,"173":0,"174":1,"175":0,"176":1,"177":0,"178":1,"179":0,"180":1,"181":0,"182":1,"183":0,"184":1,"185":0,"186":1,"187":0,"188":1,"189":0,"190":1,"191":0,"192":1,"193":0,"194":1,"195":0,"196":1,"197":0,"198":1,"199":0,"200":1,"201":0,"202":1,"203":0,"204":1,"205":0,"206":1,"207":0,"208":1,"209":0,"210":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":29},"end":{"line":10,"column":44}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":25},"end":{"line":20,"column":40}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":31},"end":{"line":32,"column":46}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":26},"end":{"line":45,"column":41}}},"5":{"name":"(anonymous_5)","line":56,"loc":{"start":{"line":56,"column":19},"end":{"line":56,"column":34}}},"6":{"name":"(anonymous_6)","line":72,"loc":{"start":{"line":72,"column":24},"end":{"line":72,"column":39}}},"7":{"name":"(anonymous_7)","line":83,"loc":{"start":{"line":83,"column":29},"end":{"line":83,"column":44}}},"8":{"name":"(anonymous_8)","line":95,"loc":{"start":{"line":95,"column":31},"end":{"line":95,"column":46}}},"9":{"name":"(anonymous_9)","line":105,"loc":{"start":{"line":105,"column":32},"end":{"line":105,"column":47}}},"10":{"name":"(anonymous_10)","line":115,"loc":{"start":{"line":115,"column":27},"end":{"line":115,"column":42}}},"11":{"name":"(anonymous_11)","line":129,"loc":{"start":{"line":129,"column":21},"end":{"line":129,"column":36}}},"12":{"name":"(anonymous_12)","line":141,"loc":{"start":{"line":141,"column":26},"end":{"line":141,"column":41}}},"13":{"name":"(anonymous_13)","line":152,"loc":{"start":{"line":152,"column":31},"end":{"line":152,"column":46}}},"14":{"name":"(anonymous_14)","line":162,"loc":{"start":{"line":162,"column":23},"end":{"line":162,"column":38}}},"15":{"name":"(anonymous_15)","line":173,"loc":{"start":{"line":173,"column":26},"end":{"line":173,"column":41}}},"16":{"name":"(anonymous_16)","line":185,"loc":{"start":{"line":185,"column":25},"end":{"line":185,"column":40}}},"17":{"name":"(anonymous_17)","line":197,"loc":{"start":{"line":197,"column":31},"end":{"line":197,"column":46}}},"18":{"name":"(anonymous_18)","line":209,"loc":{"start":{"line":209,"column":27},"end":{"line":209,"column":42}}},"19":{"name":"(anonymous_19)","line":234,"loc":{"start":{"line":234,"column":25},"end":{"line":234,"column":40}}},"20":{"name":"(anonymous_20)","line":246,"loc":{"start":{"line":246,"column":33},"end":{"line":246,"column":48}}},"21":{"name":"(anonymous_21)","line":259,"loc":{"start":{"line":259,"column":40},"end":{"line":259,"column":55}}},"22":{"name":"(anonymous_22)","line":274,"loc":{"start":{"line":274,"column":33},"end":{"line":274,"column":48}}},"23":{"name":"(anonymous_23)","line":284,"loc":{"start":{"line":284,"column":28},"end":{"line":284,"column":43}}},"24":{"name":"(anonymous_24)","line":295,"loc":{"start":{"line":295,"column":19},"end":{"line":295,"column":34}}},"25":{"name":"(anonymous_25)","line":309,"loc":{"start":{"line":309,"column":24},"end":{"line":309,"column":39}}},"26":{"name":"(anonymous_26)","line":320,"loc":{"start":{"line":320,"column":29},"end":{"line":320,"column":44}}},"27":{"name":"(anonymous_27)","line":332,"loc":{"start":{"line":332,"column":32},"end":{"line":332,"column":47}}},"28":{"name":"(anonymous_28)","line":343,"loc":{"start":{"line":343,"column":28},"end":{"line":343,"column":43}}},"29":{"name":"(anonymous_29)","line":353,"loc":{"start":{"line":353,"column":34},"end":{"line":353,"column":49}}},"30":{"name":"(anonymous_30)","line":366,"loc":{"start":{"line":366,"column":31},"end":{"line":366,"column":46}}},"31":{"name":"(anonymous_31)","line":376,"loc":{"start":{"line":376,"column":36},"end":{"line":376,"column":51}}},"32":{"name":"(anonymous_32)","line":387,"loc":{"start":{"line":387,"column":37},"end":{"line":387,"column":52}}},"33":{"name":"(anonymous_33)","line":399,"loc":{"start":{"line":399,"column":31},"end":{"line":399,"column":46}}},"34":{"name":"(anonymous_34)","line":409,"loc":{"start":{"line":409,"column":22},"end":{"line":409,"column":37}}},"35":{"name":"(anonymous_35)","line":420,"loc":{"start":{"line":420,"column":22},"end":{"line":420,"column":37}}},"36":{"name":"(anonymous_36)","line":430,"loc":{"start":{"line":430,"column":36},"end":{"line":430,"column":51}}},"37":{"name":"(anonymous_37)","line":441,"loc":{"start":{"line":441,"column":21},"end":{"line":441,"column":36}}},"38":{"name":"(anonymous_38)","line":453,"loc":{"start":{"line":453,"column":21},"end":{"line":453,"column":36}}},"39":{"name":"(anonymous_39)","line":465,"loc":{"start":{"line":465,"column":34},"end":{"line":465,"column":49}}},"40":{"name":"(anonymous_40)","line":477,"loc":{"start":{"line":477,"column":36},"end":{"line":477,"column":51}}},"41":{"name":"(anonymous_41)","line":488,"loc":{"start":{"line":488,"column":34},"end":{"line":488,"column":49}}},"42":{"name":"(anonymous_42)","line":509,"loc":{"start":{"line":509,"column":39},"end":{"line":509,"column":54}}},"43":{"name":"(anonymous_43)","line":520,"loc":{"start":{"line":520,"column":44},"end":{"line":520,"column":59}}},"44":{"name":"(anonymous_44)","line":535,"loc":{"start":{"line":535,"column":33},"end":{"line":535,"column":48}}},"45":{"name":"(anonymous_45)","line":547,"loc":{"start":{"line":547,"column":26},"end":{"line":547,"column":41}}},"46":{"name":"(anonymous_46)","line":557,"loc":{"start":{"line":557,"column":27},"end":{"line":557,"column":42}}},"47":{"name":"(anonymous_47)","line":570,"loc":{"start":{"line":570,"column":34},"end":{"line":570,"column":49}}},"48":{"name":"(anonymous_48)","line":581,"loc":{"start":{"line":581,"column":42},"end":{"line":581,"column":57}}},"49":{"name":"(anonymous_49)","line":596,"loc":{"start":{"line":596,"column":32},"end":{"line":596,"column":47}}},"50":{"name":"(anonymous_50)","line":608,"loc":{"start":{"line":608,"column":23},"end":{"line":608,"column":38}}},"51":{"name":"(anonymous_51)","line":619,"loc":{"start":{"line":619,"column":31},"end":{"line":619,"column":46}}},"52":{"name":"(anonymous_52)","line":631,"loc":{"start":{"line":631,"column":36},"end":{"line":631,"column":51}}},"53":{"name":"(anonymous_53)","line":641,"loc":{"start":{"line":641,"column":35},"end":{"line":641,"column":50}}},"54":{"name":"(anonymous_54)","line":655,"loc":{"start":{"line":655,"column":35},"end":{"line":655,"column":50}}},"55":{"name":"(anonymous_55)","line":667,"loc":{"start":{"line":667,"column":27},"end":{"line":667,"column":42}}},"56":{"name":"(anonymous_56)","line":680,"loc":{"start":{"line":680,"column":28},"end":{"line":680,"column":43}}},"57":{"name":"(anonymous_57)","line":691,"loc":{"start":{"line":691,"column":36},"end":{"line":691,"column":51}}},"58":{"name":"(anonymous_58)","line":702,"loc":{"start":{"line":702,"column":30},"end":{"line":702,"column":45}}},"59":{"name":"(anonymous_59)","line":712,"loc":{"start":{"line":712,"column":30},"end":{"line":712,"column":45}}},"60":{"name":"(anonymous_60)","line":725,"loc":{"start":{"line":725,"column":32},"end":{"line":725,"column":47}}},"61":{"name":"(anonymous_61)","line":736,"loc":{"start":{"line":736,"column":39},"end":{"line":736,"column":54}}},"62":{"name":"(anonymous_62)","line":747,"loc":{"start":{"line":747,"column":31},"end":{"line":747,"column":46}}},"63":{"name":"(anonymous_63)","line":758,"loc":{"start":{"line":758,"column":43},"end":{"line":758,"column":58}}},"64":{"name":"(anonymous_64)","line":769,"loc":{"start":{"line":769,"column":36},"end":{"line":769,"column":51}}},"65":{"name":"(anonymous_65)","line":787,"loc":{"start":{"line":787,"column":33},"end":{"line":787,"column":48}}},"66":{"name":"(anonymous_66)","line":799,"loc":{"start":{"line":799,"column":45},"end":{"line":799,"column":60}}},"67":{"name":"(anonymous_67)","line":809,"loc":{"start":{"line":809,"column":32},"end":{"line":809,"column":47}}},"68":{"name":"(anonymous_68)","line":819,"loc":{"start":{"line":819,"column":37},"end":{"line":819,"column":52}}},"69":{"name":"(anonymous_69)","line":830,"loc":{"start":{"line":830,"column":34},"end":{"line":830,"column":49}}},"70":{"name":"(anonymous_70)","line":840,"loc":{"start":{"line":840,"column":34},"end":{"line":840,"column":49}}},"71":{"name":"(anonymous_71)","line":850,"loc":{"start":{"line":850,"column":38},"end":{"line":850,"column":53}}},"72":{"name":"(anonymous_72)","line":866,"loc":{"start":{"line":866,"column":31},"end":{"line":866,"column":46}}},"73":{"name":"(anonymous_73)","line":877,"loc":{"start":{"line":877,"column":32},"end":{"line":877,"column":47}}},"74":{"name":"(anonymous_74)","line":891,"loc":{"start":{"line":891,"column":37},"end":{"line":891,"column":52}}},"75":{"name":"(anonymous_75)","line":903,"loc":{"start":{"line":903,"column":40},"end":{"line":903,"column":55}}},"76":{"name":"(anonymous_76)","line":914,"loc":{"start":{"line":914,"column":34},"end":{"line":914,"column":49}}},"77":{"name":"(anonymous_77)","line":926,"loc":{"start":{"line":926,"column":42},"end":{"line":926,"column":57}}},"78":{"name":"(anonymous_78)","line":937,"loc":{"start":{"line":937,"column":28},"end":{"line":937,"column":43}}},"79":{"name":"(anonymous_79)","line":950,"loc":{"start":{"line":950,"column":36},"end":{"line":950,"column":51}}},"80":{"name":"(anonymous_80)","line":961,"loc":{"start":{"line":961,"column":37},"end":{"line":961,"column":52}}},"81":{"name":"(anonymous_81)","line":974,"loc":{"start":{"line":974,"column":45},"end":{"line":974,"column":60}}},"82":{"name":"(anonymous_82)","line":986,"loc":{"start":{"line":986,"column":34},"end":{"line":986,"column":49}}},"83":{"name":"(anonymous_83)","line":996,"loc":{"start":{"line":996,"column":42},"end":{"line":996,"column":57}}},"84":{"name":"(anonymous_84)","line":1010,"loc":{"start":{"line":1010,"column":32},"end":{"line":1010,"column":47}}},"85":{"name":"(anonymous_85)","line":1025,"loc":{"start":{"line":1025,"column":41},"end":{"line":1025,"column":56}}},"86":{"name":"(anonymous_86)","line":1038,"loc":{"start":{"line":1038,"column":28},"end":{"line":1038,"column":43}}},"87":{"name":"(anonymous_87)","line":1050,"loc":{"start":{"line":1050,"column":41},"end":{"line":1050,"column":56}}},"88":{"name":"(anonymous_88)","line":1064,"loc":{"start":{"line":1064,"column":43},"end":{"line":1064,"column":58}}},"89":{"name":"(anonymous_89)","line":1075,"loc":{"start":{"line":1075,"column":33},"end":{"line":1075,"column":48}}},"90":{"name":"(anonymous_90)","line":1085,"loc":{"start":{"line":1085,"column":34},"end":{"line":1085,"column":49}}},"91":{"name":"(anonymous_91)","line":1097,"loc":{"start":{"line":1097,"column":35},"end":{"line":1097,"column":50}}},"92":{"name":"(anonymous_92)","line":1111,"loc":{"start":{"line":1111,"column":33},"end":{"line":1111,"column":48}}},"93":{"name":"(anonymous_93)","line":1126,"loc":{"start":{"line":1126,"column":28},"end":{"line":1126,"column":43}}},"94":{"name":"(anonymous_94)","line":1138,"loc":{"start":{"line":1138,"column":31},"end":{"line":1138,"column":46}}},"95":{"name":"(anonymous_95)","line":1150,"loc":{"start":{"line":1150,"column":30},"end":{"line":1150,"column":45}}},"96":{"name":"(anonymous_96)","line":1160,"loc":{"start":{"line":1160,"column":28},"end":{"line":1160,"column":43}}},"97":{"name":"(anonymous_97)","line":1172,"loc":{"start":{"line":1172,"column":30},"end":{"line":1172,"column":45}}},"98":{"name":"(anonymous_98)","line":1182,"loc":{"start":{"line":1182,"column":33},"end":{"line":1182,"column":48}}},"99":{"name":"(anonymous_99)","line":1193,"loc":{"start":{"line":1193,"column":35},"end":{"line":1193,"column":50}}},"100":{"name":"(anonymous_100)","line":1205,"loc":{"start":{"line":1205,"column":35},"end":{"line":1205,"column":50}}},"101":{"name":"(anonymous_101)","line":1215,"loc":{"start":{"line":1215,"column":25},"end":{"line":1215,"column":40}}},"102":{"name":"(anonymous_102)","line":1226,"loc":{"start":{"line":1226,"column":30},"end":{"line":1226,"column":45}}},"103":{"name":"(anonymous_103)","line":1236,"loc":{"start":{"line":1236,"column":32},"end":{"line":1236,"column":47}}},"104":{"name":"(anonymous_104)","line":1246,"loc":{"start":{"line":1246,"column":28},"end":{"line":1246,"column":43}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":16}},"2":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":74}},"4":{"start":{"line":20,"column":0},"end":{"line":22,"column":2}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":70}},"6":{"start":{"line":32,"column":0},"end":{"line":34,"column":2}},"7":{"start":{"line":33,"column":2},"end":{"line":33,"column":77}},"8":{"start":{"line":45,"column":0},"end":{"line":47,"column":2}},"9":{"start":{"line":46,"column":2},"end":{"line":46,"column":78}},"10":{"start":{"line":56,"column":0},"end":{"line":58,"column":2}},"11":{"start":{"line":57,"column":2},"end":{"line":57,"column":63}},"12":{"start":{"line":72,"column":0},"end":{"line":74,"column":2}},"13":{"start":{"line":73,"column":2},"end":{"line":73,"column":69}},"14":{"start":{"line":83,"column":0},"end":{"line":85,"column":2}},"15":{"start":{"line":84,"column":2},"end":{"line":84,"column":75}},"16":{"start":{"line":95,"column":0},"end":{"line":97,"column":2}},"17":{"start":{"line":96,"column":2},"end":{"line":96,"column":77}},"18":{"start":{"line":105,"column":0},"end":{"line":107,"column":2}},"19":{"start":{"line":106,"column":2},"end":{"line":106,"column":78}},"20":{"start":{"line":115,"column":0},"end":{"line":117,"column":2}},"21":{"start":{"line":116,"column":2},"end":{"line":116,"column":72}},"22":{"start":{"line":129,"column":0},"end":{"line":131,"column":2}},"23":{"start":{"line":130,"column":2},"end":{"line":130,"column":65}},"24":{"start":{"line":141,"column":0},"end":{"line":143,"column":2}},"25":{"start":{"line":142,"column":2},"end":{"line":142,"column":71}},"26":{"start":{"line":152,"column":0},"end":{"line":154,"column":2}},"27":{"start":{"line":153,"column":2},"end":{"line":153,"column":77}},"28":{"start":{"line":162,"column":0},"end":{"line":164,"column":2}},"29":{"start":{"line":163,"column":2},"end":{"line":163,"column":76}},"30":{"start":{"line":173,"column":0},"end":{"line":175,"column":2}},"31":{"start":{"line":174,"column":2},"end":{"line":174,"column":71}},"32":{"start":{"line":185,"column":0},"end":{"line":187,"column":2}},"33":{"start":{"line":186,"column":2},"end":{"line":186,"column":79}},"34":{"start":{"line":197,"column":0},"end":{"line":199,"column":2}},"35":{"start":{"line":198,"column":2},"end":{"line":198,"column":77}},"36":{"start":{"line":209,"column":0},"end":{"line":211,"column":2}},"37":{"start":{"line":210,"column":2},"end":{"line":210,"column":81}},"38":{"start":{"line":234,"column":0},"end":{"line":236,"column":2}},"39":{"start":{"line":235,"column":2},"end":{"line":235,"column":70}},"40":{"start":{"line":246,"column":0},"end":{"line":248,"column":2}},"41":{"start":{"line":247,"column":2},"end":{"line":247,"column":79}},"42":{"start":{"line":259,"column":0},"end":{"line":261,"column":2}},"43":{"start":{"line":260,"column":2},"end":{"line":260,"column":88}},"44":{"start":{"line":274,"column":0},"end":{"line":276,"column":2}},"45":{"start":{"line":275,"column":2},"end":{"line":275,"column":84}},"46":{"start":{"line":284,"column":0},"end":{"line":286,"column":2}},"47":{"start":{"line":285,"column":2},"end":{"line":285,"column":73}},"48":{"start":{"line":295,"column":0},"end":{"line":297,"column":2}},"49":{"start":{"line":296,"column":2},"end":{"line":296,"column":63}},"50":{"start":{"line":309,"column":0},"end":{"line":311,"column":2}},"51":{"start":{"line":310,"column":2},"end":{"line":310,"column":69}},"52":{"start":{"line":320,"column":0},"end":{"line":322,"column":2}},"53":{"start":{"line":321,"column":2},"end":{"line":321,"column":75}},"54":{"start":{"line":332,"column":0},"end":{"line":334,"column":2}},"55":{"start":{"line":333,"column":2},"end":{"line":333,"column":77}},"56":{"start":{"line":343,"column":0},"end":{"line":345,"column":2}},"57":{"start":{"line":344,"column":2},"end":{"line":344,"column":73}},"58":{"start":{"line":353,"column":0},"end":{"line":355,"column":2}},"59":{"start":{"line":354,"column":2},"end":{"line":354,"column":79}},"60":{"start":{"line":366,"column":0},"end":{"line":368,"column":2}},"61":{"start":{"line":367,"column":2},"end":{"line":367,"column":76}},"62":{"start":{"line":376,"column":0},"end":{"line":378,"column":2}},"63":{"start":{"line":377,"column":2},"end":{"line":377,"column":82}},"64":{"start":{"line":387,"column":0},"end":{"line":389,"column":2}},"65":{"start":{"line":388,"column":2},"end":{"line":388,"column":83}},"66":{"start":{"line":399,"column":0},"end":{"line":401,"column":2}},"67":{"start":{"line":400,"column":2},"end":{"line":400,"column":76}},"68":{"start":{"line":409,"column":0},"end":{"line":411,"column":2}},"69":{"start":{"line":410,"column":2},"end":{"line":410,"column":66}},"70":{"start":{"line":420,"column":0},"end":{"line":422,"column":2}},"71":{"start":{"line":421,"column":2},"end":{"line":421,"column":67}},"72":{"start":{"line":430,"column":0},"end":{"line":432,"column":2}},"73":{"start":{"line":431,"column":2},"end":{"line":431,"column":84}},"74":{"start":{"line":441,"column":0},"end":{"line":443,"column":2}},"75":{"start":{"line":442,"column":2},"end":{"line":442,"column":65}},"76":{"start":{"line":453,"column":0},"end":{"line":455,"column":2}},"77":{"start":{"line":454,"column":2},"end":{"line":454,"column":72}},"78":{"start":{"line":465,"column":0},"end":{"line":467,"column":2}},"79":{"start":{"line":466,"column":2},"end":{"line":466,"column":87}},"80":{"start":{"line":477,"column":0},"end":{"line":479,"column":2}},"81":{"start":{"line":478,"column":2},"end":{"line":478,"column":90}},"82":{"start":{"line":488,"column":0},"end":{"line":490,"column":2}},"83":{"start":{"line":489,"column":2},"end":{"line":489,"column":87}},"84":{"start":{"line":509,"column":0},"end":{"line":511,"column":2}},"85":{"start":{"line":510,"column":2},"end":{"line":510,"column":86}},"86":{"start":{"line":520,"column":0},"end":{"line":522,"column":2}},"87":{"start":{"line":521,"column":2},"end":{"line":521,"column":92}},"88":{"start":{"line":535,"column":0},"end":{"line":537,"column":2}},"89":{"start":{"line":536,"column":2},"end":{"line":536,"column":86}},"90":{"start":{"line":547,"column":0},"end":{"line":549,"column":2}},"91":{"start":{"line":548,"column":2},"end":{"line":548,"column":71}},"92":{"start":{"line":557,"column":0},"end":{"line":559,"column":2}},"93":{"start":{"line":558,"column":2},"end":{"line":558,"column":77}},"94":{"start":{"line":570,"column":0},"end":{"line":572,"column":2}},"95":{"start":{"line":571,"column":2},"end":{"line":571,"column":81}},"96":{"start":{"line":581,"column":0},"end":{"line":583,"column":2}},"97":{"start":{"line":582,"column":2},"end":{"line":582,"column":90}},"98":{"start":{"line":596,"column":0},"end":{"line":598,"column":2}},"99":{"start":{"line":597,"column":2},"end":{"line":597,"column":79}},"100":{"start":{"line":608,"column":0},"end":{"line":610,"column":2}},"101":{"start":{"line":609,"column":2},"end":{"line":609,"column":68}},"102":{"start":{"line":619,"column":0},"end":{"line":621,"column":2}},"103":{"start":{"line":620,"column":2},"end":{"line":620,"column":77}},"104":{"start":{"line":631,"column":0},"end":{"line":633,"column":2}},"105":{"start":{"line":632,"column":2},"end":{"line":632,"column":82}},"106":{"start":{"line":641,"column":0},"end":{"line":643,"column":2}},"107":{"start":{"line":642,"column":2},"end":{"line":642,"column":82}},"108":{"start":{"line":655,"column":0},"end":{"line":657,"column":2}},"109":{"start":{"line":656,"column":2},"end":{"line":656,"column":82}},"110":{"start":{"line":667,"column":0},"end":{"line":669,"column":2}},"111":{"start":{"line":668,"column":2},"end":{"line":668,"column":73}},"112":{"start":{"line":680,"column":0},"end":{"line":682,"column":2}},"113":{"start":{"line":681,"column":2},"end":{"line":681,"column":74}},"114":{"start":{"line":691,"column":0},"end":{"line":693,"column":2}},"115":{"start":{"line":692,"column":2},"end":{"line":692,"column":83}},"116":{"start":{"line":702,"column":0},"end":{"line":704,"column":2}},"117":{"start":{"line":703,"column":2},"end":{"line":703,"column":76}},"118":{"start":{"line":712,"column":0},"end":{"line":714,"column":2}},"119":{"start":{"line":713,"column":2},"end":{"line":713,"column":76}},"120":{"start":{"line":725,"column":0},"end":{"line":727,"column":2}},"121":{"start":{"line":726,"column":2},"end":{"line":726,"column":78}},"122":{"start":{"line":736,"column":0},"end":{"line":738,"column":2}},"123":{"start":{"line":737,"column":2},"end":{"line":737,"column":86}},"124":{"start":{"line":747,"column":0},"end":{"line":749,"column":2}},"125":{"start":{"line":748,"column":2},"end":{"line":748,"column":77}},"126":{"start":{"line":758,"column":0},"end":{"line":760,"column":2}},"127":{"start":{"line":759,"column":2},"end":{"line":759,"column":91}},"128":{"start":{"line":769,"column":0},"end":{"line":771,"column":2}},"129":{"start":{"line":770,"column":2},"end":{"line":770,"column":83}},"130":{"start":{"line":787,"column":0},"end":{"line":789,"column":2}},"131":{"start":{"line":788,"column":2},"end":{"line":788,"column":79}},"132":{"start":{"line":799,"column":0},"end":{"line":801,"column":2}},"133":{"start":{"line":800,"column":2},"end":{"line":800,"column":93}},"134":{"start":{"line":809,"column":0},"end":{"line":811,"column":2}},"135":{"start":{"line":810,"column":2},"end":{"line":810,"column":78}},"136":{"start":{"line":819,"column":0},"end":{"line":821,"column":2}},"137":{"start":{"line":820,"column":2},"end":{"line":820,"column":84}},"138":{"start":{"line":830,"column":0},"end":{"line":832,"column":2}},"139":{"start":{"line":831,"column":2},"end":{"line":831,"column":80}},"140":{"start":{"line":840,"column":0},"end":{"line":842,"column":2}},"141":{"start":{"line":841,"column":2},"end":{"line":841,"column":90}},"142":{"start":{"line":850,"column":0},"end":{"line":852,"column":2}},"143":{"start":{"line":851,"column":2},"end":{"line":851,"column":85}},"144":{"start":{"line":866,"column":0},"end":{"line":868,"column":2}},"145":{"start":{"line":867,"column":2},"end":{"line":867,"column":77}},"146":{"start":{"line":877,"column":0},"end":{"line":879,"column":2}},"147":{"start":{"line":878,"column":2},"end":{"line":878,"column":78}},"148":{"start":{"line":891,"column":0},"end":{"line":893,"column":2}},"149":{"start":{"line":892,"column":2},"end":{"line":892,"column":84}},"150":{"start":{"line":903,"column":0},"end":{"line":905,"column":2}},"151":{"start":{"line":904,"column":2},"end":{"line":904,"column":87}},"152":{"start":{"line":914,"column":0},"end":{"line":916,"column":2}},"153":{"start":{"line":915,"column":2},"end":{"line":915,"column":80}},"154":{"start":{"line":926,"column":0},"end":{"line":928,"column":2}},"155":{"start":{"line":927,"column":2},"end":{"line":927,"column":89}},"156":{"start":{"line":937,"column":0},"end":{"line":939,"column":2}},"157":{"start":{"line":938,"column":2},"end":{"line":938,"column":73}},"158":{"start":{"line":950,"column":0},"end":{"line":952,"column":2}},"159":{"start":{"line":951,"column":2},"end":{"line":951,"column":82}},"160":{"start":{"line":961,"column":0},"end":{"line":963,"column":2}},"161":{"start":{"line":962,"column":2},"end":{"line":962,"column":83}},"162":{"start":{"line":974,"column":0},"end":{"line":976,"column":2}},"163":{"start":{"line":975,"column":2},"end":{"line":975,"column":92}},"164":{"start":{"line":986,"column":0},"end":{"line":988,"column":2}},"165":{"start":{"line":987,"column":2},"end":{"line":987,"column":80}},"166":{"start":{"line":996,"column":0},"end":{"line":998,"column":2}},"167":{"start":{"line":997,"column":2},"end":{"line":997,"column":89}},"168":{"start":{"line":1010,"column":0},"end":{"line":1012,"column":2}},"169":{"start":{"line":1011,"column":2},"end":{"line":1011,"column":78}},"170":{"start":{"line":1025,"column":0},"end":{"line":1027,"column":2}},"171":{"start":{"line":1026,"column":2},"end":{"line":1026,"column":88}},"172":{"start":{"line":1038,"column":0},"end":{"line":1040,"column":2}},"173":{"start":{"line":1039,"column":2},"end":{"line":1039,"column":73}},"174":{"start":{"line":1050,"column":0},"end":{"line":1052,"column":2}},"175":{"start":{"line":1051,"column":2},"end":{"line":1051,"column":87}},"176":{"start":{"line":1064,"column":0},"end":{"line":1066,"column":2}},"177":{"start":{"line":1065,"column":2},"end":{"line":1065,"column":89}},"178":{"start":{"line":1075,"column":0},"end":{"line":1077,"column":2}},"179":{"start":{"line":1076,"column":2},"end":{"line":1076,"column":79}},"180":{"start":{"line":1085,"column":0},"end":{"line":1087,"column":2}},"181":{"start":{"line":1086,"column":2},"end":{"line":1086,"column":81}},"182":{"start":{"line":1097,"column":0},"end":{"line":1099,"column":2}},"183":{"start":{"line":1098,"column":2},"end":{"line":1098,"column":81}},"184":{"start":{"line":1111,"column":0},"end":{"line":1113,"column":2}},"185":{"start":{"line":1112,"column":2},"end":{"line":1112,"column":79}},"186":{"start":{"line":1126,"column":0},"end":{"line":1128,"column":2}},"187":{"start":{"line":1127,"column":2},"end":{"line":1127,"column":73}},"188":{"start":{"line":1138,"column":0},"end":{"line":1140,"column":2}},"189":{"start":{"line":1139,"column":2},"end":{"line":1139,"column":76}},"190":{"start":{"line":1150,"column":0},"end":{"line":1152,"column":2}},"191":{"start":{"line":1151,"column":2},"end":{"line":1151,"column":75}},"192":{"start":{"line":1160,"column":0},"end":{"line":1162,"column":2}},"193":{"start":{"line":1161,"column":2},"end":{"line":1161,"column":73}},"194":{"start":{"line":1172,"column":0},"end":{"line":1174,"column":2}},"195":{"start":{"line":1173,"column":2},"end":{"line":1173,"column":75}},"196":{"start":{"line":1182,"column":0},"end":{"line":1184,"column":2}},"197":{"start":{"line":1183,"column":2},"end":{"line":1183,"column":79}},"198":{"start":{"line":1193,"column":0},"end":{"line":1195,"column":2}},"199":{"start":{"line":1194,"column":2},"end":{"line":1194,"column":81}},"200":{"start":{"line":1205,"column":0},"end":{"line":1207,"column":2}},"201":{"start":{"line":1206,"column":2},"end":{"line":1206,"column":81}},"202":{"start":{"line":1215,"column":0},"end":{"line":1217,"column":2}},"203":{"start":{"line":1216,"column":2},"end":{"line":1216,"column":70}},"204":{"start":{"line":1226,"column":0},"end":{"line":1228,"column":2}},"205":{"start":{"line":1227,"column":2},"end":{"line":1227,"column":76}},"206":{"start":{"line":1236,"column":0},"end":{"line":1238,"column":2}},"207":{"start":{"line":1237,"column":2},"end":{"line":1237,"column":78}},"208":{"start":{"line":1246,"column":0},"end":{"line":1248,"column":2}},"209":{"start":{"line":1247,"column":2},"end":{"line":1247,"column":74}},"210":{"start":{"line":1250,"column":0},"end":{"line":1250,"column":24}}},"branchMap":{},"code":["// Auto-generated by Stone, do not modify.","var routes = {};","","/**"," * Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access token."," * @function Dropbox#authTokenFromOauth1"," * @arg {AuthTokenFromOAuth1Arg} arg - The request parameters."," * @returns {Promise.<AuthTokenFromOAuth1Result, Error.<AuthTokenFromOAuth1Error>>}"," */","routes.authTokenFromOauth1 = function (arg) {","  return this.request('auth/token/from_oauth1', arg, 'app', 'api', 'rpc');","};","","/**"," * Disables the access token used to authenticate the call."," * @function Dropbox#authTokenRevoke"," * @arg {void} arg - The request parameters."," * @returns {Promise.<void, Error.<void>>}"," */","routes.authTokenRevoke = function (arg) {","  return this.request('auth/token/revoke', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the metadata for a file or folder. This is an alpha endpoint"," * compatible with the properties API. Note: Metadata for the root folder is"," * unsupported."," * @function Dropbox#filesAlphaGetMetadata"," * @arg {FilesAlphaGetMetadataArg} arg - The request parameters."," * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesAlphaGetMetadataError>>}"," */","routes.filesAlphaGetMetadata = function (arg) {","  return this.request('files/alpha/get_metadata', arg, 'user', 'api', 'rpc');","};","","/**"," * Create a new file with the contents provided in the request. Note that this"," * endpoint is part of the properties API alpha and is slightly different from"," * upload. Do not use this to upload a file larger than 150 MB. Instead, create"," * an upload session with upload_session/start."," * @function Dropbox#filesAlphaUpload"," * @arg {FilesCommitInfoWithProperties} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesUploadErrorWithProperties>>}"," */","routes.filesAlphaUpload = function (arg) {","  return this.request('files/alpha/upload', arg, 'user', 'content', 'upload');","};","","/**"," * Copy a file or folder to a different location in the user's Dropbox. If the"," * source path is a folder all its contents will be copied."," * @function Dropbox#filesCopy"," * @arg {FilesRelocationArg} arg - The request parameters."," * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesRelocationError>>}"," */","routes.filesCopy = function (arg) {","  return this.request('files/copy', arg, 'user', 'api', 'rpc');","};","","/**"," * Copy multiple files or folders to different locations at once in the user's"," * Dropbox. If RelocationBatchArg.allow_shared_folder is false, this route is"," * atomic. If on entry failes, the whole transaction will abort. If"," * RelocationBatchArg.allow_shared_folder is true, not atomicity is guaranteed,"," * but you will be able to copy the contents of shared folders to new locations."," * This route will return job ID immediately and do the async copy job in"," * background. Please use copy_batch/check to check the job status."," * @function Dropbox#filesCopyBatch"," * @arg {FilesRelocationBatchArg} arg - The request parameters."," * @returns {Promise.<FilesRelocationBatchLaunch, Error.<void>>}"," */","routes.filesCopyBatch = function (arg) {","  return this.request('files/copy_batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for copy_batch. If success, it"," * returns list of results for each entry."," * @function Dropbox#filesCopyBatchCheck"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<FilesRelocationBatchJobStatus, Error.<AsyncPollError>>}"," */","routes.filesCopyBatchCheck = function (arg) {","  return this.request('files/copy_batch/check', arg, 'user', 'api', 'rpc');","};","","/**"," * Get a copy reference to a file or folder. This reference string can be used"," * to save that file or folder to another user's Dropbox by passing it to"," * copy_reference/save."," * @function Dropbox#filesCopyReferenceGet"," * @arg {FilesGetCopyReferenceArg} arg - The request parameters."," * @returns {Promise.<FilesGetCopyReferenceResult, Error.<FilesGetCopyReferenceError>>}"," */","routes.filesCopyReferenceGet = function (arg) {","  return this.request('files/copy_reference/get', arg, 'user', 'api', 'rpc');","};","","/**"," * Save a copy reference returned by copy_reference/get to the user's Dropbox."," * @function Dropbox#filesCopyReferenceSave"," * @arg {FilesSaveCopyReferenceArg} arg - The request parameters."," * @returns {Promise.<FilesSaveCopyReferenceResult, Error.<FilesSaveCopyReferenceError>>}"," */","routes.filesCopyReferenceSave = function (arg) {","  return this.request('files/copy_reference/save', arg, 'user', 'api', 'rpc');","};","","/**"," * Create a folder at a given path."," * @function Dropbox#filesCreateFolder"," * @arg {FilesCreateFolderArg} arg - The request parameters."," * @returns {Promise.<FilesFolderMetadata, Error.<FilesCreateFolderError>>}"," */","routes.filesCreateFolder = function (arg) {","  return this.request('files/create_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * Delete the file or folder at a given path. If the path is a folder, all its"," * contents will be deleted too. A successful response indicates that the file"," * or folder was deleted. The returned metadata will be the corresponding"," * FileMetadata or FolderMetadata for the item at time of deletion, and not a"," * DeletedMetadata object."," * @function Dropbox#filesDelete"," * @arg {FilesDeleteArg} arg - The request parameters."," * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesDeleteError>>}"," */","routes.filesDelete = function (arg) {","  return this.request('files/delete', arg, 'user', 'api', 'rpc');","};","","/**"," * Delete multiple files/folders at once. This route is asynchronous, which"," * returns a job ID immediately and runs the delete batch asynchronously. Use"," * delete_batch/check to check the job status."," * @function Dropbox#filesDeleteBatch"," * @arg {FilesDeleteBatchArg} arg - The request parameters."," * @returns {Promise.<FilesDeleteBatchLaunch, Error.<void>>}"," */","routes.filesDeleteBatch = function (arg) {","  return this.request('files/delete_batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for delete_batch. If success, it"," * returns list of result for each entry."," * @function Dropbox#filesDeleteBatchCheck"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<FilesDeleteBatchJobStatus, Error.<AsyncPollError>>}"," */","routes.filesDeleteBatchCheck = function (arg) {","  return this.request('files/delete_batch/check', arg, 'user', 'api', 'rpc');","};","","/**"," * Download a file from a user's Dropbox."," * @function Dropbox#filesDownload"," * @arg {FilesDownloadArg} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesDownloadError>>}"," */","routes.filesDownload = function (arg) {","  return this.request('files/download', arg, 'user', 'content', 'download');","};","","/**"," * Returns the metadata for a file or folder. Note: Metadata for the root folder"," * is unsupported."," * @function Dropbox#filesGetMetadata"," * @arg {FilesGetMetadataArg} arg - The request parameters."," * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesGetMetadataError>>}"," */","routes.filesGetMetadata = function (arg) {","  return this.request('files/get_metadata', arg, 'user', 'api', 'rpc');","};","","/**"," * Get a preview for a file. Currently previews are only generated for the files"," * with  the following extensions: .doc, .docx, .docm, .ppt, .pps, .ppsx, .ppsm,"," * .pptx, .pptm,  .xls, .xlsx, .xlsm, .rtf."," * @function Dropbox#filesGetPreview"," * @arg {FilesPreviewArg} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesPreviewError>>}"," */","routes.filesGetPreview = function (arg) {","  return this.request('files/get_preview', arg, 'user', 'content', 'download');","};","","/**"," * Get a temporary link to stream content of a file. This link will expire in"," * four hours and afterwards you will get 410 Gone. Content-Type of the link is"," * determined automatically by the file's mime type."," * @function Dropbox#filesGetTemporaryLink"," * @arg {FilesGetTemporaryLinkArg} arg - The request parameters."," * @returns {Promise.<FilesGetTemporaryLinkResult, Error.<FilesGetTemporaryLinkError>>}"," */","routes.filesGetTemporaryLink = function (arg) {","  return this.request('files/get_temporary_link', arg, 'user', 'api', 'rpc');","};","","/**"," * Get a thumbnail for an image. This method currently supports files with the"," * following file extensions: jpg, jpeg, png, tiff, tif, gif and bmp. Photos"," * that are larger than 20MB in size won't be converted to a thumbnail."," * @function Dropbox#filesGetThumbnail"," * @arg {FilesThumbnailArg} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesThumbnailError>>}"," */","routes.filesGetThumbnail = function (arg) {","  return this.request('files/get_thumbnail', arg, 'user', 'content', 'download');","};","","/**"," * Starts returning the contents of a folder. If the result's"," * ListFolderResult.has_more field is true, call list_folder/continue with the"," * returned ListFolderResult.cursor to retrieve more entries. If you're using"," * ListFolderArg.recursive set to true to keep a local cache of the contents of"," * a Dropbox account, iterate through each entry in order and process them as"," * follows to keep your local state in sync: For each FileMetadata, store the"," * new entry at the given path in your local state. If the required parent"," * folders don't exist yet, create them. If there's already something else at"," * the given path, replace it and remove all its children. For each"," * FolderMetadata, store the new entry at the given path in your local state. If"," * the required parent folders don't exist yet, create them. If there's already"," * something else at the given path, replace it but leave the children as they"," * are. Check the new entry's FolderSharingInfo.read_only and set all its"," * children's read-only statuses to match. For each DeletedMetadata, if your"," * local state has something at the given path, remove it and all its children."," * If there's nothing at the given path, ignore this entry."," * @function Dropbox#filesListFolder"," * @arg {FilesListFolderArg} arg - The request parameters."," * @returns {Promise.<FilesListFolderResult, Error.<FilesListFolderError>>}"," */","routes.filesListFolder = function (arg) {","  return this.request('files/list_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from list_folder, use this to paginate"," * through all files and retrieve updates to the folder, following the same"," * rules as documented for list_folder."," * @function Dropbox#filesListFolderContinue"," * @arg {FilesListFolderContinueArg} arg - The request parameters."," * @returns {Promise.<FilesListFolderResult, Error.<FilesListFolderContinueError>>}"," */","routes.filesListFolderContinue = function (arg) {","  return this.request('files/list_folder/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * A way to quickly get a cursor for the folder's state. Unlike list_folder,"," * list_folder/get_latest_cursor doesn't return any entries. This endpoint is"," * for app which only needs to know about new files and modifications and"," * doesn't need to know about files that already exist in Dropbox."," * @function Dropbox#filesListFolderGetLatestCursor"," * @arg {FilesListFolderArg} arg - The request parameters."," * @returns {Promise.<FilesListFolderGetLatestCursorResult, Error.<FilesListFolderError>>}"," */","routes.filesListFolderGetLatestCursor = function (arg) {","  return this.request('files/list_folder/get_latest_cursor', arg, 'user', 'api', 'rpc');","};","","/**"," * A longpoll endpoint to wait for changes on an account. In conjunction with"," * list_folder/continue, this call gives you a low-latency way to monitor an"," * account for file changes. The connection will block until there are changes"," * available or a timeout occurs. This endpoint is useful mostly for client-side"," * apps. If you're looking for server-side notifications, check out our webhooks"," * documentation https://www.dropbox.com/developers/reference/webhooks."," * @function Dropbox#filesListFolderLongpoll"," * @arg {FilesListFolderLongpollArg} arg - The request parameters."," * @returns {Promise.<FilesListFolderLongpollResult, Error.<FilesListFolderLongpollError>>}"," */","routes.filesListFolderLongpoll = function (arg) {","  return this.request('files/list_folder/longpoll', arg, 'noauth', 'notify', 'rpc');","};","","/**"," * Return revisions of a file."," * @function Dropbox#filesListRevisions"," * @arg {FilesListRevisionsArg} arg - The request parameters."," * @returns {Promise.<FilesListRevisionsResult, Error.<FilesListRevisionsError>>}"," */","routes.filesListRevisions = function (arg) {","  return this.request('files/list_revisions', arg, 'user', 'api', 'rpc');","};","","/**"," * Move a file or folder to a different location in the user's Dropbox. If the"," * source path is a folder all its contents will be moved."," * @function Dropbox#filesMove"," * @arg {FilesRelocationArg} arg - The request parameters."," * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesRelocationError>>}"," */","routes.filesMove = function (arg) {","  return this.request('files/move', arg, 'user', 'api', 'rpc');","};","","/**"," * Move multiple files or folders to different locations at once in the user's"," * Dropbox. This route is 'all or nothing', which means if one entry fails, the"," * whole transaction will abort. This route will return job ID immediately and"," * do the async moving job in background. Please use move_batch/check to check"," * the job status."," * @function Dropbox#filesMoveBatch"," * @arg {FilesRelocationBatchArg} arg - The request parameters."," * @returns {Promise.<FilesRelocationBatchLaunch, Error.<void>>}"," */","routes.filesMoveBatch = function (arg) {","  return this.request('files/move_batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for move_batch. If success, it"," * returns list of results for each entry."," * @function Dropbox#filesMoveBatchCheck"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<FilesRelocationBatchJobStatus, Error.<AsyncPollError>>}"," */","routes.filesMoveBatchCheck = function (arg) {","  return this.request('files/move_batch/check', arg, 'user', 'api', 'rpc');","};","","/**"," * Permanently delete the file or folder at a given path (see"," * https://www.dropbox.com/en/help/40). Note: This endpoint is only available"," * for Dropbox Business apps."," * @function Dropbox#filesPermanentlyDelete"," * @arg {FilesDeleteArg} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesDeleteError>>}"," */","routes.filesPermanentlyDelete = function (arg) {","  return this.request('files/permanently_delete', arg, 'user', 'api', 'rpc');","};","","/**"," * Add custom properties to a file using a filled property template. See"," * properties/template/add to create new property templates."," * @function Dropbox#filesPropertiesAdd"," * @arg {FilesPropertyGroupWithPath} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesAddPropertiesError>>}"," */","routes.filesPropertiesAdd = function (arg) {","  return this.request('files/properties/add', arg, 'user', 'api', 'rpc');","};","","/**"," * Overwrite custom properties from a specified template associated with a file."," * @function Dropbox#filesPropertiesOverwrite"," * @arg {FilesPropertyGroupWithPath} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesInvalidPropertyGroupError>>}"," */","routes.filesPropertiesOverwrite = function (arg) {","  return this.request('files/properties/overwrite', arg, 'user', 'api', 'rpc');","};","","/**"," * Remove all custom properties from a specified template associated with a"," * file. To remove specific property key value pairs, see properties/update. To"," * update a property template, see properties/template/update. Property"," * templates can't be removed once created."," * @function Dropbox#filesPropertiesRemove"," * @arg {FilesRemovePropertiesArg} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesRemovePropertiesError>>}"," */","routes.filesPropertiesRemove = function (arg) {","  return this.request('files/properties/remove', arg, 'user', 'api', 'rpc');","};","","/**"," * Get the schema for a specified template."," * @function Dropbox#filesPropertiesTemplateGet"," * @arg {PropertiesGetPropertyTemplateArg} arg - The request parameters."," * @returns {Promise.<PropertiesGetPropertyTemplateResult, Error.<PropertiesPropertyTemplateError>>}"," */","routes.filesPropertiesTemplateGet = function (arg) {","  return this.request('files/properties/template/get', arg, 'user', 'api', 'rpc');","};","","/**"," * Get the property template identifiers for a user. To get the schema of each"," * template use properties/template/get."," * @function Dropbox#filesPropertiesTemplateList"," * @arg {void} arg - The request parameters."," * @returns {Promise.<PropertiesListPropertyTemplateIds, Error.<PropertiesPropertyTemplateError>>}"," */","routes.filesPropertiesTemplateList = function (arg) {","  return this.request('files/properties/template/list', arg, 'user', 'api', 'rpc');","};","","/**"," * Add, update or remove custom properties from a specified template associated"," * with a file. Fields that already exist and not described in the request will"," * not be modified."," * @function Dropbox#filesPropertiesUpdate"," * @arg {FilesUpdatePropertyGroupArg} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesUpdatePropertiesError>>}"," */","routes.filesPropertiesUpdate = function (arg) {","  return this.request('files/properties/update', arg, 'user', 'api', 'rpc');","};","","/**"," * Restore a file to a specific revision."," * @function Dropbox#filesRestore"," * @arg {FilesRestoreArg} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesRestoreError>>}"," */","routes.filesRestore = function (arg) {","  return this.request('files/restore', arg, 'user', 'api', 'rpc');","};","","/**"," * Save a specified URL into a file in user's Dropbox. If the given path already"," * exists, the file will be renamed to avoid the conflict (e.g. myfile (1).txt)."," * @function Dropbox#filesSaveUrl"," * @arg {FilesSaveUrlArg} arg - The request parameters."," * @returns {Promise.<FilesSaveUrlResult, Error.<FilesSaveUrlError>>}"," */","routes.filesSaveUrl = function (arg) {","  return this.request('files/save_url', arg, 'user', 'api', 'rpc');","};","","/**"," * Check the status of a save_url job."," * @function Dropbox#filesSaveUrlCheckJobStatus"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<FilesSaveUrlJobStatus, Error.<AsyncPollError>>}"," */","routes.filesSaveUrlCheckJobStatus = function (arg) {","  return this.request('files/save_url/check_job_status', arg, 'user', 'api', 'rpc');","};","","/**"," * Searches for files and folders. Note: Recent changes may not immediately be"," * reflected in search results due to a short delay in indexing."," * @function Dropbox#filesSearch"," * @arg {FilesSearchArg} arg - The request parameters."," * @returns {Promise.<FilesSearchResult, Error.<FilesSearchError>>}"," */","routes.filesSearch = function (arg) {","  return this.request('files/search', arg, 'user', 'api', 'rpc');","};","","/**"," * Create a new file with the contents provided in the request. Do not use this"," * to upload a file larger than 150 MB. Instead, create an upload session with"," * upload_session/start."," * @function Dropbox#filesUpload"," * @arg {FilesCommitInfo} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesUploadError>>}"," */","routes.filesUpload = function (arg) {","  return this.request('files/upload', arg, 'user', 'content', 'upload');","};","","/**"," * Append more data to an upload session. A single request should not upload"," * more than 150 MB of file contents."," * @function Dropbox#filesUploadSessionAppend"," * @deprecated"," * @arg {FilesUploadSessionCursor} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesUploadSessionLookupError>>}"," */","routes.filesUploadSessionAppend = function (arg) {","  return this.request('files/upload_session/append', arg, 'user', 'content', 'upload');","};","","/**"," * Append more data to an upload session. When the parameter close is set, this"," * call will close the session. A single request should not upload more than 150"," * MB of file contents."," * @function Dropbox#filesUploadSessionAppendV2"," * @arg {FilesUploadSessionAppendArg} arg - The request parameters."," * @returns {Promise.<void, Error.<FilesUploadSessionLookupError>>}"," */","routes.filesUploadSessionAppendV2 = function (arg) {","  return this.request('files/upload_session/append_v2', arg, 'user', 'content', 'upload');","};","","/**"," * Finish an upload session and save the uploaded data to the given file path. A"," * single request should not upload more than 150 MB of file contents."," * @function Dropbox#filesUploadSessionFinish"," * @arg {FilesUploadSessionFinishArg} arg - The request parameters."," * @returns {Promise.<FilesFileMetadata, Error.<FilesUploadSessionFinishError>>}"," */","routes.filesUploadSessionFinish = function (arg) {","  return this.request('files/upload_session/finish', arg, 'user', 'content', 'upload');","};","","/**"," * This route helps you commit many files at once into a user's Dropbox. Use"," * upload_session/start and upload_session/append_v2 to upload file contents. We"," * recommend uploading many files in parallel to increase throughput. Once the"," * file contents have been uploaded, rather than calling upload_session/finish,"," * use this route to finish all your upload sessions in a single request."," * UploadSessionStartArg.close or UploadSessionAppendArg.close needs to be true"," * for the last upload_session/start or upload_session/append_v2 call. This"," * route will return a job_id immediately and do the async commit job in"," * background. Use upload_session/finish_batch/check to check the job status."," * For the same account, this route should be executed serially. That means you"," * should not start the next job before current job finishes. We allow up to"," * 1000 entries in a single request."," * @function Dropbox#filesUploadSessionFinishBatch"," * @arg {FilesUploadSessionFinishBatchArg} arg - The request parameters."," * @returns {Promise.<FilesUploadSessionFinishBatchLaunch, Error.<void>>}"," */","routes.filesUploadSessionFinishBatch = function (arg) {","  return this.request('files/upload_session/finish_batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for upload_session/finish_batch. If"," * success, it returns list of result for each entry."," * @function Dropbox#filesUploadSessionFinishBatchCheck"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<FilesUploadSessionFinishBatchJobStatus, Error.<AsyncPollError>>}"," */","routes.filesUploadSessionFinishBatchCheck = function (arg) {","  return this.request('files/upload_session/finish_batch/check', arg, 'user', 'api', 'rpc');","};","","/**"," * Upload sessions allow you to upload a single file in one or more requests,"," * for example where the size of the file is greater than 150 MB.  This call"," * starts a new upload session with the given data. You can then use"," * upload_session/append_v2 to add more data and upload_session/finish to save"," * all the data to a file in Dropbox. A single request should not upload more"," * than 150 MB of file contents."," * @function Dropbox#filesUploadSessionStart"," * @arg {FilesUploadSessionStartArg} arg - The request parameters."," * @returns {Promise.<FilesUploadSessionStartResult, Error.<void>>}"," */","routes.filesUploadSessionStart = function (arg) {","  return this.request('files/upload_session/start', arg, 'user', 'content', 'upload');","};","","/**"," * Marks the given Paper doc as deleted. This operation is non-destructive and"," * the doc can be revived by the owner.  Note: This action can be performed only"," * by the doc owner."," * @function Dropbox#paperDocsArchive"," * @arg {PaperRefPaperDoc} arg - The request parameters."," * @returns {Promise.<void, Error.<PaperDocLookupError>>}"," */","routes.paperDocsArchive = function (arg) {","  return this.request('paper/docs/archive', arg, 'user', 'api', 'rpc');","};","","/**"," * Exports and downloads Paper doc either as HTML or markdown."," * @function Dropbox#paperDocsDownload"," * @arg {PaperPaperDocExport} arg - The request parameters."," * @returns {Promise.<PaperPaperDocExportResult, Error.<PaperDocLookupError>>}"," */","routes.paperDocsDownload = function (arg) {","  return this.request('paper/docs/download', arg, 'user', 'api', 'download');","};","","/**"," * Lists the users who are explicitly invited to the Paper folder in which the"," * Paper doc is contained. For private folders all users (including owner)"," * shared on the folder are listed and for team folders all non-team users"," * shared on the folder are returned."," * @function Dropbox#paperDocsFolderUsersList"," * @arg {PaperListUsersOnFolderArgs} arg - The request parameters."," * @returns {Promise.<PaperListUsersOnFolderResponse, Error.<PaperDocLookupError>>}"," */","routes.paperDocsFolderUsersList = function (arg) {","  return this.request('paper/docs/folder_users/list', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from docs/folder_users/list, use this to"," * paginate through all users on the Paper folder."," * @function Dropbox#paperDocsFolderUsersListContinue"," * @arg {PaperListUsersOnFolderContinueArgs} arg - The request parameters."," * @returns {Promise.<PaperListUsersOnFolderResponse, Error.<PaperListUsersCursorError>>}"," */","routes.paperDocsFolderUsersListContinue = function (arg) {","  return this.request('paper/docs/folder_users/list/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Retrieves folder information for the given Paper doc. This includes:   -"," * folder sharing policy; permissions for subfolders are set by the top-level"," * folder.   - full 'filepath', i.e. the list of folders (both folderId and"," * folderName) from the root folder to the folder directly containing the Paper"," * doc.  Note: If the Paper doc is not in any folder (aka unfiled) the response"," * will be empty."," * @function Dropbox#paperDocsGetFolderInfo"," * @arg {PaperRefPaperDoc} arg - The request parameters."," * @returns {Promise.<PaperFoldersContainingPaperDoc, Error.<PaperDocLookupError>>}"," */","routes.paperDocsGetFolderInfo = function (arg) {","  return this.request('paper/docs/get_folder_info', arg, 'user', 'api', 'rpc');","};","","/**"," * Return the list of all Paper docs according to the argument specifications."," * To iterate over through the full pagination, pass the cursor to"," * docs/list/continue."," * @function Dropbox#paperDocsList"," * @arg {PaperListPaperDocsArgs} arg - The request parameters."," * @returns {Promise.<PaperListPaperDocsResponse, Error.<void>>}"," */","routes.paperDocsList = function (arg) {","  return this.request('paper/docs/list', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from docs/list, use this to paginate through"," * all Paper doc."," * @function Dropbox#paperDocsListContinue"," * @arg {PaperListPaperDocsContinueArgs} arg - The request parameters."," * @returns {Promise.<PaperListPaperDocsResponse, Error.<PaperListDocsCursorError>>}"," */","routes.paperDocsListContinue = function (arg) {","  return this.request('paper/docs/list/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Permanently deletes the given Paper doc. This operation is final as the doc"," * cannot be recovered.  Note: This action can be performed only by the doc"," * owner."," * @function Dropbox#paperDocsPermanentlyDelete"," * @arg {PaperRefPaperDoc} arg - The request parameters."," * @returns {Promise.<void, Error.<PaperDocLookupError>>}"," */","routes.paperDocsPermanentlyDelete = function (arg) {","  return this.request('paper/docs/permanently_delete', arg, 'user', 'api', 'rpc');","};","","/**"," * Gets the default sharing policy for the given Paper doc."," * @function Dropbox#paperDocsSharingPolicyGet"," * @arg {PaperRefPaperDoc} arg - The request parameters."," * @returns {Promise.<PaperSharingPolicy, Error.<PaperDocLookupError>>}"," */","routes.paperDocsSharingPolicyGet = function (arg) {","  return this.request('paper/docs/sharing_policy/get', arg, 'user', 'api', 'rpc');","};","","/**"," * Sets the default sharing policy for the given Paper doc. The default"," * 'team_sharing_policy' can be changed only by teams, omit this field for"," * personal accounts.  Note: 'public_sharing_policy' cannot be set to the value"," * 'disabled' because this setting can be changed only via the team admin"," * console."," * @function Dropbox#paperDocsSharingPolicySet"," * @arg {PaperPaperDocSharingPolicy} arg - The request parameters."," * @returns {Promise.<void, Error.<PaperDocLookupError>>}"," */","routes.paperDocsSharingPolicySet = function (arg) {","  return this.request('paper/docs/sharing_policy/set', arg, 'user', 'api', 'rpc');","};","","/**"," * Allows an owner or editor to add users to a Paper doc or change their"," * permissions using their email or Dropbox account id.  Note: The Doc owner's"," * permissions cannot be changed."," * @function Dropbox#paperDocsUsersAdd"," * @arg {PaperAddPaperDocUser} arg - The request parameters."," * @returns {Promise.<Array.<PaperAddPaperDocUserMemberResult>, Error.<PaperDocLookupError>>}"," */","routes.paperDocsUsersAdd = function (arg) {","  return this.request('paper/docs/users/add', arg, 'user', 'api', 'rpc');","};","","/**"," * Lists all users who visited the Paper doc or users with explicit access. This"," * call excludes users who have been removed. The list is sorted by the date of"," * the visit or the share date. The list will include both users, the explicitly"," * shared ones as well as those who came in using the Paper url link."," * @function Dropbox#paperDocsUsersList"," * @arg {PaperListUsersOnPaperDocArgs} arg - The request parameters."," * @returns {Promise.<PaperListUsersOnPaperDocResponse, Error.<PaperDocLookupError>>}"," */","routes.paperDocsUsersList = function (arg) {","  return this.request('paper/docs/users/list', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from docs/users/list, use this to paginate"," * through all users on the Paper doc."," * @function Dropbox#paperDocsUsersListContinue"," * @arg {PaperListUsersOnPaperDocContinueArgs} arg - The request parameters."," * @returns {Promise.<PaperListUsersOnPaperDocResponse, Error.<PaperListUsersCursorError>>}"," */","routes.paperDocsUsersListContinue = function (arg) {","  return this.request('paper/docs/users/list/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Allows an owner or editor to remove users from a Paper doc using their email"," * or Dropbox account id.  Note: Doc owner cannot be removed."," * @function Dropbox#paperDocsUsersRemove"," * @arg {PaperRemovePaperDocUser} arg - The request parameters."," * @returns {Promise.<void, Error.<PaperDocLookupError>>}"," */","routes.paperDocsUsersRemove = function (arg) {","  return this.request('paper/docs/users/remove', arg, 'user', 'api', 'rpc');","};","","/**"," * Adds specified members to a file."," * @function Dropbox#sharingAddFileMember"," * @arg {SharingAddFileMemberArgs} arg - The request parameters."," * @returns {Promise.<Array.<SharingFileMemberActionResult>, Error.<SharingAddFileMemberError>>}"," */","routes.sharingAddFileMember = function (arg) {","  return this.request('sharing/add_file_member', arg, 'user', 'api', 'rpc');","};","","/**"," * Allows an owner or editor (if the ACL update policy allows) of a shared"," * folder to add another member. For the new member to get access to all the"," * functionality for this folder, you will need to call mount_folder on their"," * behalf. Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingAddFolderMember"," * @arg {SharingAddFolderMemberArg} arg - The request parameters."," * @returns {Promise.<void, Error.<SharingAddFolderMemberError>>}"," */","routes.sharingAddFolderMember = function (arg) {","  return this.request('sharing/add_folder_member', arg, 'user', 'api', 'rpc');","};","","/**"," * Identical to update_file_member but with less information returned."," * @function Dropbox#sharingChangeFileMemberAccess"," * @deprecated"," * @arg {SharingChangeFileMemberAccessArgs} arg - The request parameters."," * @returns {Promise.<SharingFileMemberActionResult, Error.<SharingFileMemberActionError>>}"," */","routes.sharingChangeFileMemberAccess = function (arg) {","  return this.request('sharing/change_file_member_access', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job. Apps must have full Dropbox access"," * to use this endpoint."," * @function Dropbox#sharingCheckJobStatus"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<SharingJobStatus, Error.<AsyncPollError>>}"," */","routes.sharingCheckJobStatus = function (arg) {","  return this.request('sharing/check_job_status', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for sharing a folder. Apps must"," * have full Dropbox access to use this endpoint."," * @function Dropbox#sharingCheckRemoveMemberJobStatus"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<SharingRemoveMemberJobStatus, Error.<AsyncPollError>>}"," */","routes.sharingCheckRemoveMemberJobStatus = function (arg) {","  return this.request('sharing/check_remove_member_job_status', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for sharing a folder. Apps must"," * have full Dropbox access to use this endpoint."," * @function Dropbox#sharingCheckShareJobStatus"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<SharingShareFolderJobStatus, Error.<AsyncPollError>>}"," */","routes.sharingCheckShareJobStatus = function (arg) {","  return this.request('sharing/check_share_job_status', arg, 'user', 'api', 'rpc');","};","","/**"," * Create a shared link. If a shared link already exists for the given path,"," * that link is returned. Note that in the returned PathLinkMetadata, the"," * PathLinkMetadata.url field is the shortened URL if"," * CreateSharedLinkArg.short_url argument is set to true. Previously, it was"," * technically possible to break a shared link by moving or renaming the"," * corresponding file or folder. In the future, this will no longer be the case,"," * so your app shouldn't rely on this behavior. Instead, if your app needs to"," * revoke a shared link, use revoke_shared_link."," * @function Dropbox#sharingCreateSharedLink"," * @deprecated"," * @arg {SharingCreateSharedLinkArg} arg - The request parameters."," * @returns {Promise.<SharingPathLinkMetadata, Error.<SharingCreateSharedLinkError>>}"," */","routes.sharingCreateSharedLink = function (arg) {","  return this.request('sharing/create_shared_link', arg, 'user', 'api', 'rpc');","};","","/**"," * Create a shared link with custom settings. If no settings are given then the"," * default visibility is RequestedVisibility.public (The resolved visibility,"," * though, may depend on other aspects such as team and shared folder settings)."," * @function Dropbox#sharingCreateSharedLinkWithSettings"," * @arg {SharingCreateSharedLinkWithSettingsArg} arg - The request parameters."," * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingCreateSharedLinkWithSettingsError>>}"," */","routes.sharingCreateSharedLinkWithSettings = function (arg) {","  return this.request('sharing/create_shared_link_with_settings', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns shared file metadata."," * @function Dropbox#sharingGetFileMetadata"," * @arg {SharingGetFileMetadataArg} arg - The request parameters."," * @returns {Promise.<SharingSharedFileMetadata, Error.<SharingGetFileMetadataError>>}"," */","routes.sharingGetFileMetadata = function (arg) {","  return this.request('sharing/get_file_metadata', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns shared file metadata."," * @function Dropbox#sharingGetFileMetadataBatch"," * @arg {SharingGetFileMetadataBatchArg} arg - The request parameters."," * @returns {Promise.<Array.<SharingGetFileMetadataBatchResult>, Error.<SharingSharingUserError>>}"," */","routes.sharingGetFileMetadataBatch = function (arg) {","  return this.request('sharing/get_file_metadata/batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns shared folder metadata by its folder ID. Apps must have full Dropbox"," * access to use this endpoint."," * @function Dropbox#sharingGetFolderMetadata"," * @arg {SharingGetMetadataArgs} arg - The request parameters."," * @returns {Promise.<SharingSharedFolderMetadata, Error.<SharingSharedFolderAccessError>>}"," */","routes.sharingGetFolderMetadata = function (arg) {","  return this.request('sharing/get_folder_metadata', arg, 'user', 'api', 'rpc');","};","","/**"," * Download the shared link's file from a user's Dropbox."," * @function Dropbox#sharingGetSharedLinkFile"," * @arg {Object} arg - The request parameters."," * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingGetSharedLinkFileError>>}"," */","routes.sharingGetSharedLinkFile = function (arg) {","  return this.request('sharing/get_shared_link_file', arg, 'user', 'content', 'download');","};","","/**"," * Get the shared link's metadata."," * @function Dropbox#sharingGetSharedLinkMetadata"," * @arg {SharingGetSharedLinkMetadataArg} arg - The request parameters."," * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingSharedLinkError>>}"," */","routes.sharingGetSharedLinkMetadata = function (arg) {","  return this.request('sharing/get_shared_link_metadata', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns a list of LinkMetadata objects for this user, including collection"," * links. If no path is given, returns a list of all shared links for the"," * current user, including collection links. If a non-empty path is given,"," * returns a list of all shared links that allow access to the given path."," * Collection links are never returned in this case. Note that the url field in"," * the response is never the shortened URL."," * @function Dropbox#sharingGetSharedLinks"," * @deprecated"," * @arg {SharingGetSharedLinksArg} arg - The request parameters."," * @returns {Promise.<SharingGetSharedLinksResult, Error.<SharingGetSharedLinksError>>}"," */","routes.sharingGetSharedLinks = function (arg) {","  return this.request('sharing/get_shared_links', arg, 'user', 'api', 'rpc');","};","","/**"," * Use to obtain the members who have been invited to a file, both inherited and"," * uninherited members."," * @function Dropbox#sharingListFileMembers"," * @arg {SharingListFileMembersArg} arg - The request parameters."," * @returns {Promise.<SharingSharedFileMembers, Error.<SharingListFileMembersError>>}"," */","routes.sharingListFileMembers = function (arg) {","  return this.request('sharing/list_file_members', arg, 'user', 'api', 'rpc');","};","","/**"," * Get members of multiple files at once. The arguments to this route are more"," * limited, and the limit on query result size per file is more strict. To"," * customize the results more, use the individual file endpoint. Inherited users"," * and groups are not included in the result, and permissions are not returned"," * for this endpoint."," * @function Dropbox#sharingListFileMembersBatch"," * @arg {SharingListFileMembersBatchArg} arg - The request parameters."," * @returns {Promise.<Array.<SharingListFileMembersBatchResult>, Error.<SharingSharingUserError>>}"," */","routes.sharingListFileMembersBatch = function (arg) {","  return this.request('sharing/list_file_members/batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from list_file_members or"," * list_file_members/batch, use this to paginate through all shared file"," * members."," * @function Dropbox#sharingListFileMembersContinue"," * @arg {SharingListFileMembersContinueArg} arg - The request parameters."," * @returns {Promise.<SharingSharedFileMembers, Error.<SharingListFileMembersContinueError>>}"," */","routes.sharingListFileMembersContinue = function (arg) {","  return this.request('sharing/list_file_members/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns shared folder membership by its folder ID. Apps must have full"," * Dropbox access to use this endpoint."," * @function Dropbox#sharingListFolderMembers"," * @arg {SharingListFolderMembersArgs} arg - The request parameters."," * @returns {Promise.<SharingSharedFolderMembers, Error.<SharingSharedFolderAccessError>>}"," */","routes.sharingListFolderMembers = function (arg) {","  return this.request('sharing/list_folder_members', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from list_folder_members, use this to"," * paginate through all shared folder members. Apps must have full Dropbox"," * access to use this endpoint."," * @function Dropbox#sharingListFolderMembersContinue"," * @arg {SharingListFolderMembersContinueArg} arg - The request parameters."," * @returns {Promise.<SharingSharedFolderMembers, Error.<SharingListFolderMembersContinueError>>}"," */","routes.sharingListFolderMembersContinue = function (arg) {","  return this.request('sharing/list_folder_members/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Return the list of all shared folders the current user has access to. Apps"," * must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingListFolders"," * @arg {SharingListFoldersArgs} arg - The request parameters."," * @returns {Promise.<SharingListFoldersResult, Error.<void>>}"," */","routes.sharingListFolders = function (arg) {","  return this.request('sharing/list_folders', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from list_folders, use this to paginate"," * through all shared folders. The cursor must come from a previous call to"," * list_folders or list_folders/continue. Apps must have full Dropbox access to"," * use this endpoint."," * @function Dropbox#sharingListFoldersContinue"," * @arg {SharingListFoldersContinueArg} arg - The request parameters."," * @returns {Promise.<SharingListFoldersResult, Error.<SharingListFoldersContinueError>>}"," */","routes.sharingListFoldersContinue = function (arg) {","  return this.request('sharing/list_folders/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Return the list of all shared folders the current user can mount or unmount."," * Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingListMountableFolders"," * @arg {SharingListFoldersArgs} arg - The request parameters."," * @returns {Promise.<SharingListFoldersResult, Error.<void>>}"," */","routes.sharingListMountableFolders = function (arg) {","  return this.request('sharing/list_mountable_folders', arg, 'user', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from list_mountable_folders, use this to"," * paginate through all mountable shared folders. The cursor must come from a"," * previous call to list_mountable_folders or list_mountable_folders/continue."," * Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingListMountableFoldersContinue"," * @arg {SharingListFoldersContinueArg} arg - The request parameters."," * @returns {Promise.<SharingListFoldersResult, Error.<SharingListFoldersContinueError>>}"," */","routes.sharingListMountableFoldersContinue = function (arg) {","  return this.request('sharing/list_mountable_folders/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * Returns a list of all files shared with current user.  Does not include files"," * the user has received via shared folders, and does  not include unclaimed"," * invitations."," * @function Dropbox#sharingListReceivedFiles"," * @arg {SharingListFilesArg} arg - The request parameters."," * @returns {Promise.<SharingListFilesResult, Error.<SharingSharingUserError>>}"," */","routes.sharingListReceivedFiles = function (arg) {","  return this.request('sharing/list_received_files', arg, 'user', 'api', 'rpc');","};","","/**"," * Get more results with a cursor from list_received_files."," * @function Dropbox#sharingListReceivedFilesContinue"," * @arg {SharingListFilesContinueArg} arg - The request parameters."," * @returns {Promise.<SharingListFilesResult, Error.<SharingListFilesContinueError>>}"," */","routes.sharingListReceivedFilesContinue = function (arg) {","  return this.request('sharing/list_received_files/continue', arg, 'user', 'api', 'rpc');","};","","/**"," * List shared links of this user. If no path is given, returns a list of all"," * shared links for the current user. If a non-empty path is given, returns a"," * list of all shared links that allow access to the given path - direct links"," * to the given path and links to parent folders of the given path. Links to"," * parent folders can be suppressed by setting direct_only to true."," * @function Dropbox#sharingListSharedLinks"," * @arg {SharingListSharedLinksArg} arg - The request parameters."," * @returns {Promise.<SharingListSharedLinksResult, Error.<SharingListSharedLinksError>>}"," */","routes.sharingListSharedLinks = function (arg) {","  return this.request('sharing/list_shared_links', arg, 'user', 'api', 'rpc');","};","","/**"," * Modify the shared link's settings. If the requested visibility conflict with"," * the shared links policy of the team or the shared folder (in case the linked"," * file is part of a shared folder) then the LinkPermissions.resolved_visibility"," * of the returned SharedLinkMetadata will reflect the actual visibility of the"," * shared link and the LinkPermissions.requested_visibility will reflect the"," * requested visibility."," * @function Dropbox#sharingModifySharedLinkSettings"," * @arg {SharingModifySharedLinkSettingsArgs} arg - The request parameters."," * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingModifySharedLinkSettingsError>>}"," */","routes.sharingModifySharedLinkSettings = function (arg) {","  return this.request('sharing/modify_shared_link_settings', arg, 'user', 'api', 'rpc');","};","","/**"," * The current user mounts the designated folder. Mount a shared folder for a"," * user after they have been added as a member. Once mounted, the shared folder"," * will appear in their Dropbox. Apps must have full Dropbox access to use this"," * endpoint."," * @function Dropbox#sharingMountFolder"," * @arg {SharingMountFolderArg} arg - The request parameters."," * @returns {Promise.<SharingSharedFolderMetadata, Error.<SharingMountFolderError>>}"," */","routes.sharingMountFolder = function (arg) {","  return this.request('sharing/mount_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * The current user relinquishes their membership in the designated file. Note"," * that the current user may still have inherited access to this file through"," * the parent folder. Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingRelinquishFileMembership"," * @arg {SharingRelinquishFileMembershipArg} arg - The request parameters."," * @returns {Promise.<void, Error.<SharingRelinquishFileMembershipError>>}"," */","routes.sharingRelinquishFileMembership = function (arg) {","  return this.request('sharing/relinquish_file_membership', arg, 'user', 'api', 'rpc');","};","","/**"," * The current user relinquishes their membership in the designated shared"," * folder and will no longer have access to the folder.  A folder owner cannot"," * relinquish membership in their own folder. This will run synchronously if"," * leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must"," * have full Dropbox access to use this endpoint."," * @function Dropbox#sharingRelinquishFolderMembership"," * @arg {SharingRelinquishFolderMembershipArg} arg - The request parameters."," * @returns {Promise.<AsyncLaunchEmptyResult, Error.<SharingRelinquishFolderMembershipError>>}"," */","routes.sharingRelinquishFolderMembership = function (arg) {","  return this.request('sharing/relinquish_folder_membership', arg, 'user', 'api', 'rpc');","};","","/**"," * Identical to remove_file_member_2 but with less information returned."," * @function Dropbox#sharingRemoveFileMember"," * @deprecated"," * @arg {SharingRemoveFileMemberArg} arg - The request parameters."," * @returns {Promise.<SharingFileMemberActionIndividualResult, Error.<SharingRemoveFileMemberError>>}"," */","routes.sharingRemoveFileMember = function (arg) {","  return this.request('sharing/remove_file_member', arg, 'user', 'api', 'rpc');","};","","/**"," * Removes a specified member from the file."," * @function Dropbox#sharingRemoveFileMember2"," * @arg {SharingRemoveFileMemberArg} arg - The request parameters."," * @returns {Promise.<SharingFileMemberRemoveActionResult, Error.<SharingRemoveFileMemberError>>}"," */","routes.sharingRemoveFileMember2 = function (arg) {","  return this.request('sharing/remove_file_member_2', arg, 'user', 'api', 'rpc');","};","","/**"," * Allows an owner or editor (if the ACL update policy allows) of a shared"," * folder to remove another member. Apps must have full Dropbox access to use"," * this endpoint."," * @function Dropbox#sharingRemoveFolderMember"," * @arg {SharingRemoveFolderMemberArg} arg - The request parameters."," * @returns {Promise.<AsyncLaunchResultBase, Error.<SharingRemoveFolderMemberError>>}"," */","routes.sharingRemoveFolderMember = function (arg) {","  return this.request('sharing/remove_folder_member', arg, 'user', 'api', 'rpc');","};","","/**"," * Revoke a shared link. Note that even after revoking a shared link to a file,"," * the file may be accessible if there are shared links leading to any of the"," * file parent folders. To list all shared links that enable access to a"," * specific file, you can use the list_shared_links with the file as the"," * ListSharedLinksArg.path argument."," * @function Dropbox#sharingRevokeSharedLink"," * @arg {SharingRevokeSharedLinkArg} arg - The request parameters."," * @returns {Promise.<void, Error.<SharingRevokeSharedLinkError>>}"," */","routes.sharingRevokeSharedLink = function (arg) {","  return this.request('sharing/revoke_shared_link', arg, 'user', 'api', 'rpc');","};","","/**"," * Share a folder with collaborators. Most sharing will be completed"," * synchronously. Large folders will be completed asynchronously. To make"," * testing the async case repeatable, set `ShareFolderArg.force_async`. If a"," * ShareFolderLaunch.async_job_id is returned, you'll need to call"," * check_share_job_status until the action completes to get the metadata for the"," * folder. Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingShareFolder"," * @arg {SharingShareFolderArg} arg - The request parameters."," * @returns {Promise.<SharingShareFolderLaunch, Error.<SharingShareFolderError>>}"," */","routes.sharingShareFolder = function (arg) {","  return this.request('sharing/share_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * Transfer ownership of a shared folder to a member of the shared folder. User"," * must have AccessLevel.owner access to the shared folder to perform a"," * transfer. Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingTransferFolder"," * @arg {SharingTransferFolderArg} arg - The request parameters."," * @returns {Promise.<void, Error.<SharingTransferFolderError>>}"," */","routes.sharingTransferFolder = function (arg) {","  return this.request('sharing/transfer_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * The current user unmounts the designated folder. They can re-mount the folder"," * at a later time using mount_folder. Apps must have full Dropbox access to use"," * this endpoint."," * @function Dropbox#sharingUnmountFolder"," * @arg {SharingUnmountFolderArg} arg - The request parameters."," * @returns {Promise.<void, Error.<SharingUnmountFolderError>>}"," */","routes.sharingUnmountFolder = function (arg) {","  return this.request('sharing/unmount_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * Remove all members from this file. Does not remove inherited members."," * @function Dropbox#sharingUnshareFile"," * @arg {SharingUnshareFileArg} arg - The request parameters."," * @returns {Promise.<void, Error.<SharingUnshareFileError>>}"," */","routes.sharingUnshareFile = function (arg) {","  return this.request('sharing/unshare_file', arg, 'user', 'api', 'rpc');","};","","/**"," * Allows a shared folder owner to unshare the folder. You'll need to call"," * check_job_status to determine if the action has completed successfully. Apps"," * must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingUnshareFolder"," * @arg {SharingUnshareFolderArg} arg - The request parameters."," * @returns {Promise.<AsyncLaunchEmptyResult, Error.<SharingUnshareFolderError>>}"," */","routes.sharingUnshareFolder = function (arg) {","  return this.request('sharing/unshare_folder', arg, 'user', 'api', 'rpc');","};","","/**"," * Changes a member's access on a shared file."," * @function Dropbox#sharingUpdateFileMember"," * @arg {SharingUpdateFileMemberArgs} arg - The request parameters."," * @returns {Promise.<SharingMemberAccessLevelResult, Error.<SharingFileMemberActionError>>}"," */","routes.sharingUpdateFileMember = function (arg) {","  return this.request('sharing/update_file_member', arg, 'user', 'api', 'rpc');","};","","/**"," * Allows an owner or editor of a shared folder to update another member's"," * permissions. Apps must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingUpdateFolderMember"," * @arg {SharingUpdateFolderMemberArg} arg - The request parameters."," * @returns {Promise.<SharingMemberAccessLevelResult, Error.<SharingUpdateFolderMemberError>>}"," */","routes.sharingUpdateFolderMember = function (arg) {","  return this.request('sharing/update_folder_member', arg, 'user', 'api', 'rpc');","};","","/**"," * Update the sharing policies for a shared folder. User must have"," * AccessLevel.owner access to the shared folder to update its policies. Apps"," * must have full Dropbox access to use this endpoint."," * @function Dropbox#sharingUpdateFolderPolicy"," * @arg {SharingUpdateFolderPolicyArg} arg - The request parameters."," * @returns {Promise.<SharingSharedFolderMetadata, Error.<SharingUpdateFolderPolicyError>>}"," */","routes.sharingUpdateFolderPolicy = function (arg) {","  return this.request('sharing/update_folder_policy', arg, 'user', 'api', 'rpc');","};","","/**"," * Get information about a user's account."," * @function Dropbox#usersGetAccount"," * @arg {UsersGetAccountArg} arg - The request parameters."," * @returns {Promise.<UsersBasicAccount, Error.<UsersGetAccountError>>}"," */","routes.usersGetAccount = function (arg) {","  return this.request('users/get_account', arg, 'user', 'api', 'rpc');","};","","/**"," * Get information about multiple user accounts.  At most 300 accounts may be"," * queried per request."," * @function Dropbox#usersGetAccountBatch"," * @arg {UsersGetAccountBatchArg} arg - The request parameters."," * @returns {Promise.<Object, Error.<UsersGetAccountBatchError>>}"," */","routes.usersGetAccountBatch = function (arg) {","  return this.request('users/get_account_batch', arg, 'user', 'api', 'rpc');","};","","/**"," * Get information about the current user's account."," * @function Dropbox#usersGetCurrentAccount"," * @arg {void} arg - The request parameters."," * @returns {Promise.<UsersFullAccount, Error.<void>>}"," */","routes.usersGetCurrentAccount = function (arg) {","  return this.request('users/get_current_account', arg, 'user', 'api', 'rpc');","};","","/**"," * Get the space usage information for the current user's account."," * @function Dropbox#usersGetSpaceUsage"," * @arg {void} arg - The request parameters."," * @returns {Promise.<UsersSpaceUsage, Error.<void>>}"," */","routes.usersGetSpaceUsage = function (arg) {","  return this.request('users/get_space_usage', arg, 'user', 'api', 'rpc');","};","","module.exports = routes;",""],"l":{"2":1,"10":1,"11":0,"20":1,"21":0,"32":1,"33":0,"45":1,"46":0,"56":1,"57":0,"72":1,"73":0,"83":1,"84":0,"95":1,"96":0,"105":1,"106":0,"115":1,"116":0,"129":1,"130":0,"141":1,"142":0,"152":1,"153":0,"162":1,"163":0,"173":1,"174":0,"185":1,"186":0,"197":1,"198":0,"209":1,"210":0,"234":1,"235":0,"246":1,"247":0,"259":1,"260":0,"274":1,"275":0,"284":1,"285":0,"295":1,"296":0,"309":1,"310":0,"320":1,"321":0,"332":1,"333":0,"343":1,"344":0,"353":1,"354":0,"366":1,"367":0,"376":1,"377":0,"387":1,"388":0,"399":1,"400":0,"409":1,"410":0,"420":1,"421":0,"430":1,"431":0,"441":1,"442":0,"453":1,"454":0,"465":1,"466":0,"477":1,"478":0,"488":1,"489":0,"509":1,"510":0,"520":1,"521":0,"535":1,"536":0,"547":1,"548":0,"557":1,"558":0,"570":1,"571":0,"581":1,"582":0,"596":1,"597":0,"608":1,"609":0,"619":1,"620":0,"631":1,"632":0,"641":1,"642":0,"655":1,"656":0,"667":1,"668":0,"680":1,"681":0,"691":1,"692":0,"702":1,"703":0,"712":1,"713":0,"725":1,"726":0,"736":1,"737":0,"747":1,"748":0,"758":1,"759":0,"769":1,"770":0,"787":1,"788":0,"799":1,"800":0,"809":1,"810":0,"819":1,"820":0,"830":1,"831":0,"840":1,"841":0,"850":1,"851":0,"866":1,"867":0,"877":1,"878":0,"891":1,"892":0,"903":1,"904":0,"914":1,"915":0,"926":1,"927":0,"937":1,"938":0,"950":1,"951":0,"961":1,"962":0,"974":1,"975":0,"986":1,"987":0,"996":1,"997":0,"1010":1,"1011":0,"1025":1,"1026":0,"1038":1,"1039":0,"1050":1,"1051":0,"1064":1,"1065":0,"1075":1,"1076":0,"1085":1,"1086":0,"1097":1,"1098":0,"1111":1,"1112":0,"1126":1,"1127":0,"1138":1,"1139":0,"1150":1,"1151":0,"1160":1,"1161":0,"1172":1,"1173":0,"1182":1,"1183":0,"1193":1,"1194":0,"1205":1,"1206":0,"1215":1,"1216":0,"1226":1,"1227":0,"1236":1,"1237":0,"1246":1,"1247":0,"1250":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/download-request.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/download-request.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":1,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":45},"end":{"line":11,"column":60}}},"2":{"name":"(anonymous_2)","line":16,"loc":{"start":{"line":16,"column":19},"end":{"line":16,"column":46}}},"3":{"name":"(anonymous_3)","line":24,"loc":{"start":{"line":24,"column":19},"end":{"line":24,"column":40}}},"4":{"name":"(anonymous_4)","line":27,"loc":{"start":{"line":27,"column":17},"end":{"line":27,"column":34}}},"5":{"name":"(anonymous_5)","line":28,"loc":{"start":{"line":28,"column":16},"end":{"line":28,"column":28}}},"6":{"name":"(anonymous_6)","line":33,"loc":{"start":{"line":33,"column":18},"end":{"line":33,"column":77}}},"7":{"name":"(anonymous_7)","line":38,"loc":{"start":{"line":38,"column":24},"end":{"line":38,"column":51}}},"8":{"name":"success","line":41,"loc":{"start":{"line":41,"column":4},"end":{"line":41,"column":27}}},"9":{"name":"failure","line":47,"loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":28}}},"10":{"name":"responseHandler","line":53,"loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":46}}},"11":{"name":"(anonymous_11)","line":73,"loc":{"start":{"line":73,"column":21},"end":{"line":73,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":36}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":21}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":20}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":21}},"8":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":13}},"10":{"start":{"line":16,"column":0},"end":{"line":22,"column":2}},"11":{"start":{"line":17,"column":2},"end":{"line":21,"column":4}},"12":{"start":{"line":24,"column":0},"end":{"line":31,"column":2}},"13":{"start":{"line":25,"column":2},"end":{"line":25,"column":16}},"14":{"start":{"line":26,"column":2},"end":{"line":26,"column":28}},"15":{"start":{"line":27,"column":2},"end":{"line":27,"column":58}},"16":{"start":{"line":27,"column":36},"end":{"line":27,"column":54}},"17":{"start":{"line":28,"column":2},"end":{"line":30,"column":5}},"18":{"start":{"line":29,"column":4},"end":{"line":29,"column":11}},"19":{"start":{"line":33,"column":0},"end":{"line":95,"column":2}},"20":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"21":{"start":{"line":35,"column":4},"end":{"line":35,"column":53}},"22":{"start":{"line":38,"column":2},"end":{"line":92,"column":4}},"23":{"start":{"line":39,"column":4},"end":{"line":39,"column":19}},"24":{"start":{"line":41,"column":4},"end":{"line":45,"column":5}},"25":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"26":{"start":{"line":43,"column":8},"end":{"line":43,"column":22}},"27":{"start":{"line":47,"column":4},"end":{"line":51,"column":5}},"28":{"start":{"line":48,"column":6},"end":{"line":50,"column":7}},"29":{"start":{"line":49,"column":8},"end":{"line":49,"column":22}},"30":{"start":{"line":53,"column":4},"end":{"line":68,"column":5}},"31":{"start":{"line":54,"column":6},"end":{"line":54,"column":15}},"32":{"start":{"line":55,"column":6},"end":{"line":67,"column":7}},"33":{"start":{"line":56,"column":8},"end":{"line":56,"column":51}},"34":{"start":{"line":60,"column":8},"end":{"line":60,"column":66}},"35":{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},"36":{"start":{"line":62,"column":10},"end":{"line":62,"column":48}},"37":{"start":{"line":64,"column":10},"end":{"line":64,"column":46}},"38":{"start":{"line":66,"column":8},"end":{"line":66,"column":22}},"39":{"start":{"line":70,"column":4},"end":{"line":77,"column":9}},"40":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"41":{"start":{"line":75,"column":10},"end":{"line":75,"column":41}},"42":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"43":{"start":{"line":80,"column":6},"end":{"line":80,"column":73}},"44":{"start":{"line":84,"column":4},"end":{"line":91,"column":5}},"45":{"start":{"line":85,"column":6},"end":{"line":88,"column":30}},"46":{"start":{"line":90,"column":6},"end":{"line":90,"column":38}},"47":{"start":{"line":94,"column":2},"end":{"line":94,"column":38}},"48":{"start":{"line":97,"column":0},"end":{"line":97,"column":33}}},"branchMap":{"1":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":12},"end":{"line":19,"column":43}},{"start":{"line":19,"column":48},"end":{"line":19,"column":64}}]},"2":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":23},"end":{"line":19,"column":36}},{"start":{"line":19,"column":39},"end":{"line":19,"column":43}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":6}},{"start":{"line":48,"column":6},"end":{"line":48,"column":6}}]},"6":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"7":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"8":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"10":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]}},"code":["var request = require('superagent');","var Promise = require('es6-promise').Promise;","var getBaseURL = require('./get-base-url');","var httpHeaderSafeJson = require('./http-header-safe-json');","","var buildCustomError;","var downloadRequest;","var nodeBinaryParser;","","// Register a handler that will instruct superagent how to parse the response","request.parse['application/octect-stream'] = function (obj) {","  return obj;","};","","// This doesn't match what was spec'd in paper doc yet","buildCustomError = function (error, response) {","  return {","    status: error.status,","    error: (response ? response.text : null) || error.toString(),","    response: response","  };","};","","nodeBinaryParser = function (res, done) {","  res.text = '';","  res.setEncoding('binary');","  res.on('data', function (chunk) { res.text += chunk; });","  res.on('end', function () {","    done();","  });","};","","downloadRequest = function (path, args, auth, host, accessToken, selectUser) {","  if (auth !== 'user') {","    throw new Error('Unexpected auth type: ' + auth);","  }","","  var promiseFunction = function (resolve, reject) {","    var apiRequest;","","    function success(data) {","      if (resolve) {","        resolve(data);","      }","    }","","    function failure(error) {","      if (reject) {","        reject(error);","      }","    }","","    function responseHandler(error, response) {","      var data;","      if (error) {","        failure(buildCustomError(error, response));","      } else {","        // In the browser, the file is passed as a blob and in node the file is","        // passed as a string of binary data.","        data = JSON.parse(response.headers['dropbox-api-result']);","        if (response.xhr) {","          data.fileBlob = response.xhr.response;","        } else {","          data.fileBinary = response.res.text;","        }","        success(data);","      }","    }","","    apiRequest = request.post(getBaseURL(host) + path)","      .set('Authorization', 'Bearer ' + accessToken)","      .set('Dropbox-API-Arg', httpHeaderSafeJson(args))","      .on('request', function () {","        if (this.xhr) {","          this.xhr.responseType = 'blob';","        }","      });","","    if (selectUser) {","      apiRequest = apiRequest.set('Dropbox-API-Select-User', selectUser);","    }","","    // Apply the node binary parser to the response if executing in node","    if (typeof window === 'undefined') {","      apiRequest","        .buffer(true)","        .parse(nodeBinaryParser)","        .end(responseHandler);","    } else {","      apiRequest.end(responseHandler);","    }","  };","","  return new Promise(promiseFunction);","};","","module.exports = downloadRequest;",""],"l":{"1":1,"2":1,"3":1,"4":1,"6":1,"7":1,"8":1,"11":1,"12":0,"16":1,"17":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"33":1,"34":0,"35":0,"38":0,"39":0,"41":1,"42":0,"43":0,"47":1,"48":0,"49":0,"53":1,"54":0,"55":0,"56":0,"60":0,"61":0,"62":0,"64":0,"66":0,"70":0,"74":0,"75":0,"79":0,"80":0,"84":0,"85":0,"90":0,"94":0,"97":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/get-base-url.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/get-base-url.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getBaseURL","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":3,"column":1}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":50}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}}},"branchMap":{},"code":["function getBaseURL(host) {","  return 'https://' + host + '.dropboxapi.com/2/';","}","","module.exports = getBaseURL;",""],"l":{"1":1,"2":0,"5":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/http-header-safe-json.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/http-header-safe-json.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"httpHeaderSafeJson","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}}},"2":{"name":"(anonymous_2)","line":5,"loc":{"start":{"line":5,"column":53},"end":{"line":5,"column":66}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":39}},"2":{"start":{"line":4,"column":0},"end":{"line":8,"column":1}},"3":{"start":{"line":5,"column":2},"end":{"line":7,"column":5}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":68}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}}},"branchMap":{},"code":["// source https://www.dropboxforum.com/t5/API-support/HTTP-header-quot-Dropbox-API-Arg-quot-could-not-decode-input-as/m-p/173823/highlight/true#M6786","var charsToEncode = /[\\u007f-\\uffff]/g;","","function httpHeaderSafeJson(args) {","  return JSON.stringify(args).replace(charsToEncode, function (c) {","    return '\\\\u' + ('000' + c.charCodeAt(0).toString(16)).slice(-4);","  });","}","","module.exports = httpHeaderSafeJson;",""],"l":{"2":1,"4":1,"5":0,"6":0,"10":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/routes-team.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/routes-team.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":1,"63":0,"64":1,"65":0,"66":1,"67":0,"68":1,"69":0,"70":1,"71":0,"72":1,"73":0,"74":1,"75":0,"76":1,"77":0,"78":1,"79":0,"80":1,"81":0,"82":1,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":1,"91":0,"92":1,"93":0,"94":1,"95":0,"96":1,"97":0,"98":1,"99":0,"100":1,"101":0,"102":1,"103":0,"104":1,"105":0,"106":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":38},"end":{"line":10,"column":53}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":39},"end":{"line":20,"column":54}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":36},"end":{"line":31,"column":51}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":40},"end":{"line":41,"column":55}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":45},"end":{"line":51,"column":60}}},"6":{"name":"(anonymous_6)","line":61,"loc":{"start":{"line":61,"column":21},"end":{"line":61,"column":36}}},"7":{"name":"(anonymous_7)","line":72,"loc":{"start":{"line":72,"column":26},"end":{"line":72,"column":41}}},"8":{"name":"(anonymous_8)","line":85,"loc":{"start":{"line":85,"column":26},"end":{"line":85,"column":41}}},"9":{"name":"(anonymous_9)","line":97,"loc":{"start":{"line":97,"column":27},"end":{"line":97,"column":42}}},"10":{"name":"(anonymous_10)","line":110,"loc":{"start":{"line":110,"column":32},"end":{"line":110,"column":47}}},"11":{"name":"(anonymous_11)","line":120,"loc":{"start":{"line":120,"column":24},"end":{"line":120,"column":39}}},"12":{"name":"(anonymous_12)","line":131,"loc":{"start":{"line":131,"column":32},"end":{"line":131,"column":47}}},"13":{"name":"(anonymous_13)","line":144,"loc":{"start":{"line":144,"column":30},"end":{"line":144,"column":45}}},"14":{"name":"(anonymous_14)","line":154,"loc":{"start":{"line":154,"column":31},"end":{"line":154,"column":46}}},"15":{"name":"(anonymous_15)","line":165,"loc":{"start":{"line":165,"column":39},"end":{"line":165,"column":54}}},"16":{"name":"(anonymous_16)","line":179,"loc":{"start":{"line":179,"column":33},"end":{"line":179,"column":48}}},"17":{"name":"(anonymous_17)","line":189,"loc":{"start":{"line":189,"column":40},"end":{"line":189,"column":55}}},"18":{"name":"(anonymous_18)","line":200,"loc":{"start":{"line":200,"column":26},"end":{"line":200,"column":41}}},"19":{"name":"(anonymous_19)","line":211,"loc":{"start":{"line":211,"column":44},"end":{"line":211,"column":59}}},"20":{"name":"(anonymous_20)","line":222,"loc":{"start":{"line":222,"column":45},"end":{"line":222,"column":60}}},"21":{"name":"(anonymous_21)","line":234,"loc":{"start":{"line":234,"column":42},"end":{"line":234,"column":57}}},"22":{"name":"(anonymous_22)","line":244,"loc":{"start":{"line":244,"column":39},"end":{"line":244,"column":54}}},"23":{"name":"(anonymous_23)","line":254,"loc":{"start":{"line":254,"column":44},"end":{"line":254,"column":59}}},"24":{"name":"(anonymous_24)","line":274,"loc":{"start":{"line":274,"column":24},"end":{"line":274,"column":39}}},"25":{"name":"(anonymous_25)","line":285,"loc":{"start":{"line":285,"column":36},"end":{"line":285,"column":51}}},"26":{"name":"(anonymous_26)","line":297,"loc":{"start":{"line":297,"column":28},"end":{"line":297,"column":43}}},"27":{"name":"(anonymous_27)","line":307,"loc":{"start":{"line":307,"column":25},"end":{"line":307,"column":40}}},"28":{"name":"(anonymous_28)","line":318,"loc":{"start":{"line":318,"column":33},"end":{"line":318,"column":48}}},"29":{"name":"(anonymous_29)","line":330,"loc":{"start":{"line":330,"column":28},"end":{"line":330,"column":43}}},"30":{"name":"(anonymous_30)","line":348,"loc":{"start":{"line":348,"column":27},"end":{"line":348,"column":42}}},"31":{"name":"(anonymous_31)","line":359,"loc":{"start":{"line":359,"column":39},"end":{"line":359,"column":54}}},"32":{"name":"(anonymous_32)","line":371,"loc":{"start":{"line":371,"column":37},"end":{"line":371,"column":52}}},"33":{"name":"(anonymous_33)","line":381,"loc":{"start":{"line":381,"column":40},"end":{"line":381,"column":55}}},"34":{"name":"(anonymous_34)","line":391,"loc":{"start":{"line":391,"column":31},"end":{"line":391,"column":46}}},"35":{"name":"(anonymous_35)","line":403,"loc":{"start":{"line":403,"column":28},"end":{"line":403,"column":43}}},"36":{"name":"(anonymous_36)","line":415,"loc":{"start":{"line":415,"column":30},"end":{"line":415,"column":45}}},"37":{"name":"(anonymous_37)","line":426,"loc":{"start":{"line":426,"column":35},"end":{"line":426,"column":50}}},"38":{"name":"(anonymous_38)","line":436,"loc":{"start":{"line":436,"column":35},"end":{"line":436,"column":50}}},"39":{"name":"(anonymous_39)","line":447,"loc":{"start":{"line":447,"column":36},"end":{"line":447,"column":51}}},"40":{"name":"(anonymous_40)","line":458,"loc":{"start":{"line":458,"column":38},"end":{"line":458,"column":53}}},"41":{"name":"(anonymous_41)","line":468,"loc":{"start":{"line":468,"column":32},"end":{"line":468,"column":47}}},"42":{"name":"(anonymous_42)","line":478,"loc":{"start":{"line":478,"column":31},"end":{"line":478,"column":46}}},"43":{"name":"(anonymous_43)","line":488,"loc":{"start":{"line":488,"column":34},"end":{"line":488,"column":49}}},"44":{"name":"(anonymous_44)","line":498,"loc":{"start":{"line":498,"column":31},"end":{"line":498,"column":46}}},"45":{"name":"(anonymous_45)","line":509,"loc":{"start":{"line":509,"column":32},"end":{"line":509,"column":47}}},"46":{"name":"(anonymous_46)","line":520,"loc":{"start":{"line":520,"column":31},"end":{"line":520,"column":46}}},"47":{"name":"(anonymous_47)","line":531,"loc":{"start":{"line":531,"column":36},"end":{"line":531,"column":51}}},"48":{"name":"(anonymous_48)","line":541,"loc":{"start":{"line":541,"column":30},"end":{"line":541,"column":45}}},"49":{"name":"(anonymous_49)","line":551,"loc":{"start":{"line":551,"column":31},"end":{"line":551,"column":46}}},"50":{"name":"(anonymous_50)","line":561,"loc":{"start":{"line":561,"column":28},"end":{"line":561,"column":43}}},"51":{"name":"(anonymous_51)","line":572,"loc":{"start":{"line":572,"column":41},"end":{"line":572,"column":56}}},"52":{"name":"(anonymous_52)","line":582,"loc":{"start":{"line":582,"column":30},"end":{"line":582,"column":45}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":16}},"2":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":85}},"4":{"start":{"line":20,"column":0},"end":{"line":22,"column":2}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":86}},"6":{"start":{"line":31,"column":0},"end":{"line":33,"column":2}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":83}},"8":{"start":{"line":41,"column":0},"end":{"line":43,"column":2}},"9":{"start":{"line":42,"column":2},"end":{"line":42,"column":87}},"10":{"start":{"line":51,"column":0},"end":{"line":53,"column":2}},"11":{"start":{"line":52,"column":2},"end":{"line":52,"column":93}},"12":{"start":{"line":61,"column":0},"end":{"line":63,"column":2}},"13":{"start":{"line":62,"column":2},"end":{"line":62,"column":66}},"14":{"start":{"line":72,"column":0},"end":{"line":74,"column":2}},"15":{"start":{"line":73,"column":2},"end":{"line":73,"column":71}},"16":{"start":{"line":85,"column":0},"end":{"line":87,"column":2}},"17":{"start":{"line":86,"column":2},"end":{"line":86,"column":71}},"18":{"start":{"line":97,"column":0},"end":{"line":99,"column":2}},"19":{"start":{"line":98,"column":2},"end":{"line":98,"column":73}},"20":{"start":{"line":110,"column":0},"end":{"line":112,"column":2}},"21":{"start":{"line":111,"column":2},"end":{"line":111,"column":79}},"22":{"start":{"line":120,"column":0},"end":{"line":122,"column":2}},"23":{"start":{"line":121,"column":2},"end":{"line":121,"column":69}},"24":{"start":{"line":131,"column":0},"end":{"line":133,"column":2}},"25":{"start":{"line":132,"column":2},"end":{"line":132,"column":78}},"26":{"start":{"line":144,"column":0},"end":{"line":146,"column":2}},"27":{"start":{"line":145,"column":2},"end":{"line":145,"column":76}},"28":{"start":{"line":154,"column":0},"end":{"line":156,"column":2}},"29":{"start":{"line":155,"column":2},"end":{"line":155,"column":77}},"30":{"start":{"line":165,"column":0},"end":{"line":167,"column":2}},"31":{"start":{"line":166,"column":2},"end":{"line":166,"column":86}},"32":{"start":{"line":179,"column":0},"end":{"line":181,"column":2}},"33":{"start":{"line":180,"column":2},"end":{"line":180,"column":79}},"34":{"start":{"line":189,"column":0},"end":{"line":191,"column":2}},"35":{"start":{"line":190,"column":2},"end":{"line":190,"column":88}},"36":{"start":{"line":200,"column":0},"end":{"line":202,"column":2}},"37":{"start":{"line":201,"column":2},"end":{"line":201,"column":71}},"38":{"start":{"line":211,"column":0},"end":{"line":213,"column":2}},"39":{"start":{"line":212,"column":2},"end":{"line":212,"column":93}},"40":{"start":{"line":222,"column":0},"end":{"line":224,"column":2}},"41":{"start":{"line":223,"column":2},"end":{"line":223,"column":94}},"42":{"start":{"line":234,"column":0},"end":{"line":236,"column":2}},"43":{"start":{"line":235,"column":2},"end":{"line":235,"column":91}},"44":{"start":{"line":244,"column":0},"end":{"line":246,"column":2}},"45":{"start":{"line":245,"column":2},"end":{"line":245,"column":87}},"46":{"start":{"line":254,"column":0},"end":{"line":256,"column":2}},"47":{"start":{"line":255,"column":2},"end":{"line":255,"column":93}},"48":{"start":{"line":274,"column":0},"end":{"line":276,"column":2}},"49":{"start":{"line":275,"column":2},"end":{"line":275,"column":69}},"50":{"start":{"line":285,"column":0},"end":{"line":287,"column":2}},"51":{"start":{"line":286,"column":2},"end":{"line":286,"column":84}},"52":{"start":{"line":297,"column":0},"end":{"line":299,"column":2}},"53":{"start":{"line":298,"column":2},"end":{"line":298,"column":74}},"54":{"start":{"line":307,"column":0},"end":{"line":309,"column":2}},"55":{"start":{"line":308,"column":2},"end":{"line":308,"column":70}},"56":{"start":{"line":318,"column":0},"end":{"line":320,"column":2}},"57":{"start":{"line":319,"column":2},"end":{"line":319,"column":79}},"58":{"start":{"line":330,"column":0},"end":{"line":332,"column":2}},"59":{"start":{"line":331,"column":2},"end":{"line":331,"column":73}},"60":{"start":{"line":348,"column":0},"end":{"line":350,"column":2}},"61":{"start":{"line":349,"column":2},"end":{"line":349,"column":72}},"62":{"start":{"line":359,"column":0},"end":{"line":361,"column":2}},"63":{"start":{"line":360,"column":2},"end":{"line":360,"column":87}},"64":{"start":{"line":371,"column":0},"end":{"line":373,"column":2}},"65":{"start":{"line":372,"column":2},"end":{"line":372,"column":84}},"66":{"start":{"line":381,"column":0},"end":{"line":383,"column":2}},"67":{"start":{"line":382,"column":2},"end":{"line":382,"column":87}},"68":{"start":{"line":391,"column":0},"end":{"line":393,"column":2}},"69":{"start":{"line":392,"column":2},"end":{"line":392,"column":77}},"70":{"start":{"line":403,"column":0},"end":{"line":405,"column":2}},"71":{"start":{"line":404,"column":2},"end":{"line":404,"column":73}},"72":{"start":{"line":415,"column":0},"end":{"line":417,"column":2}},"73":{"start":{"line":416,"column":2},"end":{"line":416,"column":75}},"74":{"start":{"line":426,"column":0},"end":{"line":428,"column":2}},"75":{"start":{"line":427,"column":2},"end":{"line":427,"column":81}},"76":{"start":{"line":436,"column":0},"end":{"line":438,"column":2}},"77":{"start":{"line":437,"column":2},"end":{"line":437,"column":81}},"78":{"start":{"line":447,"column":0},"end":{"line":449,"column":2}},"79":{"start":{"line":448,"column":2},"end":{"line":448,"column":82}},"80":{"start":{"line":458,"column":0},"end":{"line":460,"column":2}},"81":{"start":{"line":459,"column":2},"end":{"line":459,"column":84}},"82":{"start":{"line":468,"column":0},"end":{"line":470,"column":2}},"83":{"start":{"line":469,"column":2},"end":{"line":469,"column":78}},"84":{"start":{"line":478,"column":0},"end":{"line":480,"column":2}},"85":{"start":{"line":479,"column":2},"end":{"line":479,"column":77}},"86":{"start":{"line":488,"column":0},"end":{"line":490,"column":2}},"87":{"start":{"line":489,"column":2},"end":{"line":489,"column":80}},"88":{"start":{"line":498,"column":0},"end":{"line":500,"column":2}},"89":{"start":{"line":499,"column":2},"end":{"line":499,"column":77}},"90":{"start":{"line":509,"column":0},"end":{"line":511,"column":2}},"91":{"start":{"line":510,"column":2},"end":{"line":510,"column":78}},"92":{"start":{"line":520,"column":0},"end":{"line":522,"column":2}},"93":{"start":{"line":521,"column":2},"end":{"line":521,"column":77}},"94":{"start":{"line":531,"column":0},"end":{"line":533,"column":2}},"95":{"start":{"line":532,"column":2},"end":{"line":532,"column":83}},"96":{"start":{"line":541,"column":0},"end":{"line":543,"column":2}},"97":{"start":{"line":542,"column":2},"end":{"line":542,"column":76}},"98":{"start":{"line":551,"column":0},"end":{"line":553,"column":2}},"99":{"start":{"line":552,"column":2},"end":{"line":552,"column":78}},"100":{"start":{"line":561,"column":0},"end":{"line":563,"column":2}},"101":{"start":{"line":562,"column":2},"end":{"line":562,"column":74}},"102":{"start":{"line":572,"column":0},"end":{"line":574,"column":2}},"103":{"start":{"line":573,"column":2},"end":{"line":573,"column":88}},"104":{"start":{"line":582,"column":0},"end":{"line":584,"column":2}},"105":{"start":{"line":583,"column":2},"end":{"line":583,"column":76}},"106":{"start":{"line":586,"column":0},"end":{"line":586,"column":24}}},"branchMap":{},"code":["// Auto-generated by Stone, do not modify.","var routes = {};","","/**"," * List all device sessions of a team's member."," * @function DropboxTeam#teamDevicesListMemberDevices"," * @arg {TeamListMemberDevicesArg} arg - The request parameters."," * @returns {Promise.<TeamListMemberDevicesResult, Error.<TeamListMemberDevicesError>>}"," */","routes.teamDevicesListMemberDevices = function (arg) {","  return this.request('team/devices/list_member_devices', arg, 'team', 'api', 'rpc');","};","","/**"," * List all device sessions of a team."," * @function DropboxTeam#teamDevicesListMembersDevices"," * @arg {TeamListMembersDevicesArg} arg - The request parameters."," * @returns {Promise.<TeamListMembersDevicesResult, Error.<TeamListMembersDevicesError>>}"," */","routes.teamDevicesListMembersDevices = function (arg) {","  return this.request('team/devices/list_members_devices', arg, 'team', 'api', 'rpc');","};","","/**"," * List all device sessions of a team."," * @function DropboxTeam#teamDevicesListTeamDevices"," * @deprecated"," * @arg {TeamListTeamDevicesArg} arg - The request parameters."," * @returns {Promise.<TeamListTeamDevicesResult, Error.<TeamListTeamDevicesError>>}"," */","routes.teamDevicesListTeamDevices = function (arg) {","  return this.request('team/devices/list_team_devices', arg, 'team', 'api', 'rpc');","};","","/**"," * Revoke a device session of a team's member"," * @function DropboxTeam#teamDevicesRevokeDeviceSession"," * @arg {TeamRevokeDeviceSessionArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamRevokeDeviceSessionError>>}"," */","routes.teamDevicesRevokeDeviceSession = function (arg) {","  return this.request('team/devices/revoke_device_session', arg, 'team', 'api', 'rpc');","};","","/**"," * Revoke a list of device sessions of team members"," * @function DropboxTeam#teamDevicesRevokeDeviceSessionBatch"," * @arg {TeamRevokeDeviceSessionBatchArg} arg - The request parameters."," * @returns {Promise.<TeamRevokeDeviceSessionBatchResult, Error.<TeamRevokeDeviceSessionBatchError>>}"," */","routes.teamDevicesRevokeDeviceSessionBatch = function (arg) {","  return this.request('team/devices/revoke_device_session_batch', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves information about a team."," * @function DropboxTeam#teamGetInfo"," * @arg {void} arg - The request parameters."," * @returns {Promise.<TeamTeamGetInfoResult, Error.<void>>}"," */","routes.teamGetInfo = function (arg) {","  return this.request('team/get_info', arg, 'team', 'api', 'rpc');","};","","/**"," * Creates a new, empty group, with a requested name. Permission : Team member"," * management."," * @function DropboxTeam#teamGroupsCreate"," * @arg {TeamGroupCreateArg} arg - The request parameters."," * @returns {Promise.<TeamGroupFullInfo, Error.<TeamGroupCreateError>>}"," */","routes.teamGroupsCreate = function (arg) {","  return this.request('team/groups/create', arg, 'team', 'api', 'rpc');","};","","/**"," * Deletes a group. The group is deleted immediately. However the revoking of"," * group-owned resources may take additional time. Use the groups/job_status/get"," * to determine whether this process has completed. Permission : Team member"," * management."," * @function DropboxTeam#teamGroupsDelete"," * @arg {TeamGroupSelector} arg - The request parameters."," * @returns {Promise.<AsyncLaunchEmptyResult, Error.<TeamGroupDeleteError>>}"," */","routes.teamGroupsDelete = function (arg) {","  return this.request('team/groups/delete', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves information about one or more groups. Note that the optional field"," * GroupFullInfo.members is not returned for system-managed groups. Permission :"," * Team Information."," * @function DropboxTeam#teamGroupsGetInfo"," * @arg {TeamGroupsSelector} arg - The request parameters."," * @returns {Promise.<Object, Error.<TeamGroupsGetInfoError>>}"," */","routes.teamGroupsGetInfo = function (arg) {","  return this.request('team/groups/get_info', arg, 'team', 'api', 'rpc');","};","","/**"," * Once an async_job_id is returned from groups/delete, groups/members/add , or"," * groups/members/remove use this method to poll the status of granting/revoking"," * group members' access to group-owned resources. Permission : Team member"," * management."," * @function DropboxTeam#teamGroupsJobStatusGet"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<AsyncPollEmptyResult, Error.<TeamGroupsPollError>>}"," */","routes.teamGroupsJobStatusGet = function (arg) {","  return this.request('team/groups/job_status/get', arg, 'team', 'api', 'rpc');","};","","/**"," * Lists groups on a team. Permission : Team Information."," * @function DropboxTeam#teamGroupsList"," * @arg {TeamGroupsListArg} arg - The request parameters."," * @returns {Promise.<TeamGroupsListResult, Error.<void>>}"," */","routes.teamGroupsList = function (arg) {","  return this.request('team/groups/list', arg, 'team', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from groups/list, use this to paginate"," * through all groups. Permission : Team Information."," * @function DropboxTeam#teamGroupsListContinue"," * @arg {TeamGroupsListContinueArg} arg - The request parameters."," * @returns {Promise.<TeamGroupsListResult, Error.<TeamGroupsListContinueError>>}"," */","routes.teamGroupsListContinue = function (arg) {","  return this.request('team/groups/list/continue', arg, 'team', 'api', 'rpc');","};","","/**"," * Adds members to a group. The members are added immediately. However the"," * granting of group-owned resources may take additional time. Use the"," * groups/job_status/get to determine whether this process has completed."," * Permission : Team member management."," * @function DropboxTeam#teamGroupsMembersAdd"," * @arg {TeamGroupMembersAddArg} arg - The request parameters."," * @returns {Promise.<TeamGroupMembersChangeResult, Error.<TeamGroupMembersAddError>>}"," */","routes.teamGroupsMembersAdd = function (arg) {","  return this.request('team/groups/members/add', arg, 'team', 'api', 'rpc');","};","","/**"," * Lists members of a group. Permission : Team Information."," * @function DropboxTeam#teamGroupsMembersList"," * @arg {TeamGroupsMembersListArg} arg - The request parameters."," * @returns {Promise.<TeamGroupsMembersListResult, Error.<TeamGroupSelectorError>>}"," */","routes.teamGroupsMembersList = function (arg) {","  return this.request('team/groups/members/list', arg, 'team', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from groups/members/list, use this to"," * paginate through all members of the group. Permission : Team information."," * @function DropboxTeam#teamGroupsMembersListContinue"," * @arg {TeamGroupsMembersListContinueArg} arg - The request parameters."," * @returns {Promise.<TeamGroupsMembersListResult, Error.<TeamGroupsMembersListContinueError>>}"," */","routes.teamGroupsMembersListContinue = function (arg) {","  return this.request('team/groups/members/list/continue', arg, 'team', 'api', 'rpc');","};","","/**"," * Removes members from a group. The members are removed immediately. However"," * the revoking of group-owned resources may take additional time. Use the"," * groups/job_status/get to determine whether this process has completed. This"," * method permits removing the only owner of a group, even in cases where this"," * is not possible via the web client. Permission : Team member management."," * @function DropboxTeam#teamGroupsMembersRemove"," * @arg {TeamGroupMembersRemoveArg} arg - The request parameters."," * @returns {Promise.<TeamGroupMembersChangeResult, Error.<TeamGroupMembersRemoveError>>}"," */","routes.teamGroupsMembersRemove = function (arg) {","  return this.request('team/groups/members/remove', arg, 'team', 'api', 'rpc');","};","","/**"," * Sets a member's access type in a group. Permission : Team member management."," * @function DropboxTeam#teamGroupsMembersSetAccessType"," * @arg {TeamGroupMembersSetAccessTypeArg} arg - The request parameters."," * @returns {Promise.<Object, Error.<TeamGroupMemberSetAccessTypeError>>}"," */","routes.teamGroupsMembersSetAccessType = function (arg) {","  return this.request('team/groups/members/set_access_type', arg, 'team', 'api', 'rpc');","};","","/**"," * Updates a group's name and/or external ID. Permission : Team member"," * management."," * @function DropboxTeam#teamGroupsUpdate"," * @arg {TeamGroupUpdateArgs} arg - The request parameters."," * @returns {Promise.<TeamGroupFullInfo, Error.<TeamGroupUpdateError>>}"," */","routes.teamGroupsUpdate = function (arg) {","  return this.request('team/groups/update', arg, 'team', 'api', 'rpc');","};","","/**"," * List all linked applications of the team member. Note, this endpoint does not"," * list any team-linked applications."," * @function DropboxTeam#teamLinkedAppsListMemberLinkedApps"," * @arg {TeamListMemberAppsArg} arg - The request parameters."," * @returns {Promise.<TeamListMemberAppsResult, Error.<TeamListMemberAppsError>>}"," */","routes.teamLinkedAppsListMemberLinkedApps = function (arg) {","  return this.request('team/linked_apps/list_member_linked_apps', arg, 'team', 'api', 'rpc');","};","","/**"," * List all applications linked to the team members' accounts. Note, this"," * endpoint does not list any team-linked applications."," * @function DropboxTeam#teamLinkedAppsListMembersLinkedApps"," * @arg {TeamListMembersAppsArg} arg - The request parameters."," * @returns {Promise.<TeamListMembersAppsResult, Error.<TeamListMembersAppsError>>}"," */","routes.teamLinkedAppsListMembersLinkedApps = function (arg) {","  return this.request('team/linked_apps/list_members_linked_apps', arg, 'team', 'api', 'rpc');","};","","/**"," * List all applications linked to the team members' accounts. Note, this"," * endpoint doesn't list any team-linked applications."," * @function DropboxTeam#teamLinkedAppsListTeamLinkedApps"," * @deprecated"," * @arg {TeamListTeamAppsArg} arg - The request parameters."," * @returns {Promise.<TeamListTeamAppsResult, Error.<TeamListTeamAppsError>>}"," */","routes.teamLinkedAppsListTeamLinkedApps = function (arg) {","  return this.request('team/linked_apps/list_team_linked_apps', arg, 'team', 'api', 'rpc');","};","","/**"," * Revoke a linked application of the team member"," * @function DropboxTeam#teamLinkedAppsRevokeLinkedApp"," * @arg {TeamRevokeLinkedApiAppArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamRevokeLinkedAppError>>}"," */","routes.teamLinkedAppsRevokeLinkedApp = function (arg) {","  return this.request('team/linked_apps/revoke_linked_app', arg, 'team', 'api', 'rpc');","};","","/**"," * Revoke a list of linked applications of the team members"," * @function DropboxTeam#teamLinkedAppsRevokeLinkedAppBatch"," * @arg {TeamRevokeLinkedApiAppBatchArg} arg - The request parameters."," * @returns {Promise.<TeamRevokeLinkedAppBatchResult, Error.<TeamRevokeLinkedAppBatchError>>}"," */","routes.teamLinkedAppsRevokeLinkedAppBatch = function (arg) {","  return this.request('team/linked_apps/revoke_linked_app_batch', arg, 'team', 'api', 'rpc');","};","","/**"," * Adds members to a team. Permission : Team member management A maximum of 20"," * members can be specified in a single call. If no Dropbox account exists with"," * the email address specified, a new Dropbox account will be created with the"," * given email address, and that account will be invited to the team. If a"," * personal Dropbox account exists with the email address specified in the call,"," * this call will create a placeholder Dropbox account for the user on the team"," * and send an email inviting the user to migrate their existing personal"," * account onto the team. Team member management apps are required to set an"," * initial given_name and surname for a user to use in the team invitation and"," * for 'Perform as team member' actions taken on the user before they become"," * 'active'."," * @function DropboxTeam#teamMembersAdd"," * @arg {TeamMembersAddArg} arg - The request parameters."," * @returns {Promise.<TeamMembersAddLaunch, Error.<void>>}"," */","routes.teamMembersAdd = function (arg) {","  return this.request('team/members/add', arg, 'team', 'api', 'rpc');","};","","/**"," * Once an async_job_id is returned from members/add , use this to poll the"," * status of the asynchronous request. Permission : Team member management"," * @function DropboxTeam#teamMembersAddJobStatusGet"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<TeamMembersAddJobStatus, Error.<AsyncPollError>>}"," */","routes.teamMembersAddJobStatusGet = function (arg) {","  return this.request('team/members/add/job_status/get', arg, 'team', 'api', 'rpc');","};","","/**"," * Returns information about multiple team members. Permission : Team"," * information This endpoint will return MembersGetInfoItem.id_not_found, for"," * IDs (or emails) that cannot be matched to a valid team member."," * @function DropboxTeam#teamMembersGetInfo"," * @arg {TeamMembersGetInfoArgs} arg - The request parameters."," * @returns {Promise.<Object, Error.<TeamMembersGetInfoError>>}"," */","routes.teamMembersGetInfo = function (arg) {","  return this.request('team/members/get_info', arg, 'team', 'api', 'rpc');","};","","/**"," * Lists members of a team. Permission : Team information"," * @function DropboxTeam#teamMembersList"," * @arg {TeamMembersListArg} arg - The request parameters."," * @returns {Promise.<TeamMembersListResult, Error.<TeamMembersListError>>}"," */","routes.teamMembersList = function (arg) {","  return this.request('team/members/list', arg, 'team', 'api', 'rpc');","};","","/**"," * Once a cursor has been retrieved from members/list, use this to paginate"," * through all team members. Permission : Team information"," * @function DropboxTeam#teamMembersListContinue"," * @arg {TeamMembersListContinueArg} arg - The request parameters."," * @returns {Promise.<TeamMembersListResult, Error.<TeamMembersListContinueError>>}"," */","routes.teamMembersListContinue = function (arg) {","  return this.request('team/members/list/continue', arg, 'team', 'api', 'rpc');","};","","/**"," * Recover a deleted member. Permission : Team member management Exactly one of"," * team_member_id, email, or external_id must be provided to identify the user"," * account."," * @function DropboxTeam#teamMembersRecover"," * @arg {TeamMembersRecoverArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamMembersRecoverError>>}"," */","routes.teamMembersRecover = function (arg) {","  return this.request('team/members/recover', arg, 'team', 'api', 'rpc');","};","","/**"," * Removes a member from a team. Permission : Team member management Exactly one"," * of team_member_id, email, or external_id must be provided to identify the"," * user account. Accounts can be recovered via members/recover for a 7 day"," * period or until the account has been permanently deleted or transferred to"," * another account (whichever comes first). Calling members/add while a user is"," * still recoverable on your team will return with"," * MemberAddResult.user_already_on_team. This endpoint may initiate an"," * asynchronous job. To obtain the final result of the job, the client should"," * periodically poll members/remove/job_status/get."," * @function DropboxTeam#teamMembersRemove"," * @arg {TeamMembersRemoveArg} arg - The request parameters."," * @returns {Promise.<AsyncLaunchEmptyResult, Error.<TeamMembersRemoveError>>}"," */","routes.teamMembersRemove = function (arg) {","  return this.request('team/members/remove', arg, 'team', 'api', 'rpc');","};","","/**"," * Once an async_job_id is returned from members/remove , use this to poll the"," * status of the asynchronous request. Permission : Team member management"," * @function DropboxTeam#teamMembersRemoveJobStatusGet"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<AsyncPollEmptyResult, Error.<AsyncPollError>>}"," */","routes.teamMembersRemoveJobStatusGet = function (arg) {","  return this.request('team/members/remove/job_status/get', arg, 'team', 'api', 'rpc');","};","","/**"," * Sends welcome email to pending team member. Permission : Team member"," * management Exactly one of team_member_id, email, or external_id must be"," * provided to identify the user account. No-op if team member is not pending."," * @function DropboxTeam#teamMembersSendWelcomeEmail"," * @arg {TeamUserSelectorArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamMembersSendWelcomeError>>}"," */","routes.teamMembersSendWelcomeEmail = function (arg) {","  return this.request('team/members/send_welcome_email', arg, 'team', 'api', 'rpc');","};","","/**"," * Updates a team member's permissions. Permission : Team member management"," * @function DropboxTeam#teamMembersSetAdminPermissions"," * @arg {TeamMembersSetPermissionsArg} arg - The request parameters."," * @returns {Promise.<TeamMembersSetPermissionsResult, Error.<TeamMembersSetPermissionsError>>}"," */","routes.teamMembersSetAdminPermissions = function (arg) {","  return this.request('team/members/set_admin_permissions', arg, 'team', 'api', 'rpc');","};","","/**"," * Updates a team member's profile. Permission : Team member management"," * @function DropboxTeam#teamMembersSetProfile"," * @arg {TeamMembersSetProfileArg} arg - The request parameters."," * @returns {Promise.<TeamTeamMemberInfo, Error.<TeamMembersSetProfileError>>}"," */","routes.teamMembersSetProfile = function (arg) {","  return this.request('team/members/set_profile', arg, 'team', 'api', 'rpc');","};","","/**"," * Suspend a member from a team. Permission : Team member management Exactly one"," * of team_member_id, email, or external_id must be provided to identify the"," * user account."," * @function DropboxTeam#teamMembersSuspend"," * @arg {TeamMembersDeactivateArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamMembersSuspendError>>}"," */","routes.teamMembersSuspend = function (arg) {","  return this.request('team/members/suspend', arg, 'team', 'api', 'rpc');","};","","/**"," * Unsuspend a member from a team. Permission : Team member management Exactly"," * one of team_member_id, email, or external_id must be provided to identify the"," * user account."," * @function DropboxTeam#teamMembersUnsuspend"," * @arg {TeamMembersUnsuspendArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamMembersUnsuspendError>>}"," */","routes.teamMembersUnsuspend = function (arg) {","  return this.request('team/members/unsuspend', arg, 'team', 'api', 'rpc');","};","","/**"," * Add a property template. See route files/properties/add to add properties to"," * a file."," * @function DropboxTeam#teamPropertiesTemplateAdd"," * @arg {TeamAddPropertyTemplateArg} arg - The request parameters."," * @returns {Promise.<TeamAddPropertyTemplateResult, Error.<PropertiesModifyPropertyTemplateError>>}"," */","routes.teamPropertiesTemplateAdd = function (arg) {","  return this.request('team/properties/template/add', arg, 'team', 'api', 'rpc');","};","","/**"," * Get the schema for a specified template."," * @function DropboxTeam#teamPropertiesTemplateGet"," * @arg {PropertiesGetPropertyTemplateArg} arg - The request parameters."," * @returns {Promise.<PropertiesGetPropertyTemplateResult, Error.<PropertiesPropertyTemplateError>>}"," */","routes.teamPropertiesTemplateGet = function (arg) {","  return this.request('team/properties/template/get', arg, 'team', 'api', 'rpc');","};","","/**"," * Get the property template identifiers for a team. To get the schema of each"," * template use properties/template/get."," * @function DropboxTeam#teamPropertiesTemplateList"," * @arg {void} arg - The request parameters."," * @returns {Promise.<PropertiesListPropertyTemplateIds, Error.<PropertiesPropertyTemplateError>>}"," */","routes.teamPropertiesTemplateList = function (arg) {","  return this.request('team/properties/template/list', arg, 'team', 'api', 'rpc');","};","","/**"," * Update a property template. This route can update the template name, the"," * template description and add optional properties to templates."," * @function DropboxTeam#teamPropertiesTemplateUpdate"," * @arg {TeamUpdatePropertyTemplateArg} arg - The request parameters."," * @returns {Promise.<TeamUpdatePropertyTemplateResult, Error.<PropertiesModifyPropertyTemplateError>>}"," */","routes.teamPropertiesTemplateUpdate = function (arg) {","  return this.request('team/properties/template/update', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves reporting data about a team's user activity."," * @function DropboxTeam#teamReportsGetActivity"," * @arg {TeamDateRange} arg - The request parameters."," * @returns {Promise.<TeamGetActivityReport, Error.<TeamDateRangeError>>}"," */","routes.teamReportsGetActivity = function (arg) {","  return this.request('team/reports/get_activity', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves reporting data about a team's linked devices."," * @function DropboxTeam#teamReportsGetDevices"," * @arg {TeamDateRange} arg - The request parameters."," * @returns {Promise.<TeamGetDevicesReport, Error.<TeamDateRangeError>>}"," */","routes.teamReportsGetDevices = function (arg) {","  return this.request('team/reports/get_devices', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves reporting data about a team's membership."," * @function DropboxTeam#teamReportsGetMembership"," * @arg {TeamDateRange} arg - The request parameters."," * @returns {Promise.<TeamGetMembershipReport, Error.<TeamDateRangeError>>}"," */","routes.teamReportsGetMembership = function (arg) {","  return this.request('team/reports/get_membership', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves reporting data about a team's storage usage."," * @function DropboxTeam#teamReportsGetStorage"," * @arg {TeamDateRange} arg - The request parameters."," * @returns {Promise.<TeamGetStorageReport, Error.<TeamDateRangeError>>}"," */","routes.teamReportsGetStorage = function (arg) {","  return this.request('team/reports/get_storage', arg, 'team', 'api', 'rpc');","};","","/**"," * Sets an archived team folder's status to active. Permission : Team member"," * file access."," * @function DropboxTeam#teamTeamFolderActivate"," * @arg {TeamTeamFolderIdArg} arg - The request parameters."," * @returns {Promise.<TeamTeamFolderMetadata, Error.<TeamTeamFolderActivateError>>}"," */","routes.teamTeamFolderActivate = function (arg) {","  return this.request('team/team_folder/activate', arg, 'team', 'api', 'rpc');","};","","/**"," * Sets an active team folder's status to archived and removes all folder and"," * file members. Permission : Team member file access."," * @function DropboxTeam#teamTeamFolderArchive"," * @arg {TeamTeamFolderArchiveArg} arg - The request parameters."," * @returns {Promise.<TeamTeamFolderArchiveLaunch, Error.<TeamTeamFolderArchiveError>>}"," */","routes.teamTeamFolderArchive = function (arg) {","  return this.request('team/team_folder/archive', arg, 'team', 'api', 'rpc');","};","","/**"," * Returns the status of an asynchronous job for archiving a team folder."," * Permission : Team member file access."," * @function DropboxTeam#teamTeamFolderArchiveCheck"," * @arg {AsyncPollArg} arg - The request parameters."," * @returns {Promise.<TeamTeamFolderArchiveJobStatus, Error.<AsyncPollError>>}"," */","routes.teamTeamFolderArchiveCheck = function (arg) {","  return this.request('team/team_folder/archive/check', arg, 'team', 'api', 'rpc');","};","","/**"," * Creates a new, active, team folder. Permission : Team member file access."," * @function DropboxTeam#teamTeamFolderCreate"," * @arg {TeamTeamFolderCreateArg} arg - The request parameters."," * @returns {Promise.<TeamTeamFolderMetadata, Error.<TeamTeamFolderCreateError>>}"," */","routes.teamTeamFolderCreate = function (arg) {","  return this.request('team/team_folder/create', arg, 'team', 'api', 'rpc');","};","","/**"," * Retrieves metadata for team folders. Permission : Team member file access."," * @function DropboxTeam#teamTeamFolderGetInfo"," * @arg {TeamTeamFolderIdListArg} arg - The request parameters."," * @returns {Promise.<Array.<TeamTeamFolderGetInfoItem>, Error.<void>>}"," */","routes.teamTeamFolderGetInfo = function (arg) {","  return this.request('team/team_folder/get_info', arg, 'team', 'api', 'rpc');","};","","/**"," * Lists all team folders. Permission : Team member file access."," * @function DropboxTeam#teamTeamFolderList"," * @arg {TeamTeamFolderListArg} arg - The request parameters."," * @returns {Promise.<TeamTeamFolderListResult, Error.<TeamTeamFolderListError>>}"," */","routes.teamTeamFolderList = function (arg) {","  return this.request('team/team_folder/list', arg, 'team', 'api', 'rpc');","};","","/**"," * Permanently deletes an archived team folder. Permission : Team member file"," * access."," * @function DropboxTeam#teamTeamFolderPermanentlyDelete"," * @arg {TeamTeamFolderIdArg} arg - The request parameters."," * @returns {Promise.<void, Error.<TeamTeamFolderPermanentlyDeleteError>>}"," */","routes.teamTeamFolderPermanentlyDelete = function (arg) {","  return this.request('team/team_folder/permanently_delete', arg, 'team', 'api', 'rpc');","};","","/**"," * Changes an active team folder's name. Permission : Team member file access."," * @function DropboxTeam#teamTeamFolderRename"," * @arg {TeamTeamFolderRenameArg} arg - The request parameters."," * @returns {Promise.<TeamTeamFolderMetadata, Error.<TeamTeamFolderRenameError>>}"," */","routes.teamTeamFolderRename = function (arg) {","  return this.request('team/team_folder/rename', arg, 'team', 'api', 'rpc');","};","","module.exports = routes;",""],"l":{"2":1,"10":1,"11":0,"20":1,"21":0,"31":1,"32":0,"41":1,"42":0,"51":1,"52":0,"61":1,"62":0,"72":1,"73":0,"85":1,"86":0,"97":1,"98":0,"110":1,"111":0,"120":1,"121":0,"131":1,"132":0,"144":1,"145":0,"154":1,"155":0,"165":1,"166":0,"179":1,"180":0,"189":1,"190":0,"200":1,"201":0,"211":1,"212":0,"222":1,"223":0,"234":1,"235":0,"244":1,"245":0,"254":1,"255":0,"274":1,"275":0,"285":1,"286":0,"297":1,"298":0,"307":1,"308":0,"318":1,"319":0,"330":1,"331":0,"348":1,"349":0,"359":1,"360":0,"371":1,"372":0,"381":1,"382":0,"391":1,"392":0,"403":1,"404":0,"415":1,"416":0,"426":1,"427":0,"436":1,"437":0,"447":1,"448":0,"458":1,"459":0,"468":1,"469":0,"478":1,"479":0,"488":1,"489":0,"498":1,"499":0,"509":1,"510":0,"520":1,"521":0,"531":1,"532":0,"541":1,"542":0,"551":1,"552":0,"561":1,"562":0,"572":1,"573":0,"582":1,"583":0,"586":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/rpc-request.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/rpc-request.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":23},"end":{"line":6,"column":50}}},"2":{"name":"(anonymous_2)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":14,"column":76}}},"3":{"name":"(anonymous_3)","line":15,"loc":{"start":{"line":15,"column":24},"end":{"line":15,"column":51}}},"4":{"name":"success","line":18,"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}}},"5":{"name":"failure","line":24,"loc":{"start":{"line":24,"column":4},"end":{"line":24,"column":28}}},"6":{"name":"responseHandler","line":30,"loc":{"start":{"line":30,"column":4},"end":{"line":30,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":36}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"4":{"start":{"line":6,"column":0},"end":{"line":12,"column":2}},"5":{"start":{"line":7,"column":2},"end":{"line":11,"column":4}},"6":{"start":{"line":14,"column":0},"end":{"line":67,"column":2}},"7":{"start":{"line":15,"column":2},"end":{"line":64,"column":4}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":19}},"9":{"start":{"line":18,"column":4},"end":{"line":22,"column":5}},"10":{"start":{"line":19,"column":6},"end":{"line":21,"column":7}},"11":{"start":{"line":20,"column":8},"end":{"line":20,"column":22}},"12":{"start":{"line":24,"column":4},"end":{"line":28,"column":5}},"13":{"start":{"line":25,"column":6},"end":{"line":27,"column":7}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":22}},"15":{"start":{"line":30,"column":4},"end":{"line":36,"column":5}},"16":{"start":{"line":31,"column":6},"end":{"line":35,"column":7}},"17":{"start":{"line":32,"column":8},"end":{"line":32,"column":51}},"18":{"start":{"line":34,"column":8},"end":{"line":34,"column":31}},"19":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"20":{"start":{"line":41,"column":6},"end":{"line":41,"column":18}},"21":{"start":{"line":44,"column":4},"end":{"line":45,"column":32}},"22":{"start":{"line":47,"column":4},"end":{"line":56,"column":5}},"23":{"start":{"line":50,"column":8},"end":{"line":50,"column":65}},"24":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"25":{"start":{"line":53,"column":8},"end":{"line":53,"column":14}},"26":{"start":{"line":55,"column":8},"end":{"line":55,"column":56}},"27":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"28":{"start":{"line":59,"column":6},"end":{"line":59,"column":73}},"29":{"start":{"line":62,"column":4},"end":{"line":63,"column":28}},"30":{"start":{"line":66,"column":2},"end":{"line":66,"column":38}},"31":{"start":{"line":69,"column":0},"end":{"line":69,"column":28}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":12},"end":{"line":9,"column":43}},{"start":{"line":9,"column":48},"end":{"line":9,"column":64}}]},"2":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":23},"end":{"line":9,"column":36}},{"start":{"line":9,"column":39},"end":{"line":9,"column":43}}]},"3":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":6}},{"start":{"line":19,"column":6},"end":{"line":19,"column":6}}]},"4":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":6}},{"start":{"line":25,"column":6},"end":{"line":25,"column":6}}]},"5":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"6":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"7":{"line":47,"type":"switch","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":18}},{"start":{"line":49,"column":6},"end":{"line":51,"column":14}},{"start":{"line":52,"column":6},"end":{"line":53,"column":14}},{"start":{"line":54,"column":6},"end":{"line":55,"column":56}}]},"8":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]}},"code":["var request = require('superagent');","var Promise = require('es6-promise').Promise;","var getBaseURL = require('./get-base-url');","","// This doesn't match what was spec'd in paper doc yet","var buildCustomError = function (error, response) {","  return {","    status: error.status,","    error: (response ? response.text : null) || error.toString(),","    response: response","  };","};","","var rpcRequest = function (path, body, auth, host, accessToken, selectUser) {","  var promiseFunction = function (resolve, reject) {","    var apiRequest;","","    function success(data) {","      if (resolve) {","        resolve(data);","      }","    }","","    function failure(error) {","      if (reject) {","        reject(error);","      }","    }","","    function responseHandler(error, response) {","      if (error) {","        failure(buildCustomError(error, response));","      } else {","        success(response.body);","      }","    }","","    // The API expects null to be passed for endpoints that dont accept any","    // parameters","    if (!body) {","      body = null;","    }","","    apiRequest = request.post(getBaseURL(host) + path)","      .type('application/json');","","    switch (auth) {","      case 'team':","      case 'user':","        apiRequest.set('Authorization', 'Bearer ' + accessToken);","        break;","      case 'noauth':","        break;","      default:","        throw new Error('Unhandled auth type: ' + auth);","    }","","    if (selectUser) {","      apiRequest = apiRequest.set('Dropbox-API-Select-User', selectUser);","    }","","    apiRequest.send(body)","      .end(responseHandler);","  };","","  return new Promise(promiseFunction);","};","","module.exports = rpcRequest;",""],"l":{"1":1,"2":1,"3":1,"6":1,"7":0,"14":1,"15":0,"16":0,"18":1,"19":0,"20":0,"24":1,"25":0,"26":0,"30":1,"31":0,"32":0,"34":0,"40":0,"41":0,"44":0,"47":0,"50":0,"51":0,"53":0,"55":0,"58":0,"59":0,"62":0,"66":0,"69":1}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/types.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/types.js","s":{},"b":{},"f":{},"fnMap":{},"statementMap":{},"branchMap":{},"code":["// Auto-generated by Stone, do not modify.","/**"," * An Error object returned from a route."," * @typedef {Object} Error"," * @property {string} error_summary - Text summary of the error."," * @property {T} error - The error object."," * @property {UserMessage} user_message - User-friendly error message."," * @template T"," */","","/**"," * User-friendly error message."," * @typedef {Object} UserMessage"," * @property {string} text - The message."," * @property {string} locale"," */",""," /**","  * @typedef {string} Timestamp","  */","","/**"," * Result returned by methods that may either launch an asynchronous job or"," * complete synchronously. Upon synchronous completion of the job, no additional"," * information is returned."," * @typedef {Object} AsyncLaunchEmptyResult"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * Result returned by methods that launch an asynchronous job. A method who may"," * either launch an asynchronous job, or complete the request synchronously, can"," * use this union by extending it, and adding a 'complete' field with the type"," * of the synchronous response. See LaunchEmptyResult for an example."," * @typedef {Object} AsyncLaunchResultBase"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {'async_job_id'} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for methods that poll the status of an asynchronous job."," * @typedef {Object} AsyncPollArg"," * @property {string} async_job_id - Id of the asynchronous job. This is the"," * value of a response returned from the method that launched the job."," */","","/**"," * Result returned by methods that poll for the status of an asynchronous job."," * Upon completion of the job, no additional information is returned."," * @typedef {Object} AsyncPollEmptyResult"," * @property {('in_progress'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * Error returned by methods for polling the status of asynchronous job."," * @typedef {Object} AsyncPollError"," * @property {('invalid_async_job_id'|'internal_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Result returned by methods that poll for the status of an asynchronous job."," * Unions that extend this union should add a 'complete' field with a type of"," * the information returned upon job completion. See PollEmptyResult for an"," * example."," * @typedef {Object} AsyncPollResultBase"," * @property {'in_progress'} .tag - Tag identifying the union variant."," */","","/**"," * Error occurred because the account doesn't have permission to access the"," * resource."," * @typedef {Object} AuthAccessError"," * @property {AuthInvalidAccountTypeError} [invalid_account_type] - Available if"," * .tag is invalid_account_type. Current account type cannot access the"," * resource."," * @property {AuthPaperAccessError} [paper_access_denied] - Available if .tag is"," * paper_access_denied. Current account cannot access Paper."," * @property {('invalid_account_type'|'paper_access_denied'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Errors occurred during authentication."," * @typedef {Object} AuthAuthError"," * @property {('invalid_access_token'|'invalid_select_user'|'invalid_select_admin'|'user_suspended'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} AuthInvalidAccountTypeError"," * @property {('endpoint'|'feature'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} AuthPaperAccessError"," * @property {('paper_disabled'|'not_paper_user'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Error occurred because the app is being rate limited."," * @typedef {Object} AuthRateLimitError"," * @property {AuthRateLimitReason} reason - The reason why the app is being rate"," * limited."," * @property {number} retry_after - The number of seconds that the app should"," * wait before making another request."," */","","/**"," * @typedef {Object} AuthRateLimitReason"," * @property {('too_many_requests'|'too_many_write_operations'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} AuthTokenFromOAuth1Arg"," * @property {string} oauth1_token - The supplied OAuth 1.0 access token."," * @property {string} oauth1_token_secret - The token secret associated with the"," * supplied access token."," */","","/**"," * @typedef {Object} AuthTokenFromOAuth1Error"," * @property {('invalid_oauth1_token_info'|'app_id_mismatch'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} AuthTokenFromOAuth1Result"," * @property {string} oauth2_token - The OAuth 2.0 token generated from the"," * supplied OAuth 1.0 token."," */","","/**"," * @typedef {Object} FilesAddPropertiesError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_field_too_large'|'does_not_fit_template'|'property_group_already_exists')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesAlphaGetMetadataArg"," * @property {string} path - The path of a file or folder on Dropbox."," * @property {boolean} include_media_info - If true, FileMetadata.media_info is"," * set for photo and video."," * @property {boolean} include_deleted - If true, DeletedMetadata will be"," * returned for deleted file or folder, otherwise LookupError.not_found will be"," * returned."," * @property {boolean} include_has_explicit_shared_members - If true, the"," * results will include a flag for each file indicating whether or not  that"," * file has any explicit members."," * @property {Array.<Object>} [include_property_templates] - If set to a valid"," * list of template IDs, FileMetadata.property_groups is set for files with"," * custom properties."," */","","/**"," * @typedef {Object} FilesAlphaGetMetadataError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {FilesLookUpPropertiesError} [properties_error] - Available if .tag"," * is properties_error."," * @property {('path'|'properties_error')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesCommitInfo"," * @property {Object} contents - The file contents to be uploaded."," * @property {string} path - Path in the user's Dropbox to save the file."," * @property {FilesWriteMode} mode - Selects what to do if the file already"," * exists."," * @property {boolean} autorename - If there's a conflict, as determined by"," * mode, have the Dropbox server try to autorename the file to avoid conflict."," * @property {Timestamp} [client_modified] - The value to store as the"," * client_modified timestamp. Dropbox automatically records the time at which"," * the file was written to the Dropbox servers. It can also record an additional"," * timestamp, provided by Dropbox desktop clients, mobile clients, and API apps"," * of when the file was actually created or modified."," * @property {boolean} mute - Normally, users are made aware of any file"," * modifications in their Dropbox account via notifications in the client"," * software. If true, this tells the clients that this modification shouldn't"," * result in a user notification."," */","","/**"," * @typedef {Object} FilesCommitInfoWithProperties"," * @property {Object} contents - The file contents to be uploaded."," * @property {string} path - Path in the user's Dropbox to save the file."," * @property {FilesWriteMode} mode - Selects what to do if the file already"," * exists."," * @property {boolean} autorename - If there's a conflict, as determined by"," * mode, have the Dropbox server try to autorename the file to avoid conflict."," * @property {Timestamp} [client_modified] - The value to store as the"," * client_modified timestamp. Dropbox automatically records the time at which"," * the file was written to the Dropbox servers. It can also record an additional"," * timestamp, provided by Dropbox desktop clients, mobile clients, and API apps"," * of when the file was actually created or modified."," * @property {boolean} mute - Normally, users are made aware of any file"," * modifications in their Dropbox account via notifications in the client"," * software. If true, this tells the clients that this modification shouldn't"," * result in a user notification."," * @property {Array.<PropertiesPropertyGroup>} [property_groups] - List of"," * custom properties to add to file."," */","","/**"," * @typedef {Object} FilesCreateFolderArg"," * @property {string} path - Path in the user's Dropbox to create."," * @property {boolean} autorename - If there's a conflict, have the Dropbox"," * server try to autorename the folder to avoid the conflict."," */","","/**"," * @typedef {Object} FilesCreateFolderError"," * @property {FilesWriteError} [path] - Available if .tag is path."," * @property {'path'} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesDeleteArg"," * @property {string} path - Path in the user's Dropbox to delete."," */","","/**"," * @typedef {Object} FilesDeleteBatchArg"," * @property {Array.<FilesDeleteArg>} entries"," */","","/**"," * @typedef {Object} FilesDeleteBatchError"," * @property {('too_many_write_operations'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesDeleteBatchJobStatus"," * @property {FilesDeleteBatchResult} [complete] - Available if .tag is"," * complete. The batch delete has finished."," * @property {FilesDeleteBatchError} [failed] - Available if .tag is failed. The"," * batch delete has failed."," * @property {('in_progress'|'complete'|'failed'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Result returned by delete_batch that may either launch an asynchronous job or"," * complete synchronously."," * @typedef {Object} FilesDeleteBatchLaunch"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {FilesDeleteBatchResult} [complete] - Available if .tag is"," * complete."," * @property {('async_job_id'|'complete'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesDeleteBatchResult"," * @property {Array.<FilesDeleteBatchResultEntry>} entries"," */","","/**"," * @typedef {Object} FilesDeleteBatchResultEntry"," * @property {FilesDeleteResult} [success] - Available if .tag is success."," * @property {FilesDeleteError} [failure] - Available if .tag is failure."," * @property {('success'|'failure')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesDeleteError"," * @property {FilesLookupError} [path_lookup] - Available if .tag is"," * path_lookup."," * @property {FilesWriteError} [path_write] - Available if .tag is path_write."," * @property {('path_lookup'|'path_write'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesDeleteResult"," * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}"," * metadata"," */","","/**"," * Indicates that there used to be a file or folder at this path, but it no"," * longer exists."," * @typedef {Object} FilesDeletedMetadata","@property {'deleted'} [.tag] - Tag identifying this subtype variant. This field","is only present when needed to discriminate between multiple possible subtypes."," * @property {string} name - The last component of the path (including"," * extension). This never contains a slash."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will be null if the file"," * or folder is not mounted."," * @property {string} [path_display] - The cased path to be used for display"," * purposes only. In rare instances the casing will not correctly match the"," * user's filesystem, but this behavior will match the path provided in the Core"," * API v1, and at least the last path component will have the correct casing."," * Changes to only the casing of paths won't be returned by"," * list_folder/continue. This field will be null if the file or folder is not"," * mounted."," * @property {string} [parent_shared_folder_id] - Deprecated. Please use"," * FileSharingInfo.parent_shared_folder_id or"," * FolderSharingInfo.parent_shared_folder_id instead."," */","","/**"," * Dimensions for a photo or video."," * @typedef {Object} FilesDimensions"," * @property {number} height - Height of the photo/video."," * @property {number} width - Width of the photo/video."," */","","/**"," * @typedef {Object} FilesDownloadArg"," * @property {string} path - The path of the file to download."," * @property {string} [rev] - Deprecated. Please specify revision in path"," * instead."," */","","/**"," * @typedef {Object} FilesDownloadError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesFileMetadata","@property {'file'} [.tag] - Tag identifying this subtype variant. This field is","only present when needed to discriminate between multiple possible subtypes."," * @property {string} name - The last component of the path (including"," * extension). This never contains a slash."," * @property {string} id - A unique identifier for the file."," * @property {Timestamp} client_modified - For files, this is the modification"," * time set by the desktop client when the file was added to Dropbox. Since this"," * time is not verified (the Dropbox server stores whatever the desktop client"," * sends up), this should only be used for display purposes (such as sorting)"," * and not, for example, to determine if a file has changed or not."," * @property {Timestamp} server_modified - The last time the file was modified"," * on Dropbox."," * @property {string} rev - A unique identifier for the current revision of a"," * file. This field is the same rev as elsewhere in the API and can be used to"," * detect changes and avoid conflicts."," * @property {number} size - The file size in bytes."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will be null if the file"," * or folder is not mounted."," * @property {string} [path_display] - The cased path to be used for display"," * purposes only. In rare instances the casing will not correctly match the"," * user's filesystem, but this behavior will match the path provided in the Core"," * API v1, and at least the last path component will have the correct casing."," * Changes to only the casing of paths won't be returned by"," * list_folder/continue. This field will be null if the file or folder is not"," * mounted."," * @property {string} [parent_shared_folder_id] - Deprecated. Please use"," * FileSharingInfo.parent_shared_folder_id or"," * FolderSharingInfo.parent_shared_folder_id instead."," * @property {FilesMediaInfo} [media_info] - Additional information if the file"," * is a photo or video."," * @property {FilesFileSharingInfo} [sharing_info] - Set if this file is"," * contained in a shared folder."," * @property {Array.<PropertiesPropertyGroup>} [property_groups] - Additional"," * information if the file has custom properties with the property template"," * specified."," * @property {boolean} [has_explicit_shared_members] - This flag will only be"," * present if include_has_explicit_shared_members  is true in list_folder or"," * get_metadata. If this  flag is present, it will be true if this file has any"," * explicit shared  members. This is different from sharing_info in that this"," * could be true  in the case where a file has explicit members but is not"," * contained within  a shared folder."," * @property {string} [content_hash] - A hash of the file content. This field"," * can be used to verify data integrity. For more information see our Content"," * hash /developers/reference/content-hash page."," */","","/**"," * Sharing info for a file which is contained by a shared folder."," * @typedef {Object} FilesFileSharingInfo"," * @property {boolean} read_only - True if the file or folder is inside a"," * read-only shared folder."," * @property {string} parent_shared_folder_id - ID of shared folder that holds"," * this file."," * @property {string} [modified_by] - The last user who modified the file. This"," * field will be null if the user's account has been deleted."," */","","/**"," * @typedef {Object} FilesFolderMetadata","@property {'folder'} [.tag] - Tag identifying this subtype variant. This field","is only present when needed to discriminate between multiple possible subtypes."," * @property {string} name - The last component of the path (including"," * extension). This never contains a slash."," * @property {string} id - A unique identifier for the folder."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will be null if the file"," * or folder is not mounted."," * @property {string} [path_display] - The cased path to be used for display"," * purposes only. In rare instances the casing will not correctly match the"," * user's filesystem, but this behavior will match the path provided in the Core"," * API v1, and at least the last path component will have the correct casing."," * Changes to only the casing of paths won't be returned by"," * list_folder/continue. This field will be null if the file or folder is not"," * mounted."," * @property {string} [parent_shared_folder_id] - Deprecated. Please use"," * FileSharingInfo.parent_shared_folder_id or"," * FolderSharingInfo.parent_shared_folder_id instead."," * @property {string} [shared_folder_id] - Deprecated. Please use sharing_info"," * instead."," * @property {FilesFolderSharingInfo} [sharing_info] - Set if the folder is"," * contained in a shared folder or is a shared folder mount point."," * @property {Array.<PropertiesPropertyGroup>} [property_groups] - Additional"," * information if the file has custom properties with the property template"," * specified."," */","","/**"," * Sharing info for a folder which is contained in a shared folder or is a"," * shared folder mount point."," * @typedef {Object} FilesFolderSharingInfo"," * @property {boolean} read_only - True if the file or folder is inside a"," * read-only shared folder."," * @property {string} [parent_shared_folder_id] - Set if the folder is contained"," * by a shared folder."," * @property {string} [shared_folder_id] - If this folder is a shared folder"," * mount point, the ID of the shared folder mounted at this location."," * @property {boolean} traverse_only - Specifies that the folder can only be"," * traversed and the user can only see a limited subset of the contents of this"," * folder because they don't have read access to this folder. They do, however,"," * have access to some sub folder."," * @property {boolean} no_access - Specifies that the folder cannot be accessed"," * by the user."," */","","/**"," * @typedef {Object} FilesGetCopyReferenceArg"," * @property {string} path - The path to the file or folder you want to get a"," * copy reference to."," */","","/**"," * @typedef {Object} FilesGetCopyReferenceError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesGetCopyReferenceResult"," * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}"," * metadata - Metadata of the file or folder."," * @property {string} copy_reference - A copy reference to the file or folder."," * @property {Timestamp} expires - The expiration date of the copy reference."," * This value is currently set to be far enough in the future so that expiration"," * is effectively not an issue."," */","","/**"," * @typedef {Object} FilesGetMetadataArg"," * @property {string} path - The path of a file or folder on Dropbox."," * @property {boolean} include_media_info - If true, FileMetadata.media_info is"," * set for photo and video."," * @property {boolean} include_deleted - If true, DeletedMetadata will be"," * returned for deleted file or folder, otherwise LookupError.not_found will be"," * returned."," * @property {boolean} include_has_explicit_shared_members - If true, the"," * results will include a flag for each file indicating whether or not  that"," * file has any explicit members."," */","","/**"," * @typedef {Object} FilesGetMetadataError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {'path'} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesGetTemporaryLinkArg"," * @property {string} path - The path to the file you want a temporary link to."," */","","/**"," * @typedef {Object} FilesGetTemporaryLinkError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesGetTemporaryLinkResult"," * @property {FilesFileMetadata} metadata - Metadata of the file."," * @property {string} link - The temporary link which can be used to stream"," * content the file."," */","","/**"," * GPS coordinates for a photo or video."," * @typedef {Object} FilesGpsCoordinates"," * @property {number} latitude - Latitude of the GPS coordinates."," * @property {number} longitude - Longitude of the GPS coordinates."," */","","/**"," * @typedef {Object} FilesInvalidPropertyGroupError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_field_too_large'|'does_not_fit_template')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesListFolderArg"," * @property {string} path - The path to the folder you want to see the contents"," * of."," * @property {boolean} recursive - If true, the list folder operation will be"," * applied recursively to all subfolders and the response will contain contents"," * of all subfolders."," * @property {boolean} include_media_info - If true, FileMetadata.media_info is"," * set for photo and video."," * @property {boolean} include_deleted - If true, the results will include"," * entries for files and folders that used to exist but were deleted."," * @property {boolean} include_has_explicit_shared_members - If true, the"," * results will include a flag for each file indicating whether or not  that"," * file has any explicit members."," */","","/**"," * @typedef {Object} FilesListFolderContinueArg"," * @property {string} cursor - The cursor returned by your last call to"," * list_folder or list_folder/continue."," */","","/**"," * @typedef {Object} FilesListFolderContinueError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesListFolderError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesListFolderGetLatestCursorResult"," * @property {string} cursor - Pass the cursor into list_folder/continue to see"," * what's changed in the folder since your previous query."," */","","/**"," * @typedef {Object} FilesListFolderLongpollArg"," * @property {string} cursor - A cursor as returned by list_folder or"," * list_folder/continue. Cursors retrieved by setting"," * ListFolderArg.include_media_info to true are not supported."," * @property {number} timeout - A timeout in seconds. The request will block for"," * at most this length of time, plus up to 90 seconds of random jitter added to"," * avoid the thundering herd problem. Care should be taken when using this"," * parameter, as some network infrastructure does not support long timeouts."," */","","/**"," * @typedef {Object} FilesListFolderLongpollError"," * @property {('reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesListFolderLongpollResult"," * @property {boolean} changes - Indicates whether new changes are available. If"," * true, call list_folder/continue to retrieve the changes."," * @property {number} [backoff] - If present, backoff for at least this many"," * seconds before calling list_folder/longpoll again."," */","","/**"," * @typedef {Object} FilesListFolderResult"," * @property"," * {Array.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)>}"," * entries - The files and (direct) subfolders in the folder."," * @property {string} cursor - Pass the cursor into list_folder/continue to see"," * what's changed in the folder since your previous query."," * @property {boolean} has_more - If true, then there are more entries"," * available. Pass the cursor to list_folder/continue to retrieve the rest."," */","","/**"," * @typedef {Object} FilesListRevisionsArg"," * @property {string} path - The path to the file you want to see the revisions"," * of."," * @property {number} limit - The maximum number of revision entries returned."," */","","/**"," * @typedef {Object} FilesListRevisionsError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesListRevisionsResult"," * @property {boolean} is_deleted - If the file is deleted."," * @property {Array.<FilesFileMetadata>} entries - The revisions for the file."," * Only non-delete revisions will show up here."," */","","/**"," * @typedef {Object} FilesLookUpPropertiesError"," * @property {'property_group_not_found'} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesLookupError"," * @property {string} [malformed_path] - Available if .tag is malformed_path."," * @property {FilesPathRootError} [invalid_path_root] - Available if .tag is"," * invalid_path_root. The path root parameter provided is invalid."," * @property {('malformed_path'|'not_found'|'not_file'|'not_folder'|'restricted_content'|'invalid_path_root'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesMediaInfo"," * @property {(FilesPhotoMetadata|FilesVideoMetadata)} [metadata] - Available if"," * .tag is metadata. The metadata for the photo/video."," * @property {('pending'|'metadata')} .tag - Tag identifying the union variant."," */","","/**"," * Metadata for a photo or video."," * @typedef {Object} FilesMediaMetadata","@property {(\"photo\"|\"video\")} .tag - Tag identifying the subtype variant."," * @property {FilesDimensions} [dimensions] - Dimension of the photo/video."," * @property {FilesGpsCoordinates} [location] - The GPS coordinate of the"," * photo/video."," * @property {Timestamp} [time_taken] - The timestamp when the photo/video is"," * taken."," */","","/**"," * Metadata for a file or folder."," * @typedef {Object} FilesMetadata","@property {(\"file\"|\"folder\"|\"deleted\")} .tag - Tag identifying the subtype","variant."," * @property {string} name - The last component of the path (including"," * extension). This never contains a slash."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will be null if the file"," * or folder is not mounted."," * @property {string} [path_display] - The cased path to be used for display"," * purposes only. In rare instances the casing will not correctly match the"," * user's filesystem, but this behavior will match the path provided in the Core"," * API v1, and at least the last path component will have the correct casing."," * Changes to only the casing of paths won't be returned by"," * list_folder/continue. This field will be null if the file or folder is not"," * mounted."," * @property {string} [parent_shared_folder_id] - Deprecated. Please use"," * FileSharingInfo.parent_shared_folder_id or"," * FolderSharingInfo.parent_shared_folder_id instead."," */","","/**"," * @typedef {Object} FilesPathRootError"," * @property {string} [path_root] - The user's latest path root value. None if"," * the user no longer has a path root."," */","","/**"," * Metadata for a photo."," * @typedef {Object} FilesPhotoMetadata","@property {'photo'} [.tag] - Tag identifying this subtype variant. This field is","only present when needed to discriminate between multiple possible subtypes."," * @property {FilesDimensions} [dimensions] - Dimension of the photo/video."," * @property {FilesGpsCoordinates} [location] - The GPS coordinate of the"," * photo/video."," * @property {Timestamp} [time_taken] - The timestamp when the photo/video is"," * taken."," */","","/**"," * @typedef {Object} FilesPreviewArg"," * @property {string} path - The path of the file to preview."," * @property {string} [rev] - Deprecated. Please specify revision in path"," * instead."," */","","/**"," * @typedef {Object} FilesPreviewError"," * @property {FilesLookupError} [path] - Available if .tag is path. An error"," * occurs when downloading metadata for the file."," * @property {('path'|'in_progress'|'unsupported_extension'|'unsupported_content')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesPropertiesError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('template_not_found'|'restricted_content'|'other'|'path')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesPropertyGroupUpdate"," * @property {string} template_id - A unique identifier for a property template."," * @property {Array.<PropertiesPropertyField>} [add_or_update_fields] - List of"," * property fields to update if the field already exists. If the field doesn't"," * exist, add the field to the property group."," * @property {Array.<string>} [remove_fields] - List of property field names to"," * remove from property group if the field exists."," */","","/**"," * @typedef {Object} FilesPropertyGroupWithPath"," * @property {string} path - A unique identifier for the file."," * @property {Array.<PropertiesPropertyGroup>} property_groups - Filled custom"," * property templates associated with a file."," */","","/**"," * @typedef {Object} FilesRelocationArg"," * @property {string} from_path - Path in the user's Dropbox to be copied or"," * moved."," * @property {string} to_path - Path in the user's Dropbox that is the"," * destination."," * @property {boolean} allow_shared_folder - If true, copy will copy contents in"," * shared folder, otherwise RelocationError.cant_copy_shared_folder will be"," * returned if from_path contains shared folder. This field is always true for"," * move."," * @property {boolean} autorename - If there's a conflict, have the Dropbox"," * server try to autorename the file to avoid the conflict."," */","","/**"," * @typedef {Object} FilesRelocationBatchArg"," * @property {Array.<FilesRelocationPath>} entries - List of entries to be moved"," * or copied. Each entry is RelocationPath."," * @property {boolean} allow_shared_folder - If true, copy_batch will copy"," * contents in shared folder, otherwise RelocationError.cant_copy_shared_folder"," * will be returned if RelocationPath.from_path contains shared folder.  This"," * field is always true for move_batch."," * @property {boolean} autorename - If there's a conflict with any file, have"," * the Dropbox server try to autorename that file to avoid the conflict."," */","","/**"," * @typedef {Object} FilesRelocationBatchError"," * @property {FilesLookupError} [from_lookup] - Available if .tag is"," * from_lookup."," * @property {FilesWriteError} [from_write] - Available if .tag is from_write."," * @property {FilesWriteError} [to] - Available if .tag is to."," * @property {('from_lookup'|'from_write'|'to'|'cant_copy_shared_folder'|'cant_nest_shared_folder'|'cant_move_folder_into_itself'|'too_many_files'|'duplicated_or_nested_paths'|'other'|'too_many_write_operations')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesRelocationBatchJobStatus"," * @property {FilesRelocationBatchResult} [complete] - Available if .tag is"," * complete. The copy or move batch job has finished."," * @property {FilesRelocationBatchError} [failed] - Available if .tag is failed."," * The copy or move batch job has failed with exception."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * Result returned by copy_batch or move_batch that may either launch an"," * asynchronous job or complete synchronously."," * @typedef {Object} FilesRelocationBatchLaunch"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {FilesRelocationBatchResult} [complete] - Available if .tag is"," * complete."," * @property {('async_job_id'|'complete'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesRelocationBatchResult"," * @property {Array.<FilesRelocationResult>} entries"," */","","/**"," * @typedef {Object} FilesRelocationError"," * @property {FilesLookupError} [from_lookup] - Available if .tag is"," * from_lookup."," * @property {FilesWriteError} [from_write] - Available if .tag is from_write."," * @property {FilesWriteError} [to] - Available if .tag is to."," * @property {('from_lookup'|'from_write'|'to'|'cant_copy_shared_folder'|'cant_nest_shared_folder'|'cant_move_folder_into_itself'|'too_many_files'|'duplicated_or_nested_paths'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesRelocationPath"," * @property {string} from_path - Path in the user's Dropbox to be copied or"," * moved."," * @property {string} to_path - Path in the user's Dropbox that is the"," * destination."," */","","/**"," * @typedef {Object} FilesRelocationResult"," * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}"," * metadata"," */","","/**"," * @typedef {Object} FilesRemovePropertiesArg"," * @property {string} path - A unique identifier for the file."," * @property {Array.<Object>} property_template_ids - A list of identifiers for"," * a property template created by route properties/template/add."," */","","/**"," * @typedef {Object} FilesRemovePropertiesError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {FilesLookUpPropertiesError} [property_group_lookup] - Available if"," * .tag is property_group_lookup."," * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_group_lookup')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesRestoreArg"," * @property {string} path - The path to the file you want to restore."," * @property {string} rev - The revision to restore for the file."," */","","/**"," * @typedef {Object} FilesRestoreError"," * @property {FilesLookupError} [path_lookup] - Available if .tag is"," * path_lookup. An error occurs when downloading metadata for the file."," * @property {FilesWriteError} [path_write] - Available if .tag is path_write."," * An error occurs when trying to restore the file to that path."," * @property {('path_lookup'|'path_write'|'invalid_revision'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSaveCopyReferenceArg"," * @property {string} copy_reference - A copy reference returned by"," * copy_reference/get."," * @property {string} path - Path in the user's Dropbox that is the destination."," */","","/**"," * @typedef {Object} FilesSaveCopyReferenceError"," * @property {FilesWriteError} [path] - Available if .tag is path."," * @property {('path'|'invalid_copy_reference'|'no_permission'|'not_found'|'too_many_files'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSaveCopyReferenceResult"," * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}"," * metadata - The metadata of the saved file or folder in the user's Dropbox."," */","","/**"," * @typedef {Object} FilesSaveUrlArg"," * @property {string} path - The path in Dropbox where the URL will be saved to."," * @property {string} url - The URL to be saved."," */","","/**"," * @typedef {Object} FilesSaveUrlError"," * @property {FilesWriteError} [path] - Available if .tag is path."," * @property {('path'|'download_failed'|'invalid_url'|'not_found'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSaveUrlJobStatus"," * @property {FilesFileMetadata} [complete] - Available if .tag is complete."," * Metadata of the file where the URL is saved to."," * @property {FilesSaveUrlError} [failed] - Available if .tag is failed."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSaveUrlResult"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {FilesFileMetadata} [complete] - Available if .tag is complete."," * Metadata of the file where the URL is saved to."," * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSearchArg"," * @property {string} path - The path in the user's Dropbox to search. Should"," * probably be a folder."," * @property {string} query - The string to search for. The search string is"," * split on spaces into multiple tokens. For file name searching, the last token"," * is used for prefix matching (i.e. \"bat c\" matches \"bat cave\" but not \"batman"," * car\")."," * @property {number} start - The starting index within the search results (used"," * for paging)."," * @property {number} max_results - The maximum number of search results to"," * return."," * @property {FilesSearchMode} mode - The search mode (filename,"," * filename_and_content, or deleted_filename). Note that searching file content"," * is only available for Dropbox Business accounts."," */","","/**"," * @typedef {Object} FilesSearchError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSearchMatch"," * @property {FilesSearchMatchType} match_type - The type of the match."," * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}"," * metadata - The metadata for the matched file or folder."," */","","/**"," * Indicates what type of match was found for a given item."," * @typedef {Object} FilesSearchMatchType"," * @property {('filename'|'content'|'both')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSearchMode"," * @property {('filename'|'filename_and_content'|'deleted_filename')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesSearchResult"," * @property {Array.<FilesSearchMatch>} matches - A list (possibly empty) of"," * matches for the query."," * @property {boolean} more - Used for paging. If true, indicates there is"," * another page of results available that can be fetched by calling search"," * again."," * @property {number} start - Used for paging. Value to set the start argument"," * to when calling search to fetch the next page of results."," */","","/**"," * Sharing info for a file or folder."," * @typedef {Object} FilesSharingInfo"," * @property {boolean} read_only - True if the file or folder is inside a"," * read-only shared folder."," */","","/**"," * @typedef {Object} FilesThumbnailArg"," * @property {string} path - The path to the image file you want to thumbnail."," * @property {FilesThumbnailFormat} format - The format for the thumbnail image,"," * jpeg (default) or png. For  images that are photos, jpeg should be preferred,"," * while png is  better for screenshots and digital arts."," * @property {FilesThumbnailSize} size - The size for the thumbnail image."," */","","/**"," * @typedef {Object} FilesThumbnailError"," * @property {FilesLookupError} [path] - Available if .tag is path. An error"," * occurs when downloading metadata for the image."," * @property {('path'|'unsupported_extension'|'unsupported_image'|'conversion_error')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesThumbnailFormat"," * @property {('jpeg'|'png')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesThumbnailSize"," * @property {('w32h32'|'w64h64'|'w128h128'|'w640h480'|'w1024h768')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUpdatePropertiesError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {FilesLookUpPropertiesError} [property_group_lookup] - Available if"," * .tag is property_group_lookup."," * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_field_too_large'|'does_not_fit_template'|'property_group_lookup')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUpdatePropertyGroupArg"," * @property {string} path - A unique identifier for the file."," * @property {Array.<FilesPropertyGroupUpdate>} update_property_groups - Filled"," * custom property templates associated with a file."," */","","/**"," * @typedef {Object} FilesUploadError"," * @property {FilesUploadWriteFailed} [path] - Available if .tag is path. Unable"," * to save the uploaded contents to a file."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUploadErrorWithProperties"," * @property {FilesUploadWriteFailed} [path] - Available if .tag is path. Unable"," * to save the uploaded contents to a file."," * @property {FilesInvalidPropertyGroupError} [properties_error] - Available if"," * .tag is properties_error."," * @property {('path'|'other'|'properties_error')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUploadSessionAppendArg"," * @property {Object} contents - The file contents to be uploaded."," * @property {FilesUploadSessionCursor} cursor - Contains the upload session ID"," * and the offset."," * @property {boolean} close - If true, the current session will be closed, at"," * which point you won't be able to call upload_session/append_v2 anymore with"," * the current session."," */","","/**"," * @typedef {Object} FilesUploadSessionCursor"," * @property {Object} contents - The file contents to be uploaded."," * @property {string} session_id - The upload session ID (returned by"," * upload_session/start)."," * @property {number} offset - The amount of data that has been uploaded so far."," * We use this to make sure upload data isn't lost or duplicated in the event of"," * a network error."," */","","/**"," * @typedef {Object} FilesUploadSessionFinishArg"," * @property {Object} contents - The file contents to be uploaded."," * @property {FilesUploadSessionCursor} cursor - Contains the upload session ID"," * and the offset."," * @property {FilesCommitInfo} commit - Contains the path and other optional"," * modifiers for the commit."," */","","/**"," * @typedef {Object} FilesUploadSessionFinishBatchArg"," * @property {Array.<FilesUploadSessionFinishArg>} entries - Commit information"," * for each file in the batch."," */","","/**"," * @typedef {Object} FilesUploadSessionFinishBatchJobStatus"," * @property {FilesUploadSessionFinishBatchResult} [complete] - Available if"," * .tag is complete. The :route:`upload_session/finish_batch` has finished."," * @property {('in_progress'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * Result returned by upload_session/finish_batch that may either launch an"," * asynchronous job or complete synchronously."," * @typedef {Object} FilesUploadSessionFinishBatchLaunch"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {FilesUploadSessionFinishBatchResult} [complete] - Available if"," * .tag is complete."," * @property {('async_job_id'|'complete'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUploadSessionFinishBatchResult"," * @property {Array.<FilesUploadSessionFinishBatchResultEntry>} entries - Commit"," * result for each file in the batch."," */","","/**"," * @typedef {Object} FilesUploadSessionFinishBatchResultEntry"," * @property {FilesFileMetadata} [success] - Available if .tag is success."," * @property {FilesUploadSessionFinishError} [failure] - Available if .tag is"," * failure."," * @property {('success'|'failure')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUploadSessionFinishError"," * @property {FilesUploadSessionLookupError} [lookup_failed] - Available if .tag"," * is lookup_failed. The session arguments are incorrect; the value explains the"," * reason."," * @property {FilesWriteError} [path] - Available if .tag is path. Unable to"," * save the uploaded contents to a file."," * @property {('lookup_failed'|'path'|'too_many_shared_folder_targets'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUploadSessionLookupError"," * @property {FilesUploadSessionOffsetError} [incorrect_offset] - Available if"," * .tag is incorrect_offset. The specified offset was incorrect. See the value"," * for the correct offset. This error may occur when a previous request was"," * received and processed successfully but the client did not receive the"," * response, e.g. due to a network error."," * @property {('not_found'|'incorrect_offset'|'closed'|'not_closed'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesUploadSessionOffsetError"," * @property {number} correct_offset - The offset up to which data has been"," * collected."," */","","/**"," * @typedef {Object} FilesUploadSessionStartArg"," * @property {Object} contents - The file contents to be uploaded."," * @property {boolean} close - If true, the current session will be closed, at"," * which point you won't be able to call upload_session/append_v2 anymore with"," * the current session."," */","","/**"," * @typedef {Object} FilesUploadSessionStartResult"," * @property {string} session_id - A unique identifier for the upload session."," * Pass this to upload_session/append_v2 and upload_session/finish."," */","","/**"," * @typedef {Object} FilesUploadWriteFailed"," * @property {FilesWriteError} reason - The reason why the file couldn't be"," * saved."," * @property {string} upload_session_id - The upload session ID; this may be"," * used to retry the commit."," */","","/**"," * Metadata for a video."," * @typedef {Object} FilesVideoMetadata","@property {'video'} [.tag] - Tag identifying this subtype variant. This field is","only present when needed to discriminate between multiple possible subtypes."," * @property {FilesDimensions} [dimensions] - Dimension of the photo/video."," * @property {FilesGpsCoordinates} [location] - The GPS coordinate of the"," * photo/video."," * @property {Timestamp} [time_taken] - The timestamp when the photo/video is"," * taken."," * @property {number} [duration] - The duration of the video in milliseconds."," */","","/**"," * @typedef {Object} FilesWriteConflictError"," * @property {('file'|'folder'|'file_ancestor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} FilesWriteError"," * @property {string} [malformed_path] - Available if .tag is malformed_path."," * @property {FilesWriteConflictError} [conflict] - Available if .tag is"," * conflict. Couldn't write to the target path because there was something in"," * the way."," * @property {('malformed_path'|'conflict'|'no_write_permission'|'insufficient_space'|'disallowed_name'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Your intent when writing a file to some path. This is used to determine what"," * constitutes a conflict and what the autorename strategy is. In some"," * situations, the conflict behavior is identical: (a) If the target path"," * doesn't contain anything, the file is always written; no conflict. (b) If the"," * target path contains a folder, it's always a conflict. (c) If the target path"," * contains a file with identical contents, nothing gets written; no conflict."," * The conflict checking differs in the case where there's a file at the target"," * path with contents different from the contents you're trying to write."," * @typedef {Object} FilesWriteMode"," * @property {string} [update] - Available if .tag is update. Overwrite if the"," * given \"rev\" matches the existing file's \"rev\". The autorename strategy is to"," * append the string \"conflicted copy\" to the file name. For example,"," * \"document.txt\" might become \"document (conflicted copy).txt\" or \"document"," * (Panda's conflicted copy).txt\"."," * @property {('add'|'overwrite'|'update')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperAddMember"," * @property {SharingMemberSelector} member - User which should be added to the"," * Paper doc. Specify only email or Dropbox account id."," * @property {PaperPaperDocPermissionLevel} permission_level - Permission for"," * the user."," */","","/**"," * @typedef {Object} PaperAddPaperDocUser"," * @property {string} doc_id"," * @property {Array.<PaperAddMember>} members - User which should be added to"," * the Paper doc. Specify only email or Dropbox account id."," * @property {string} [custom_message] - A personal message that will be emailed"," * to each successfully added member."," * @property {boolean} quiet - Clients should set this to true if no email shall"," * be sent to added users."," */","","/**"," * Per-member result for docs/users/add."," * @typedef {Object} PaperAddPaperDocUserMemberResult"," * @property {SharingMemberSelector} member - One of specified input members."," * @property {PaperAddPaperDocUserResult} result - The outcome of the action on"," * this member."," */","","/**"," * @typedef {Object} PaperAddPaperDocUserResult"," * @property {('success'|'unknown_error'|'sharing_outside_team_disabled'|'daily_limit_reached'|'user_is_owner'|'failed_user_data_retrieval'|'permission_already_granted'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperCursor"," * @property {string} value - The actual cursor value."," * @property {Timestamp} [expiration] - Expiration time of value. Some cursors"," * might have expiration time assigned. This is a UTC value after which the"," * cursor is no longer valid and the API starts returning an error. If cursor"," * expires a new one needs to be obtained and pagination needs to be restarted."," * Some cursors might be short-lived some cursors might be long-lived. This"," * really depends on the sorting type and order, e.g.: 1. on one hand, listing"," * docs created by the user, sorted by the created time ascending will have"," * undefinite expiration because the results cannot change while the iteration"," * is happening. This cursor would be suitable for long term polling. 2. on the"," * other hand, listing docs sorted by the last modified time will have a very"," * short expiration as docs do get modified very often and the modified time can"," * be changed while the iteration is happening thus altering the results."," */","","/**"," * @typedef {Object} PaperDocLookupError"," * @property {('insufficient_permissions'|'other'|'doc_not_found')} .tag - Tag identifying the union variant."," */","","/**"," * The subscription level of a Paper doc."," * @typedef {Object} PaperDocSubscriptionLevel"," * @property {('default'|'ignore'|'every'|'no_email')} .tag - Tag identifying the union variant."," */","","/**"," * The desired export format of the Paper doc."," * @typedef {Object} PaperExportFormat"," * @property {('html'|'markdown'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Data structure representing a Paper folder."," * @typedef {Object} PaperFolder"," * @property {string} id - Paper folder id. This id uniquely identifies the"," * folder."," * @property {string} name - Paper folder name."," */","","/**"," * The sharing policy of a Paper folder.  Note: The sharing policy of subfolders"," * is inherited from the root folder."," * @typedef {Object} PaperFolderSharingPolicyType"," * @property {('team'|'invite_only')} .tag - Tag identifying the union variant."," */","","/**"," * The subscription level of a Paper folder."," * @typedef {Object} PaperFolderSubscriptionLevel"," * @property {('none'|'activity_only'|'daily_emails'|'weekly_emails')} .tag - Tag identifying the union variant."," */","","/**"," * Metadata about Paper folders containing the specififed Paper doc."," * @typedef {Object} PaperFoldersContainingPaperDoc"," * @property {PaperFolderSharingPolicyType} [folder_sharing_policy_type] - The"," * sharing policy of the folder containing the Paper doc."," * @property {Array.<PaperFolder>} [folders] - The folder path. If present the"," * first folder is the root folder."," */","","/**"," * @typedef {Object} PaperInviteeInfoWithPermissionLevel"," * @property {SharingInviteeInfo} invitee - Email invited to the Paper doc."," * @property {PaperPaperDocPermissionLevel} permission_level - Permission level"," * for the invitee."," */","","/**"," * @typedef {Object} PaperListDocsCursorError"," * @property {PaperPaperApiCursorError} [cursor_error] - Available if .tag is"," * cursor_error."," * @property {('cursor_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperListPaperDocsArgs"," * @property {PaperListPaperDocsFilterBy} filter_by - Allows user to specify how"," * the Paper docs should be filtered."," * @property {PaperListPaperDocsSortBy} sort_by - Allows user to specify how the"," * Paper docs should be sorted."," * @property {PaperListPaperDocsSortOrder} sort_order - Allows user to specify"," * the sort order of the result."," * @property {number} limit - Size limit per batch. The maximum number of docs"," * that can be retrieved per batch is 1000. Higher value results in invalid"," * arguments error."," */","","/**"," * @typedef {Object} PaperListPaperDocsContinueArgs"," * @property {string} cursor - The cursor obtained from docs/list or"," * docs/list/continue. Allows for pagination."," */","","/**"," * @typedef {Object} PaperListPaperDocsFilterBy"," * @property {('docs_accessed'|'docs_created'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperListPaperDocsResponse"," * @property {Array.<string>} doc_ids - The list of Paper doc ids that can be"," * used to access the given Paper docs or supplied to other API methods. The"," * list is sorted in the order specified by the initial call to docs/list."," * @property {PaperCursor} cursor - Pass the cursor into docs/list/continue to"," * paginate through all files. The cursor preserves all properties as specified"," * in the original call to docs/list."," * @property {boolean} has_more - Will be set to True if a subsequent call with"," * the provided cursor to docs/list/continue returns immediately with some"," * results. If set to False please allow some delay before making another call"," * to docs/list/continue."," */","","/**"," * @typedef {Object} PaperListPaperDocsSortBy"," * @property {('accessed'|'modified'|'created'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperListPaperDocsSortOrder"," * @property {('ascending'|'descending'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperListUsersCursorError"," * @property {PaperPaperApiCursorError} [cursor_error] - Available if .tag is"," * cursor_error."," * @property {('insufficient_permissions'|'other'|'doc_not_found'|'cursor_error')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperListUsersOnFolderArgs"," * @property {string} doc_id"," * @property {number} limit - Size limit per batch. The maximum number of users"," * that can be retrieved per batch is 1000. Higher value results in invalid"," * arguments error."," */","","/**"," * @typedef {Object} PaperListUsersOnFolderContinueArgs"," * @property {string} doc_id"," * @property {string} cursor - The cursor obtained from docs/folder_users/list"," * or docs/folder_users/list/continue. Allows for pagination."," */","","/**"," * @typedef {Object} PaperListUsersOnFolderResponse"," * @property {Array.<SharingInviteeInfo>} invitees - List of email addresses"," * that are invited on the Paper folder."," * @property {Array.<SharingUserInfo>} users - List of users that are invited on"," * the Paper folder."," * @property {PaperCursor} cursor - Pass the cursor into"," * docs/folder_users/list/continue to paginate through all users. The cursor"," * preserves all properties as specified in the original call to"," * docs/folder_users/list."," * @property {boolean} has_more - Will be set to True if a subsequent call with"," * the provided cursor to docs/folder_users/list/continue returns immediately"," * with some results. If set to False please allow some delay before making"," * another call to docs/folder_users/list/continue."," */","","/**"," * @typedef {Object} PaperListUsersOnPaperDocArgs"," * @property {string} doc_id"," * @property {number} limit - Size limit per batch. The maximum number of users"," * that can be retrieved per batch is 1000. Higher value results in invalid"," * arguments error."," * @property {PaperUserOnPaperDocFilter} filter_by - Specify this attribute if"," * you want to obtain users that have already accessed the Paper doc."," */","","/**"," * @typedef {Object} PaperListUsersOnPaperDocContinueArgs"," * @property {string} doc_id"," * @property {string} cursor - The cursor obtained from docs/users/list or"," * docs/users/list/continue. Allows for pagination."," */","","/**"," * @typedef {Object} PaperListUsersOnPaperDocResponse"," * @property {Array.<PaperInviteeInfoWithPermissionLevel>} invitees - List of"," * email addresses with their respective permission levels that are invited on"," * the Paper doc."," * @property {Array.<PaperUserInfoWithPermissionLevel>} users - List of users"," * with their respective permission levels that are invited on the Paper folder."," * @property {SharingUserInfo} doc_owner - The Paper doc owner. This field is"," * populated on every single response."," * @property {PaperCursor} cursor - Pass the cursor into"," * docs/users/list/continue to paginate through all users. The cursor preserves"," * all properties as specified in the original call to docs/users/list."," * @property {boolean} has_more - Will be set to True if a subsequent call with"," * the provided cursor to docs/users/list/continue returns immediately with some"," * results. If set to False please allow some delay before making another call"," * to docs/users/list/continue."," */","","/**"," * @typedef {Object} PaperPaperApiBaseError"," * @property {('insufficient_permissions'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperPaperApiCursorError"," * @property {('expired_cursor'|'invalid_cursor'|'wrong_user_in_cursor'|'reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperPaperDocExport"," * @property {string} doc_id"," * @property {PaperExportFormat} export_format"," */","","/**"," * @typedef {Object} PaperPaperDocExportResult"," * @property {string} owner - The Paper doc owner's email."," * @property {string} title - The Paper doc title."," * @property {number} revision - The Paper doc revision. Simply an ever"," * increasing number."," * @property {string} mime_type - MIME type of the export. This corresponds to"," * ExportFormat specified in the request."," */","","/**"," * @typedef {Object} PaperPaperDocPermissionLevel"," * @property {('edit'|'view_and_comment'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperPaperDocSharingPolicy"," * @property {string} doc_id"," * @property {PaperSharingPolicy} sharing_policy - The default sharing policy to"," * be set for the Paper doc."," */","","/**"," * @typedef {Object} PaperRefPaperDoc"," * @property {string} doc_id"," */","","/**"," * @typedef {Object} PaperRemovePaperDocUser"," * @property {string} doc_id"," * @property {SharingMemberSelector} member - User which should be removed from"," * the Paper doc. Specify only email or Dropbox account id."," */","","/**"," * Sharing policy of Paper doc."," * @typedef {Object} PaperSharingPolicy"," * @property {PaperSharingPublicPolicyType} [public_sharing_policy] - This value"," * applies to the non-team members."," * @property {PaperSharingTeamPolicyType} [team_sharing_policy] - This value"," * applies to the team members only. The value is null for all personal"," * accounts."," */","","/**"," * @typedef {Object} PaperSharingPublicPolicyType"," * @property {('people_with_link_can_edit'|'people_with_link_can_view_and_comment'|'invite_only'|'disabled')} .tag - Tag identifying the union variant."," */","","/**"," * The sharing policy type of the Paper doc."," * @typedef {Object} PaperSharingTeamPolicyType"," * @property {('people_with_link_can_edit'|'people_with_link_can_view_and_comment'|'invite_only')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PaperUserInfoWithPermissionLevel"," * @property {SharingUserInfo} user - User shared on the Paper doc."," * @property {PaperPaperDocPermissionLevel} permission_level - Permission level"," * for the user."," */","","/**"," * @typedef {Object} PaperUserOnPaperDocFilter"," * @property {('visited'|'shared'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PropertiesGetPropertyTemplateArg"," * @property {string} template_id - An identifier for property template added by"," * route properties/template/add."," */","","/**"," * The Property template for the specified template."," * @typedef {Object} PropertiesGetPropertyTemplateResult"," * @property {string} name - A display name for the property template. Property"," * template names can be up to 256 bytes."," * @property {string} description - Description for new property template."," * Property template descriptions can be up to 1024 bytes."," * @property {Array.<PropertiesPropertyFieldTemplate>} fields - This is a list"," * of custom properties associated with a property template. There can be up to"," * 64 properties in a single property template."," */","","/**"," * @typedef {Object} PropertiesListPropertyTemplateIds"," * @property {Array.<Object>} template_ids - List of identifiers for templates"," * added by route properties/template/add."," */","","/**"," * @typedef {Object} PropertiesModifyPropertyTemplateError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {('template_not_found'|'restricted_content'|'other'|'conflicting_property_names'|'too_many_properties'|'too_many_templates'|'template_attribute_too_large')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} PropertiesPropertyField"," * @property {string} name - This is the name or key of a custom property in a"," * property template. File property names can be up to 256 bytes."," * @property {string} value - Value of a custom property attached to a file."," * Values can be up to 1024 bytes."," */","","/**"," * Describe a single property field type which that can be part of a property"," * template."," * @typedef {Object} PropertiesPropertyFieldTemplate"," * @property {string} name - This is the name or key of a custom property in a"," * property template. File property names can be up to 256 bytes."," * @property {string} description - This is the description for a custom"," * property in a property template. File property description can be up to 1024"," * bytes."," * @property {PropertiesPropertyType} type - This is the data type of the value"," * of this property. This type will be enforced upon property creation and"," * modifications."," */","","/**"," * Collection of custom properties in filled property templates."," * @typedef {Object} PropertiesPropertyGroup"," * @property {string} template_id - A unique identifier for a property template"," * type."," * @property {Array.<PropertiesPropertyField>} fields - This is a list of custom"," * properties associated with a file. There can be up to 32 properties for a"," * template."," */","","/**"," * Describes property templates that can be filled and associated with a file."," * @typedef {Object} PropertiesPropertyGroupTemplate"," * @property {string} name - A display name for the property template. Property"," * template names can be up to 256 bytes."," * @property {string} description - Description for new property template."," * Property template descriptions can be up to 1024 bytes."," * @property {Array.<PropertiesPropertyFieldTemplate>} fields - This is a list"," * of custom properties associated with a property template. There can be up to"," * 64 properties in a single property template."," */","","/**"," * @typedef {Object} PropertiesPropertyTemplateError"," * @property {string} [template_not_found] - Available if .tag is"," * template_not_found. Property template does not exist for given identifier."," * @property {('template_not_found'|'restricted_content'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Data type of the given property added. This endpoint is in beta and  only"," * properties of type strings is supported."," * @typedef {Object} PropertiesPropertyType"," * @property {('string'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Defines the access levels for collaborators."," * @typedef {Object} SharingAccessLevel"," * @property {('owner'|'editor'|'viewer'|'viewer_no_comment'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Who can change a shared folder's access control list (ACL). In other words,"," * who can add, remove, or change the privileges of members."," * @typedef {Object} SharingAclUpdatePolicy"," * @property {('owner'|'editors'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for add_file_member."," * @typedef {Object} SharingAddFileMemberArgs"," * @property {string} file - File to which to add members."," * @property {Array.<SharingMemberSelector>} members - Members to add. Note that"," * even an email address is given, this may result in a user being directy added"," * to the membership if that email is the user's main account email."," * @property {string} [custom_message] - Message to send to added members in"," * their invitation."," * @property {boolean} quiet - Whether added members should be notified via"," * device notifications of their invitation."," * @property {SharingAccessLevel} access_level - AccessLevel union object,"," * describing what access level we want to give new members."," * @property {boolean} add_message_as_comment - If the custom message should be"," * added as a comment on the file."," */","","/**"," * Errors for add_file_member."," * @typedef {Object} SharingAddFileMemberError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('user_error'|'access_error'|'rate_limit'|'invalid_comment'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingAddFolderMemberArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {Array.<SharingAddMember>} members - The intended list of members"," * to add.  Added members will receive invites to join the shared folder."," * @property {boolean} quiet - Whether added members should be notified via"," * email and device notifications of their invite."," * @property {string} [custom_message] - Optional message to display to added"," * members in their invitation."," */","","/**"," * @typedef {Object} SharingAddFolderMemberError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error. Unable to access shared folder."," * @property {SharingAddMemberSelectorError} [bad_member] - Available if .tag is"," * bad_member. :field:`AddFolderMemberArg.members` contains a bad invitation"," * recipient."," * @property {number} [too_many_members] - Available if .tag is"," * too_many_members. The value is the member limit that was reached."," * @property {number} [too_many_pending_invites] - Available if .tag is"," * too_many_pending_invites. The value is the pending invite limit that was"," * reached."," * @property {('access_error'|'email_unverified'|'bad_member'|'cant_share_outside_team'|'too_many_members'|'too_many_pending_invites'|'rate_limit'|'too_many_invitees'|'insufficient_plan'|'team_folder'|'no_permission'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * The member and type of access the member should have when added to a shared"," * folder."," * @typedef {Object} SharingAddMember"," * @property {SharingMemberSelector} member - The member to add to the shared"," * folder."," * @property {SharingAccessLevel} access_level - The access level to grant"," * member to the shared folder.  AccessLevel.owner is disallowed."," */","","/**"," * @typedef {Object} SharingAddMemberSelectorError"," * @property {string} [invalid_dropbox_id] - Available if .tag is"," * invalid_dropbox_id. The value is the ID that could not be identified."," * @property {string} [invalid_email] - Available if .tag is invalid_email. The"," * value is the e-email address that is malformed."," * @property {string} [unverified_dropbox_id] - Available if .tag is"," * unverified_dropbox_id. The value is the ID of the Dropbox user with an"," * unverified e-mail address.  Invite unverified users by e-mail address instead"," * of by their Dropbox ID."," * @property {('automatic_group'|'invalid_dropbox_id'|'invalid_email'|'unverified_dropbox_id'|'group_deleted'|'group_not_on_team'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for change_file_member_access."," * @typedef {Object} SharingChangeFileMemberAccessArgs"," * @property {string} file - File for which we are changing a member's access."," * @property {SharingMemberSelector} member - The member whose access we are"," * changing."," * @property {SharingAccessLevel} access_level - The new access level for the"," * member."," */","","/**"," * Metadata for a collection-based shared link."," * @typedef {Object} SharingCollectionLinkMetadata","@property {'collection'} [.tag] - Tag identifying this subtype variant. This","field is only present when needed to discriminate between multiple possible","subtypes."," * @property {string} url - URL of the shared link."," * @property {SharingVisibility} visibility - Who can access the link."," * @property {Timestamp} [expires] - Expiration time, if set. By default the"," * link won't expire."," */","","/**"," * @typedef {Object} SharingCreateSharedLinkArg"," * @property {string} path - The path to share."," * @property {boolean} short_url - Whether to return a shortened URL."," * @property {SharingPendingUploadMode} [pending_upload] - If it's okay to share"," * a path that does not yet exist, set this to either PendingUploadMode.file or"," * PendingUploadMode.folder to indicate whether to assume it's a file or folder."," */","","/**"," * @typedef {Object} SharingCreateSharedLinkError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingCreateSharedLinkWithSettingsArg"," * @property {string} path - The path to be shared by the shared link"," * @property {SharingSharedLinkSettings} [settings] - The requested settings for"," * the newly created shared link"," */","","/**"," * @typedef {Object} SharingCreateSharedLinkWithSettingsError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {SharingSharedLinkSettingsError} [settings_error] - Available if"," * .tag is settings_error. There is an error with the given settings"," * @property {('path'|'email_not_verified'|'shared_link_already_exists'|'settings_error'|'access_denied')} .tag - Tag identifying the union variant."," */","","/**"," * Sharing actions that may be taken on files."," * @typedef {Object} SharingFileAction"," * @property {('disable_viewer_info'|'edit_contents'|'enable_viewer_info'|'invite_viewer'|'invite_viewer_no_comment'|'unshare'|'relinquish_membership'|'share_link'|'create_link'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingFileErrorResult"," * @property {string} [file_not_found_error] - Available if .tag is"," * file_not_found_error. File specified by id was not found."," * @property {string} [invalid_file_action_error] - Available if .tag is"," * invalid_file_action_error. User does not have permission to take the"," * specified action on the file."," * @property {string} [permission_denied_error] - Available if .tag is"," * permission_denied_error. User does not have permission to access file"," * specified by file.Id."," * @property {('file_not_found_error'|'invalid_file_action_error'|'permission_denied_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * The metadata of a file shared link"," * @typedef {Object} SharingFileLinkMetadata","@property {'file'} [.tag] - Tag identifying this subtype variant. This field is","only present when needed to discriminate between multiple possible subtypes."," * @property {string} url - URL of the shared link."," * @property {string} name - The linked file name (including extension). This"," * never contains a slash."," * @property {SharingLinkPermissions} link_permissions - The link's access"," * permissions."," * @property {Timestamp} client_modified - The modification time set by the"," * desktop client when the file was added to Dropbox. Since this time is not"," * verified (the Dropbox server stores whatever the desktop client sends up),"," * this should only be used for display purposes (such as sorting) and not, for"," * example, to determine if a file has changed or not."," * @property {Timestamp} server_modified - The last time the file was modified"," * on Dropbox."," * @property {string} rev - A unique identifier for the current revision of a"," * file. This field is the same rev as elsewhere in the API and can be used to"," * detect changes and avoid conflicts."," * @property {number} size - The file size in bytes."," * @property {string} [id] - A unique identifier for the linked file."," * @property {Timestamp} [expires] - Expiration time, if set. By default the"," * link won't expire."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will only be present"," * only if the linked file is in the authenticated user's  dropbox."," * @property {SharingTeamMemberInfo} [team_member_info] - The team membership"," * information of the link's owner.  This field will only be present  if the"," * link's owner is a team member."," * @property {UsersTeam} [content_owner_team_info] - The team information of the"," * content's owner. This field will only be present if the content's owner is a"," * team member and the content's owner team is different from the link's owner"," * team."," */","","/**"," * @typedef {Object} SharingFileMemberActionError"," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error. Specified file was invalid or user does not have access."," * @property {SharingMemberAccessLevelResult} [no_explicit_access] - Available"," * if .tag is no_explicit_access. The action cannot be completed because the"," * target member does not have explicit access to the file. The return value is"," * the access that the member has to the file from a parent folder."," * @property {('invalid_member'|'no_permission'|'access_error'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingFileMemberActionIndividualResult"," * @property {SharingAccessLevel} [success] - Available if .tag is success."," * Member was successfully removed from this file. If AccessLevel is given, the"," * member still has access via a parent shared folder."," * @property {SharingFileMemberActionError} [member_error] - Available if .tag"," * is member_error. User was not able to perform this action."," * @property {('success'|'member_error')} .tag - Tag identifying the union variant."," */","","/**"," * Per-member result for add_file_member or change_file_member_access."," * @typedef {Object} SharingFileMemberActionResult"," * @property {SharingMemberSelector} member - One of specified input members."," * @property {SharingFileMemberActionIndividualResult} result - The outcome of"," * the action on this member."," */","","/**"," * @typedef {Object} SharingFileMemberRemoveActionResult"," * @property {SharingMemberAccessLevelResult} [success] - Available if .tag is"," * success. Member was successfully removed from this file."," * @property {SharingFileMemberActionError} [member_error] - Available if .tag"," * is member_error. User was not able to remove this member."," * @property {('success'|'member_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Whether the user is allowed to take the sharing action on the file."," * @typedef {Object} SharingFilePermission"," * @property {SharingFileAction} action - The action that the user may wish to"," * take on the file."," * @property {boolean} allow - True if the user is allowed to take the action."," * @property {SharingPermissionDeniedReason} [reason] - The reason why the user"," * is denied the permission. Not present if the action is allowed."," */","","/**"," * Actions that may be taken on shared folders."," * @typedef {Object} SharingFolderAction"," * @property {('change_options'|'disable_viewer_info'|'edit_contents'|'enable_viewer_info'|'invite_editor'|'invite_viewer'|'invite_viewer_no_comment'|'relinquish_membership'|'unmount'|'unshare'|'leave_a_copy'|'share_link'|'create_link'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * The metadata of a folder shared link"," * @typedef {Object} SharingFolderLinkMetadata","@property {'folder'} [.tag] - Tag identifying this subtype variant. This field","is only present when needed to discriminate between multiple possible subtypes."," * @property {string} url - URL of the shared link."," * @property {string} name - The linked file name (including extension). This"," * never contains a slash."," * @property {SharingLinkPermissions} link_permissions - The link's access"," * permissions."," * @property {string} [id] - A unique identifier for the linked file."," * @property {Timestamp} [expires] - Expiration time, if set. By default the"," * link won't expire."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will only be present"," * only if the linked file is in the authenticated user's  dropbox."," * @property {SharingTeamMemberInfo} [team_member_info] - The team membership"," * information of the link's owner.  This field will only be present  if the"," * link's owner is a team member."," * @property {UsersTeam} [content_owner_team_info] - The team information of the"," * content's owner. This field will only be present if the content's owner is a"," * team member and the content's owner team is different from the link's owner"," * team."," */","","/**"," * Whether the user is allowed to take the action on the shared folder."," * @typedef {Object} SharingFolderPermission"," * @property {SharingFolderAction} action - The action that the user may wish to"," * take on the folder."," * @property {boolean} allow - True if the user is allowed to take the action."," * @property {SharingPermissionDeniedReason} [reason] - The reason why the user"," * is denied the permission. Not present if the action is allowed, or if no"," * reason is available."," */","","/**"," * A set of policies governing membership and privileges for a shared folder."," * @typedef {Object} SharingFolderPolicy"," * @property {SharingAclUpdatePolicy} acl_update_policy - Who can add and remove"," * members from this shared folder."," * @property {SharingSharedLinkPolicy} shared_link_policy - Who links can be"," * shared with."," * @property {SharingMemberPolicy} [member_policy] - Who can be a member of this"," * shared folder, as set on the folder itself. The effective policy may differ"," * from this value if the team-wide policy is more restrictive. Present only if"," * the folder is owned by a team."," * @property {SharingMemberPolicy} [resolved_member_policy] - Who can be a"," * member of this shared folder, taking into account both the folder and the"," * team-wide policy. This value may differ from that of member_policy if the"," * team-wide policy is more restrictive than the folder policy. Present only if"," * the folder is owned by a team."," * @property {SharingViewerInfoPolicy} [viewer_info_policy] - Who can"," * enable/disable viewer info for this shared folder."," */","","/**"," * Arguments of get_file_metadata."," * @typedef {Object} SharingGetFileMetadataArg"," * @property {string} file - The file to query."," * @property {Array.<SharingFileAction>} [actions] - File actions to query."," */","","/**"," * Arguments of get_file_metadata/batch."," * @typedef {Object} SharingGetFileMetadataBatchArg"," * @property {Array.<Object>} files - The files to query."," * @property {Array.<SharingFileAction>} [actions] - File actions to query."," */","","/**"," * Per file results of get_file_metadata/batch."," * @typedef {Object} SharingGetFileMetadataBatchResult"," * @property {string} file - This is the input file identifier corresponding to"," * one of GetFileMetadataBatchArg.files."," * @property {SharingGetFileMetadataIndividualResult} result - The result for"," * this particular file."," */","","/**"," * Error result for get_file_metadata."," * @typedef {Object} SharingGetFileMetadataError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('user_error'|'access_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingGetFileMetadataIndividualResult"," * @property {SharingSharedFileMetadata} [metadata] - Available if .tag is"," * metadata. The result for this file if it was successful."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error. The result for this file if it was an error."," * @property {('metadata'|'access_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingGetMetadataArgs"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {Array.<SharingFolderAction>} [actions] - This is a list indicating"," * whether the returned folder data will include a boolean value"," * FolderPermission.allow that describes whether the current user can perform"," * the  FolderAction on the folder."," */","","/**"," * @typedef {Object} SharingGetSharedLinkFileError"," * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other'|'shared_link_is_directory')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingGetSharedLinkMetadataArg"," * @property {string} url - URL of the shared link."," * @property {string} [path] - If the shared link is to a folder, this parameter"," * can be used to retrieve the metadata for a specific file or sub-folder in"," * this folder. A relative path should be used."," * @property {string} [link_password] - If the shared link has a password, this"," * parameter can be used."," */","","/**"," * @typedef {Object} SharingGetSharedLinksArg"," * @property {string} [path] - See get_shared_links description."," */","","/**"," * @typedef {Object} SharingGetSharedLinksError"," * @property {string} [path] - Available if .tag is path."," * @property {('path'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingGetSharedLinksResult"," * @property"," * {Array.<(SharingPathLinkMetadata|SharingCollectionLinkMetadata|SharingLinkMetadata)>}"," * links - Shared links applicable to the path argument."," */","","/**"," * The information about a group. Groups is a way to manage a list of users  who"," * need same access permission to the shared folder."," * @typedef {Object} SharingGroupInfo"," * @property {string} group_name"," * @property {string} group_id"," * @property {TeamCommonGroupManagementType} group_management_type - Who is"," * allowed to manage the group."," * @property {TeamCommonGroupType} group_type - The type of group."," * @property {boolean} is_member - If the current user is a member of the group."," * @property {boolean} is_owner - If the current user is an owner of the group."," * @property {boolean} same_team - If the group is owned by the current user's"," * team."," * @property {string} [group_external_id] - External ID of group. This is an"," * arbitrary ID that an admin can attach to a group."," * @property {number} [member_count] - The number of members in the group."," */","","/**"," * The information about a group member of the shared content."," * @typedef {Object} SharingGroupMembershipInfo"," * @property {SharingAccessLevel} access_type - The access type for this member."," * @property {SharingGroupInfo} group - The information about the membership"," * group."," * @property {Array.<SharingMemberPermission>} [permissions] - The permissions"," * that requesting user has on this member. The set of permissions corresponds"," * to the MemberActions in the request."," * @property {string} [initials] - Suggested name initials for a member."," * @property {boolean} is_inherited - True if the member has access from a"," * parent folder."," */","","/**"," * @typedef {Object} SharingInsufficientQuotaAmounts"," * @property {number} space_needed - The amount of space needed to add the item"," * (the size of the item)."," * @property {number} space_shortage - The amount of extra space needed to add"," * the item."," * @property {number} space_left - The amount of space left in the user's"," * Dropbox, less than space_needed."," */","","/**"," * Information about the recipient of a shared content invitation."," * @typedef {Object} SharingInviteeInfo"," * @property {string} [email] - Available if .tag is email. E-mail address of"," * invited user."," * @property {('email'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information about an invited member of a shared content."," * @typedef {Object} SharingInviteeMembershipInfo"," * @property {SharingAccessLevel} access_type - The access type for this member."," * @property {SharingInviteeInfo} invitee - Recipient of the invitation."," * @property {Array.<SharingMemberPermission>} [permissions] - The permissions"," * that requesting user has on this member. The set of permissions corresponds"," * to the MemberActions in the request."," * @property {string} [initials] - Suggested name initials for a member."," * @property {boolean} is_inherited - True if the member has access from a"," * parent folder."," * @property {SharingUserInfo} [user] - The user this invitation is tied to, if"," * available."," */","","/**"," * Error occurred while performing an asynchronous job from unshare_folder or"," * remove_folder_member."," * @typedef {Object} SharingJobError"," * @property {SharingUnshareFolderError} [unshare_folder_error] - Available if"," * .tag is unshare_folder_error. Error occurred while performing"," * :route:`unshare_folder` action."," * @property {SharingRemoveFolderMemberError} [remove_folder_member_error] -"," * Available if .tag is remove_folder_member_error. Error occurred while"," * performing :route:`remove_folder_member` action."," * @property {SharingRelinquishFolderMembershipError}"," * [relinquish_folder_membership_error] - Available if .tag is"," * relinquish_folder_membership_error. Error occurred while performing"," * :route:`relinquish_folder_membership` action."," * @property {('unshare_folder_error'|'remove_folder_member_error'|'relinquish_folder_membership_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingJobStatus"," * @property {SharingJobError} [failed] - Available if .tag is failed. The"," * asynchronous job returned an error."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * Actions that can be performed on a link."," * @typedef {Object} SharingLinkAction"," * @property {('change_audience'|'remove_expiry'|'remove_password'|'set_expiry'|'set_password'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingLinkAudience"," * @property {('public'|'team'|'members'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingLinkExpiry"," * @property {Timestamp} [set_expiry] - Available if .tag is set_expiry. Set a"," * new expiry or change an existing expiry."," * @property {('remove_expiry'|'set_expiry'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Metadata for a shared link. This can be either a PathLinkMetadata or"," * CollectionLinkMetadata."," * @typedef {Object} SharingLinkMetadata","@property {(\"path\"|\"collection\")} .tag - Tag identifying the subtype variant."," * @property {string} url - URL of the shared link."," * @property {SharingVisibility} visibility - Who can access the link."," * @property {Timestamp} [expires] - Expiration time, if set. By default the"," * link won't expire."," */","","/**"," * @typedef {Object} SharingLinkPassword"," * @property {string} [set_password] - Available if .tag is set_password. Set a"," * new password or change an existing password."," * @property {('remove_password'|'set_password'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Permissions for actions that can be performed on a link."," * @typedef {Object} SharingLinkPermission"," * @property {SharingLinkAction} action"," * @property {boolean} allow"," * @property {SharingPermissionDeniedReason} [reason]"," */","","/**"," * @typedef {Object} SharingLinkPermissions"," * @property {boolean} can_revoke - Whether the caller can revoke the shared"," * link"," * @property {SharingResolvedVisibility} [resolved_visibility] - The current"," * visibility of the link after considering the shared links policies of the the"," * team (in case the link's owner is part of a team) and the shared folder (in"," * case the linked file is part of a shared folder). This field is shown only if"," * the caller has access to this info (the link's owner always has access to"," * this data)."," * @property {SharingRequestedVisibility} [requested_visibility] - The shared"," * link's requested visibility. This can be overridden by the team and shared"," * folder policies. The final visibility, after considering these policies, can"," * be found in resolved_visibility. This is shown only if the caller is the"," * link's owner."," * @property {SharingSharedLinkAccessFailureReason} [revoke_failure_reason] -"," * The failure reason for revoking the link. This field will only be present if"," * the can_revoke is false."," */","","/**"," * Settings that apply to a link."," * @typedef {Object} SharingLinkSettings"," * @property {SharingLinkAudience} [audience] - The type of audience on the link"," * for this file."," * @property {SharingLinkExpiry} [expiry] - An expiry timestamp to set on a"," * link."," * @property {SharingLinkPassword} [password] - The password for the link."," */","","/**"," * Arguments for list_file_members."," * @typedef {Object} SharingListFileMembersArg"," * @property {string} file - The file for which you want to see members."," * @property {Array.<SharingMemberAction>} [actions] - The actions for which to"," * return permissions on a member."," * @property {boolean} include_inherited - Whether to include members who only"," * have access from a parent shared folder."," * @property {number} limit - Number of members to return max per query."," * Defaults to 100 if no limit is specified."," */","","/**"," * Arguments for list_file_members/batch."," * @typedef {Object} SharingListFileMembersBatchArg"," * @property {Array.<Object>} files - Files for which to return members."," * @property {number} limit - Number of members to return max per query."," * Defaults to 10 if no limit is specified."," */","","/**"," * Per-file result for list_file_members/batch."," * @typedef {Object} SharingListFileMembersBatchResult"," * @property {string} file - This is the input file identifier, whether an ID or"," * a path."," * @property {SharingListFileMembersIndividualResult} result - The result for"," * this particular file."," */","","/**"," * Arguments for list_file_members/continue."," * @typedef {Object} SharingListFileMembersContinueArg"," * @property {string} cursor - The cursor returned by your last call to"," * list_file_members, list_file_members/continue, or list_file_members/batch."," */","","/**"," * Error for list_file_members/continue."," * @typedef {Object} SharingListFileMembersContinueError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('user_error'|'access_error'|'invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingListFileMembersCountResult"," * @property {SharingSharedFileMembers} members - A list of members on this"," * file."," * @property {number} member_count - The number of members on this file. This"," * does not include inherited members."," */","","/**"," * Error for list_file_members."," * @typedef {Object} SharingListFileMembersError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('user_error'|'access_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingListFileMembersIndividualResult"," * @property {SharingListFileMembersCountResult} [result] - Available if .tag is"," * result. The results of the query for this file if it was successful."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error. The result of the query for this file if it was an error."," * @property {('result'|'access_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for list_received_files."," * @typedef {Object} SharingListFilesArg"," * @property {number} limit - Number of files to return max per query. Defaults"," * to 100 if no limit is specified."," * @property {Array.<SharingFileAction>} [actions] - File actions to query."," */","","/**"," * Arguments for list_received_files/continue."," * @typedef {Object} SharingListFilesContinueArg"," * @property {string} cursor - Cursor in ListFilesResult.cursor."," */","","/**"," * Error results for list_received_files/continue."," * @typedef {Object} SharingListFilesContinueError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error. User account had a problem."," * @property {('user_error'|'invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Success results for list_received_files."," * @typedef {Object} SharingListFilesResult"," * @property {Array.<SharingSharedFileMetadata>} entries - Information about the"," * files shared with current user."," * @property {string} [cursor] - Cursor used to obtain additional shared files."," */","","/**"," * @typedef {Object} SharingListFolderMembersArgs"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {Array.<SharingMemberAction>} [actions] - This is a list indicating"," * whether each returned member will include a boolean value"," * MemberPermission.allow that describes whether the current user can perform"," * the MemberAction on the member."," * @property {number} limit - The maximum number of results that include"," * members, groups and invitees to return per request."," */","","/**"," * @typedef {Object} SharingListFolderMembersContinueArg"," * @property {string} cursor - The cursor returned by your last call to"," * list_folder_members or list_folder_members/continue."," */","","/**"," * @typedef {Object} SharingListFolderMembersContinueError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingListFolderMembersCursorArg"," * @property {Array.<SharingMemberAction>} [actions] - This is a list indicating"," * whether each returned member will include a boolean value"," * MemberPermission.allow that describes whether the current user can perform"," * the MemberAction on the member."," * @property {number} limit - The maximum number of results that include"," * members, groups and invitees to return per request."," */","","/**"," * @typedef {Object} SharingListFoldersArgs"," * @property {number} limit - The maximum number of results to return per"," * request."," * @property {Array.<SharingFolderAction>} [actions] - This is a list indicating"," * whether each returned folder data entry will include a boolean field"," * FolderPermission.allow that describes whether the current user can perform"," * the `FolderAction` on the folder."," */","","/**"," * @typedef {Object} SharingListFoldersContinueArg"," * @property {string} cursor - The cursor returned by the previous API call"," * specified in the endpoint description."," */","","/**"," * @typedef {Object} SharingListFoldersContinueError"," * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Result for list_folders or list_mountable_folders, depending on which"," * endpoint was requested. Unmounted shared folders can be identified by the"," * absence of SharedFolderMetadata.path_lower."," * @typedef {Object} SharingListFoldersResult"," * @property {Array.<SharingSharedFolderMetadata>} entries - List of all shared"," * folders the authenticated user has access to."," * @property {string} [cursor] - Present if there are additional shared folders"," * that have not been returned yet. Pass the cursor into the corresponding"," * continue endpoint (either list_folders/continue or"," * list_mountable_folders/continue) to list additional folders."," */","","/**"," * @typedef {Object} SharingListSharedLinksArg"," * @property {string} [path] - See list_shared_links description."," * @property {string} [cursor] - The cursor returned by your last call to"," * list_shared_links."," * @property {boolean} [direct_only] - See list_shared_links description."," */","","/**"," * @typedef {Object} SharingListSharedLinksError"," * @property {FilesLookupError} [path] - Available if .tag is path."," * @property {('path'|'reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingListSharedLinksResult"," * @property"," * {Array.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata)>}"," * links - Shared links applicable to the path argument."," * @property {boolean} has_more - Is true if there are additional shared links"," * that have not been returned yet. Pass the cursor into list_shared_links to"," * retrieve them."," * @property {string} [cursor] - Pass the cursor into list_shared_links to"," * obtain the additional links. Cursor is returned only if no path is given."," */","","/**"," * Contains information about a member's access level to content after an"," * operation."," * @typedef {Object} SharingMemberAccessLevelResult"," * @property {SharingAccessLevel} [access_level] - The member still has this"," * level of access to the content through a parent folder."," * @property {string} [warning] - A localized string with additional information"," * about why the user has this access level to the content."," * @property {Array.<SharingParentFolderAccessInfo>} [access_details] - The"," * parent folders that a member has access to. The field is present if the user"," * has access to the first parent folder where the member gains access."," */","","/**"," * Actions that may be taken on members of a shared folder."," * @typedef {Object} SharingMemberAction"," * @property {('leave_a_copy'|'make_editor'|'make_owner'|'make_viewer'|'make_viewer_no_comment'|'remove'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Whether the user is allowed to take the action on the associated member."," * @typedef {Object} SharingMemberPermission"," * @property {SharingMemberAction} action - The action that the user may wish to"," * take on the member."," * @property {boolean} allow - True if the user is allowed to take the action."," * @property {SharingPermissionDeniedReason} [reason] - The reason why the user"," * is denied the permission. Not present if the action is allowed."," */","","/**"," * Policy governing who can be a member of a shared folder. Only applicable to"," * folders owned by a user on a team."," * @typedef {Object} SharingMemberPolicy"," * @property {('team'|'anyone'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Includes different ways to identify a member of a shared folder."," * @typedef {Object} SharingMemberSelector"," * @property {string} [dropbox_id] - Available if .tag is dropbox_id. Dropbox"," * account, team member, or group ID of member."," * @property {string} [email] - Available if .tag is email. E-mail address of"," * member."," * @property {('dropbox_id'|'email'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * The information about a member of the shared content."," * @typedef {Object} SharingMembershipInfo"," * @property {SharingAccessLevel} access_type - The access type for this member."," * @property {Array.<SharingMemberPermission>} [permissions] - The permissions"," * that requesting user has on this member. The set of permissions corresponds"," * to the MemberActions in the request."," * @property {string} [initials] - Suggested name initials for a member."," * @property {boolean} is_inherited - True if the member has access from a"," * parent folder."," */","","/**"," * @typedef {Object} SharingModifySharedLinkSettingsArgs"," * @property {string} url - URL of the shared link to change its settings"," * @property {SharingSharedLinkSettings} settings - Set of settings for the"," * shared link."," * @property {boolean} remove_expiration - If set to true, removes the"," * expiration of the shared link."," */","","/**"," * @typedef {Object} SharingModifySharedLinkSettingsError"," * @property {SharingSharedLinkSettingsError} [settings_error] - Available if"," * .tag is settings_error. There is an error with the given settings"," * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other'|'settings_error'|'email_not_verified')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingMountFolderArg"," * @property {string} shared_folder_id - The ID of the shared folder to mount."," */","","/**"," * @typedef {Object} SharingMountFolderError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {SharingInsufficientQuotaAmounts} [insufficient_quota] - Available"," * if .tag is insufficient_quota. The current user does not have enough space to"," * mount the shared folder."," * @property {('access_error'|'inside_shared_folder'|'insufficient_quota'|'already_mounted'|'no_permission'|'not_mountable'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Contains information about a parent folder that a member has access to."," * @typedef {Object} SharingParentFolderAccessInfo"," * @property {string} folder_name - Display name for the folder."," * @property {string} shared_folder_id - The identifier of the parent shared"," * folder."," * @property {Array.<SharingMemberPermission>} permissions - The user's"," * permissions for the parent shared folder."," */","","/**"," * Metadata for a path-based shared link."," * @typedef {Object} SharingPathLinkMetadata","@property {'path'} [.tag] - Tag identifying this subtype variant. This field is","only present when needed to discriminate between multiple possible subtypes."," * @property {string} url - URL of the shared link."," * @property {SharingVisibility} visibility - Who can access the link."," * @property {string} path - Path in user's Dropbox."," * @property {Timestamp} [expires] - Expiration time, if set. By default the"," * link won't expire."," */","","/**"," * Flag to indicate pending upload default (for linking to not-yet-existing"," * paths)."," * @typedef {Object} SharingPendingUploadMode"," * @property {('file'|'folder')} .tag - Tag identifying the union variant."," */","","/**"," * Possible reasons the user is denied a permission."," * @typedef {Object} SharingPermissionDeniedReason"," * @property {('user_not_same_team_as_owner'|'user_not_allowed_by_owner'|'target_is_indirect_member'|'target_is_owner'|'target_is_self'|'target_not_active'|'folder_is_limited_team_folder'|'owner_not_on_team'|'permission_denied'|'restricted_by_team'|'user_account_type'|'user_not_on_team'|'folder_is_inside_shared_folder'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingRelinquishFileMembershipArg"," * @property {string} file - The path or id for the file."," */","","/**"," * @typedef {Object} SharingRelinquishFileMembershipError"," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'group_access'|'no_permission'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingRelinquishFolderMembershipArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {boolean} leave_a_copy - Keep a copy of the folder's contents upon"," * relinquishing membership."," */","","/**"," * @typedef {Object} SharingRelinquishFolderMembershipError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'folder_owner'|'mounted'|'group_access'|'team_folder'|'no_permission'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for remove_file_member_2."," * @typedef {Object} SharingRemoveFileMemberArg"," * @property {string} file - File from which to remove members."," * @property {SharingMemberSelector} member - Member to remove from this file."," * Note that even if an email is specified, it may result in the removal of a"," * user (not an invitee) if the user's main account corresponds to that email"," * address."," */","","/**"," * Errors for remove_file_member_2."," * @typedef {Object} SharingRemoveFileMemberError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {SharingMemberAccessLevelResult} [no_explicit_access] - Available"," * if .tag is no_explicit_access. This member does not have explicit access to"," * the file and therefore cannot be removed. The return value is the access that"," * a user might have to the file from a parent folder."," * @property {('user_error'|'access_error'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingRemoveFolderMemberArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {SharingMemberSelector} member - The member to remove from the"," * folder."," * @property {boolean} leave_a_copy - If true, the removed user will keep their"," * copy of the folder after it's unshared, assuming it was mounted. Otherwise,"," * it will be removed from their Dropbox. Also, this must be set to false when"," * kicking a group."," */","","/**"," * @typedef {Object} SharingRemoveFolderMemberError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {SharingSharedFolderMemberError} [member_error] - Available if .tag"," * is member_error."," * @property {('access_error'|'member_error'|'folder_owner'|'group_access'|'team_folder'|'no_permission'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingRemoveMemberJobStatus"," * @property {SharingMemberAccessLevelResult} [complete] - Available if .tag is"," * complete. Removing the folder member has finished. The value is information"," * about whether the member has another form of access."," * @property {SharingRemoveFolderMemberError} [failed] - Available if .tag is"," * failed."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * The access permission that can be requested by the caller for the shared"," * link. Note that the final resolved visibility of the shared link takes into"," * account other aspects, such as team and shared folder settings. Check the"," * ResolvedVisibility for more info on the possible resolved visibility values"," * of shared links."," * @typedef {Object} SharingRequestedVisibility"," * @property {('public'|'team_only'|'password')} .tag - Tag identifying the union variant."," */","","/**"," * The actual access permissions values of shared links after taking into"," * account user preferences and the team and shared folder settings. Check the"," * RequestedVisibility for more info on the possible visibility values that can"," * be set by the shared link's owner."," * @typedef {Object} SharingResolvedVisibility"," * @property {('public'|'team_only'|'password'|'team_and_password'|'shared_folder_only'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingRevokeSharedLinkArg"," * @property {string} url - URL of the shared link."," */","","/**"," * @typedef {Object} SharingRevokeSharedLinkError"," * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other'|'shared_link_malformed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingShareFolderArg"," * @property {string} path - The path to the folder to share. If it does not"," * exist, then a new one is created."," * @property {SharingMemberPolicy} [member_policy] - Who can be a member of this"," * shared folder. Only applicable if the current user is on a team."," * @property {SharingAclUpdatePolicy} [acl_update_policy] - Who can add and"," * remove members of this shared folder."," * @property {SharingSharedLinkPolicy} [shared_link_policy] - The policy to"," * apply to shared links created for content inside this shared folder.  The"," * current user must be on a team to set this policy to"," * SharedLinkPolicy.members."," * @property {boolean} force_async - Whether to force the share to happen"," * asynchronously."," * @property {Array.<SharingFolderAction>} [actions] - This is a list indicating"," * whether each returned folder data entry will include a boolean field"," * FolderPermission.allow that describes whether the current user can perform"," * the `FolderAction` on the folder."," * @property {SharingLinkSettings} [link_settings] - Settings on the link for"," * this folder."," * @property {SharingViewerInfoPolicy} [viewer_info_policy] - Who can"," * enable/disable viewer info for this shared folder."," */","","/**"," * @typedef {Object} SharingShareFolderError"," * @property {SharingSharePathError} [bad_path] - Available if .tag is bad_path."," * :field:`ShareFolderArg.path` is invalid."," * @property {('email_unverified'|'bad_path'|'team_policy_disallows_member_policy'|'disallowed_shared_link_policy'|'other'|'no_permission')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingShareFolderErrorBase"," * @property {SharingSharePathError} [bad_path] - Available if .tag is bad_path."," * :field:`ShareFolderArg.path` is invalid."," * @property {('email_unverified'|'bad_path'|'team_policy_disallows_member_policy'|'disallowed_shared_link_policy'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingShareFolderJobStatus"," * @property {SharingSharedFolderMetadata} [complete] - Available if .tag is"," * complete. The share job has finished. The value is the metadata for the"," * folder."," * @property {SharingShareFolderError} [failed] - Available if .tag is failed."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingShareFolderLaunch"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {SharingSharedFolderMetadata} [complete] - Available if .tag is"," * complete."," * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingSharePathError"," * @property {SharingSharedFolderMetadata} [already_shared] - Available if .tag"," * is already_shared. Folder is already shared. Contains metadata about the"," * existing shared folder."," * @property {FilesPathRootError} [invalid_path_root] - Available if .tag is"," * invalid_path_root. The path root parameter provided is invalid."," * @property {('is_file'|'inside_shared_folder'|'contains_shared_folder'|'contains_app_folder'|'contains_team_folder'|'is_app_folder'|'inside_app_folder'|'is_public_folder'|'inside_public_folder'|'already_shared'|'invalid_path'|'is_osx_package'|'inside_osx_package'|'invalid_path_root'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Metadata of a shared link for a file or folder."," * @typedef {Object} SharingSharedContentLinkMetadata"," * @property {Array.<SharingLinkAudience>} audience_options - The audience"," * options that are available for the content. Some audience options may be"," * unavailable. For example, team_only may be unavailable if the content is not"," * owned by a user on a team. The 'default' audience option is always available"," * if the user can modify link settings."," * @property {SharingLinkAudience} current_audience - The current audience of"," * the link."," * @property {Array.<SharingLinkPermission>} link_permissions - A list of"," * permissions for actions you can perform on the link."," * @property {boolean} password_protected - Whether the link is protected by a"," * password."," * @property {string} url - The URL of the link."," * @property {Timestamp} [expiry] - Whether the link has an expiry set on it. A"," * link with an expiry will have its  audience changed to members when the"," * expiry is reached."," */","","/**"," * @typedef {Object} SharingSharedContentLinkMetadataBase"," * @property {Array.<SharingLinkAudience>} audience_options - The audience"," * options that are available for the content. Some audience options may be"," * unavailable. For example, team_only may be unavailable if the content is not"," * owned by a user on a team. The 'default' audience option is always available"," * if the user can modify link settings."," * @property {SharingLinkAudience} current_audience - The current audience of"," * the link."," * @property {Array.<SharingLinkPermission>} link_permissions - A list of"," * permissions for actions you can perform on the link."," * @property {boolean} password_protected - Whether the link is protected by a"," * password."," * @property {Timestamp} [expiry] - Whether the link has an expiry set on it. A"," * link with an expiry will have its  audience changed to members when the"," * expiry is reached."," */","","/**"," * Shared file user, group, and invitee membership. Used for the results of"," * list_file_members and list_file_members/continue, and used as part of the"," * results for list_file_members/batch."," * @typedef {Object} SharingSharedFileMembers"," * @property {Array.<SharingUserMembershipInfo>} users - The list of user"," * members of the shared file."," * @property {Array.<SharingGroupMembershipInfo>} groups - The list of group"," * members of the shared file."," * @property {Array.<SharingInviteeMembershipInfo>} invitees - The list of"," * invited members of a file, but have not logged in and claimed this."," * @property {string} [cursor] - Present if there are additional shared file"," * members that have not been returned yet. Pass the cursor into"," * list_file_members/continue to list additional members."," */","","/**"," * Properties of the shared file."," * @typedef {Object} SharingSharedFileMetadata"," * @property {SharingFolderPolicy} policy - Policies governing this shared file."," * @property {string} preview_url - URL for displaying a web preview of the"," * shared file."," * @property {string} name - The name of this file."," * @property {string} id - The ID of the file."," * @property {SharingSharedContentLinkMetadata} [link_metadata] - The metadata"," * of the link associated for the file."," * @property {Array.<SharingFilePermission>} [permissions] - The sharing"," * permissions that requesting user has on this file. This corresponds to the"," * entries given in GetFileMetadataBatchArg.actions or"," * GetFileMetadataArg.actions."," * @property {UsersTeam} [owner_team] - The team that owns the file. This field"," * is not present if the file is not owned by a team."," * @property {string} [parent_shared_folder_id] - The ID of the parent shared"," * folder. This field is present only if the file is contained within a shared"," * folder."," * @property {string} [path_lower] - The lower-case full path of this file."," * Absent for unmounted files."," * @property {string} [path_display] - The cased path to be used for display"," * purposes only. In rare instances the casing will not correctly match the"," * user's filesystem, but this behavior will match the path provided in the Core"," * API v1. Absent for unmounted files."," * @property {Timestamp} [time_invited] - Timestamp indicating when the current"," * user was invited to this shared file. If the user was not invited to the"," * shared file, the timestamp will indicate when the user was invited to the"," * parent shared folder. This value may be absent."," */","","/**"," * There is an error accessing the shared folder."," * @typedef {Object} SharingSharedFolderAccessError"," * @property {('invalid_id'|'not_a_member'|'email_unverified'|'unmounted'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingSharedFolderMemberError"," * @property {SharingMemberAccessLevelResult} [no_explicit_access] - Available"," * if .tag is no_explicit_access. The target member only has inherited access to"," * the shared folder."," * @property {('invalid_dropbox_id'|'not_a_member'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Shared folder user and group membership."," * @typedef {Object} SharingSharedFolderMembers"," * @property {Array.<SharingUserMembershipInfo>} users - The list of user"," * members of the shared folder."," * @property {Array.<SharingGroupMembershipInfo>} groups - The list of group"," * members of the shared folder."," * @property {Array.<SharingInviteeMembershipInfo>} invitees - The list of"," * invitees to the shared folder."," * @property {string} [cursor] - Present if there are additional shared folder"," * members that have not been returned yet. Pass the cursor into"," * list_folder_members/continue to list additional members."," */","","/**"," * The metadata which includes basic information about the shared folder."," * @typedef {Object} SharingSharedFolderMetadata"," * @property {SharingAccessLevel} access_type - The current user's access level"," * for this shared folder."," * @property {boolean} is_inside_team_folder - Whether this folder is inside of"," * a team folder."," * @property {boolean} is_team_folder - Whether this folder is a team folder"," * https://www.dropbox.com/en/help/986."," * @property {string} name - The name of the this shared folder."," * @property {SharingFolderPolicy} policy - Policies governing this shared"," * folder."," * @property {string} preview_url - URL for displaying a web preview of the"," * shared folder."," * @property {string} shared_folder_id - The ID of the shared folder."," * @property {Timestamp} time_invited - Timestamp indicating when the current"," * user was invited to this shared folder."," * @property {UsersTeam} [owner_team] - The team that owns the folder. This"," * field is not present if the folder is not owned by a team."," * @property {string} [parent_shared_folder_id] - The ID of the parent shared"," * folder. This field is present only if the folder is contained within another"," * shared folder."," * @property {string} [path_lower] - The lower-cased full path of this shared"," * folder. Absent for unmounted folders."," * @property {SharingSharedContentLinkMetadata} [link_metadata] - The metadata"," * of the shared content link to this shared folder. Absent if there is no link"," * on the folder."," * @property {Array.<SharingFolderPermission>} [permissions] - Actions the"," * current user may perform on the folder and its contents. The set of"," * permissions corresponds to the FolderActions in the request."," */","","/**"," * Properties of the shared folder."," * @typedef {Object} SharingSharedFolderMetadataBase"," * @property {SharingAccessLevel} access_type - The current user's access level"," * for this shared folder."," * @property {boolean} is_inside_team_folder - Whether this folder is inside of"," * a team folder."," * @property {boolean} is_team_folder - Whether this folder is a team folder"," * https://www.dropbox.com/en/help/986."," * @property {UsersTeam} [owner_team] - The team that owns the folder. This"," * field is not present if the folder is not owned by a team."," * @property {string} [parent_shared_folder_id] - The ID of the parent shared"," * folder. This field is present only if the folder is contained within another"," * shared folder."," * @property {string} [path_lower] - The lower-cased full path of this shared"," * folder. Absent for unmounted folders."," */","","/**"," * @typedef {Object} SharingSharedLinkAccessFailureReason"," * @property {('login_required'|'email_verify_required'|'password_required'|'team_only'|'owner_only'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingSharedLinkError"," * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * The metadata of a shared link"," * @typedef {Object} SharingSharedLinkMetadata","@property {(\"file\"|\"folder\")} .tag - Tag identifying the subtype variant."," * @property {string} url - URL of the shared link."," * @property {string} name - The linked file name (including extension). This"," * never contains a slash."," * @property {SharingLinkPermissions} link_permissions - The link's access"," * permissions."," * @property {string} [id] - A unique identifier for the linked file."," * @property {Timestamp} [expires] - Expiration time, if set. By default the"," * link won't expire."," * @property {string} [path_lower] - The lowercased full path in the user's"," * Dropbox. This always starts with a slash. This field will only be present"," * only if the linked file is in the authenticated user's  dropbox."," * @property {SharingTeamMemberInfo} [team_member_info] - The team membership"," * information of the link's owner.  This field will only be present  if the"," * link's owner is a team member."," * @property {UsersTeam} [content_owner_team_info] - The team information of the"," * content's owner. This field will only be present if the content's owner is a"," * team member and the content's owner team is different from the link's owner"," * team."," */","","/**"," * Who can view shared links in this folder."," * @typedef {Object} SharingSharedLinkPolicy"," * @property {('anyone'|'team'|'members'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingSharedLinkSettings"," * @property {SharingRequestedVisibility} [requested_visibility] - The requested"," * access for this shared link."," * @property {string} [link_password] - If requested_visibility is"," * RequestedVisibility.password this is needed to specify the password to access"," * the link."," * @property {Timestamp} [expires] - Expiration time of the shared link. By"," * default the link won't expire."," */","","/**"," * @typedef {Object} SharingSharedLinkSettingsError"," * @property {('invalid_settings'|'not_authorized')} .tag - Tag identifying the union variant."," */","","/**"," * User could not access this file."," * @typedef {Object} SharingSharingFileAccessError"," * @property {('no_permission'|'invalid_file'|'is_folder'|'inside_public_folder'|'inside_osx_package'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * User account had a problem preventing this action."," * @typedef {Object} SharingSharingUserError"," * @property {('email_unverified'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information about a team member."," * @typedef {Object} SharingTeamMemberInfo"," * @property {UsersTeam} team_info - Information about the member's team"," * @property {string} display_name - The display name of the user."," * @property {string} [member_id] - ID of user as a member of a team. This field"," * will only be present if the member is in the same team as current user."," */","","/**"," * @typedef {Object} SharingTransferFolderArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {string} to_dropbox_id - A account or team member ID to transfer"," * ownership to."," */","","/**"," * @typedef {Object} SharingTransferFolderError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'invalid_dropbox_id'|'new_owner_not_a_member'|'new_owner_unmounted'|'new_owner_email_unverified'|'team_folder'|'no_permission'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingUnmountFolderArg"," * @property {string} shared_folder_id - The ID for the shared folder."," */","","/**"," * @typedef {Object} SharingUnmountFolderError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'no_permission'|'not_unmountable'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for unshare_file."," * @typedef {Object} SharingUnshareFileArg"," * @property {string} file - The file to unshare."," */","","/**"," * Error result for unshare_file."," * @typedef {Object} SharingUnshareFileError"," * @property {SharingSharingUserError} [user_error] - Available if .tag is"," * user_error."," * @property {SharingSharingFileAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('user_error'|'access_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} SharingUnshareFolderArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {boolean} leave_a_copy - If true, members of this shared folder"," * will get a copy of this folder after it's unshared. Otherwise, it will be"," * removed from their Dropbox. The current user, who is an owner, will always"," * retain their copy."," */","","/**"," * @typedef {Object} SharingUnshareFolderError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'team_folder'|'no_permission'|'too_many_files'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Arguments for update_file_member."," * @typedef {Object} SharingUpdateFileMemberArgs"," * @property {string} file - File for which we are changing a member's access."," * @property {SharingMemberSelector} member - The member whose access we are"," * changing."," * @property {SharingAccessLevel} access_level - The new access level for the"," * member."," */","","/**"," * @typedef {Object} SharingUpdateFolderMemberArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {SharingMemberSelector} member - The member of the shared folder to"," * update.  Only the MemberSelector.dropbox_id may be set at this time."," * @property {SharingAccessLevel} access_level - The new access level for"," * member. AccessLevel.owner is disallowed."," */","","/**"," * @typedef {Object} SharingUpdateFolderMemberError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {SharingSharedFolderMemberError} [member_error] - Available if .tag"," * is member_error."," * @property {SharingAddFolderMemberError} [no_explicit_access] - Available if"," * .tag is no_explicit_access. If updating the access type required the member"," * to be added to the shared folder and there was an error when adding the"," * member."," * @property {('access_error'|'member_error'|'no_explicit_access'|'insufficient_plan'|'no_permission'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * If any of the policies are unset, then they retain their current setting."," * @typedef {Object} SharingUpdateFolderPolicyArg"," * @property {string} shared_folder_id - The ID for the shared folder."," * @property {SharingMemberPolicy} [member_policy] - Who can be a member of this"," * shared folder. Only applicable if the current user is on a team."," * @property {SharingAclUpdatePolicy} [acl_update_policy] - Who can add and"," * remove members of this shared folder."," * @property {SharingViewerInfoPolicy} [viewer_info_policy] - Who can"," * enable/disable viewer info for this shared folder."," * @property {SharingSharedLinkPolicy} [shared_link_policy] - The policy to"," * apply to shared links created for content inside this shared folder. The"," * current user must be on a team to set this policy to"," * SharedLinkPolicy.members."," * @property {SharingLinkSettings} [link_settings] - Settings on the link for"," * this folder."," */","","/**"," * @typedef {Object} SharingUpdateFolderPolicyError"," * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag"," * is access_error."," * @property {('access_error'|'not_on_team'|'team_policy_disallows_member_policy'|'disallowed_shared_link_policy'|'no_permission'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Basic information about a user. Use users.get_account and"," * users.get_account_batch to obtain more detailed information."," * @typedef {Object} SharingUserInfo"," * @property {string} account_id - The account ID of the user."," * @property {boolean} same_team - If the user is in the same team as current"," * user."," * @property {string} [team_member_id] - The team member ID of the shared folder"," * member. Only present if same_team is true."," */","","/**"," * The information about a user member of the shared content."," * @typedef {Object} SharingUserMembershipInfo"," * @property {SharingAccessLevel} access_type - The access type for this member."," * @property {SharingUserInfo} user - The account information for the membership"," * user."," * @property {Array.<SharingMemberPermission>} [permissions] - The permissions"," * that requesting user has on this member. The set of permissions corresponds"," * to the MemberActions in the request."," * @property {string} [initials] - Suggested name initials for a member."," * @property {boolean} is_inherited - True if the member has access from a"," * parent folder."," */","","/**"," * @typedef {Object} SharingViewerInfoPolicy"," * @property {('enabled'|'disabled'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Who can access a shared link. The most open visibility is public. The default"," * depends on many aspects, such as team and user preferences and shared folder"," * settings."," * @typedef {Object} SharingVisibility"," * @property {('public'|'team_only'|'password'|'team_and_password'|'shared_folder_only'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information on active web sessions"," * @typedef {Object} TeamActiveWebSession"," * @property {string} session_id - The session id"," * @property {string} user_agent - Information on the hosting device"," * @property {string} os - Information on the hosting operating system"," * @property {string} browser - Information on the browser used for this web"," * session"," * @property {string} [ip_address] - The IP address of the last activity from"," * this session"," * @property {string} [country] - The country from which the last activity from"," * this session was made"," * @property {Timestamp} [created] - The time this session was created"," * @property {Timestamp} [updated] - The time of the last activity from this"," * session"," */","","/**"," * Arguments for adding property templates."," * @typedef {Object} TeamAddPropertyTemplateArg"," * @property {string} name - A display name for the property template. Property"," * template names can be up to 256 bytes."," * @property {string} description - Description for new property template."," * Property template descriptions can be up to 1024 bytes."," * @property {Array.<PropertiesPropertyFieldTemplate>} fields - This is a list"," * of custom properties associated with a property template. There can be up to"," * 64 properties in a single property template."," */","","/**"," * @typedef {Object} TeamAddPropertyTemplateResult"," * @property {string} template_id - An identifier for property template added by"," * properties/template/add."," */","","/**"," * Describes which team-related admin permissions a user has."," * @typedef {Object} TeamAdminTier"," * @property {('team_admin'|'user_management_admin'|'support_admin'|'member_only')} .tag - Tag identifying the union variant."," */","","/**"," * Information on linked third party applications"," * @typedef {Object} TeamApiApp"," * @property {string} app_id - The application unique id"," * @property {string} app_name - The application name"," * @property {boolean} is_app_folder - Whether the linked application uses a"," * dedicated folder"," * @property {string} [publisher] - The application publisher name"," * @property {string} [publisher_url] - The publisher's URL"," * @property {Timestamp} [linked] - The time this application was linked"," */","","/**"," * Base report structure."," * @typedef {Object} TeamBaseDfbReport"," * @property {string} start_date - First date present in the results as"," * 'YYYY-MM-DD' or None."," */","","/**"," * Base error that all errors for existing team folders should extend."," * @typedef {Object} TeamBaseTeamFolderError"," * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is"," * access_error."," * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if"," * .tag is status_error."," * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Input arguments that can be provided for most reports."," * @typedef {Object} TeamDateRange"," * @property {Timestamp} [start_date] - Optional starting date (inclusive)"," * @property {Timestamp} [end_date] - Optional ending date (exclusive)"," */","","/**"," * Errors that can originate from problems in input arguments to reports."," * @typedef {Object} TeamDateRangeError"," * @property {'other'} .tag - Tag identifying the union variant."," */","","/**"," * Information about linked Dropbox desktop client sessions"," * @typedef {Object} TeamDesktopClientSession"," * @property {string} session_id - The session id"," * @property {string} host_name - Name of the hosting desktop"," * @property {TeamDesktopPlatform} client_type - The Dropbox desktop client type"," * @property {string} client_version - The Dropbox client version"," * @property {string} platform - Information on the hosting platform"," * @property {boolean} is_delete_on_unlink_supported - Whether it's possible to"," * delete all of the account files upon unlinking"," * @property {string} [ip_address] - The IP address of the last activity from"," * this session"," * @property {string} [country] - The country from which the last activity from"," * this session was made"," * @property {Timestamp} [created] - The time this session was created"," * @property {Timestamp} [updated] - The time of the last activity from this"," * session"," */","","/**"," * @typedef {Object} TeamDesktopPlatform"," * @property {('windows'|'mac'|'linux'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamDeviceSession"," * @property {string} session_id - The session id"," * @property {string} [ip_address] - The IP address of the last activity from"," * this session"," * @property {string} [country] - The country from which the last activity from"," * this session was made"," * @property {Timestamp} [created] - The time this session was created"," * @property {Timestamp} [updated] - The time of the last activity from this"," * session"," */","","/**"," * @typedef {Object} TeamDeviceSessionArg"," * @property {string} session_id - The session id"," * @property {string} team_member_id - The unique id of the member owning the"," * device"," */","","/**"," * Each of the items is an array of values, one value per day. The value is the"," * number of devices active within a time window, ending with that day. If there"," * is no data for a day, then the value will be None."," * @typedef {Object} TeamDevicesActive"," * @property {Array.<Object>} windows - Array of number of linked windows"," * (desktop) clients with activity."," * @property {Array.<Object>} macos - Array of number of linked mac (desktop)"," * clients with activity."," * @property {Array.<Object>} linux - Array of number of linked linus (desktop)"," * clients with activity."," * @property {Array.<Object>} ios - Array of number of linked ios devices with"," * activity."," * @property {Array.<Object>} android - Array of number of linked android"," * devices with activity."," * @property {Array.<Object>} other - Array of number of other linked devices"," * (blackberry, windows phone, etc)  with activity."," * @property {Array.<Object>} total - Array of total number of linked clients"," * with activity."," */","","/**"," * Activity Report Result. Each of the items in the storage report is an array"," * of values, one value per day. If there is no data for a day, then the value"," * will be None."," * @typedef {Object} TeamGetActivityReport"," * @property {string} start_date - First date present in the results as"," * 'YYYY-MM-DD' or None."," * @property {Array.<Object>} adds - Array of total number of adds by team"," * members."," * @property {Array.<Object>} edits - Array of number of edits by team members."," * If the same user edits the same file multiple times this is counted as a"," * single edit."," * @property {Array.<Object>} deletes - Array of total number of deletes by team"," * members."," * @property {Array.<Object>} active_users_28_day - Array of the number of users"," * who have been active in the last 28 days."," * @property {Array.<Object>} active_users_7_day - Array of the number of users"," * who have been active in the last week."," * @property {Array.<Object>} active_users_1_day - Array of the number of users"," * who have been active in the last day."," * @property {Array.<Object>} active_shared_folders_28_day - Array of the number"," * of shared folders with some activity in the last 28 days."," * @property {Array.<Object>} active_shared_folders_7_day - Array of the number"," * of shared folders with some activity in the last week."," * @property {Array.<Object>} active_shared_folders_1_day - Array of the number"," * of shared folders with some activity in the last day."," * @property {Array.<Object>} shared_links_created - Array of the number of"," * shared links created."," * @property {Array.<Object>} shared_links_viewed_by_team - Array of the number"," * of views by team users to shared links created by the team."," * @property {Array.<Object>} shared_links_viewed_by_outside_user - Array of the"," * number of views by users outside of the team to shared links created by the"," * team."," * @property {Array.<Object>} shared_links_viewed_by_not_logged_in - Array of"," * the number of views by non-logged-in users to shared links created by the"," * team."," * @property {Array.<Object>} shared_links_viewed_total - Array of the total"," * number of views to shared links created by the team."," */","","/**"," * Devices Report Result. Contains subsections for different time ranges of"," * activity. Each of the items in each subsection of the storage report is an"," * array of values, one value per day. If there is no data for a day, then the"," * value will be None."," * @typedef {Object} TeamGetDevicesReport"," * @property {string} start_date - First date present in the results as"," * 'YYYY-MM-DD' or None."," * @property {TeamDevicesActive} active_1_day - Report of the number of devices"," * active in the last day."," * @property {TeamDevicesActive} active_7_day - Report of the number of devices"," * active in the last 7 days."," * @property {TeamDevicesActive} active_28_day - Report of the number of devices"," * active in the last 28 days."," */","","/**"," * Membership Report Result. Each of the items in the storage report is an array"," * of values, one value per day. If there is no data for a day, then the value"," * will be None."," * @typedef {Object} TeamGetMembershipReport"," * @property {string} start_date - First date present in the results as"," * 'YYYY-MM-DD' or None."," * @property {Array.<Object>} team_size - Team size, for each day."," * @property {Array.<Object>} pending_invites - The number of pending invites to"," * the team, for each day."," * @property {Array.<Object>} members_joined - The number of members that joined"," * the team, for each day."," * @property {Array.<Object>} suspended_members - The number of suspended team"," * members, for each day."," * @property {Array.<Object>} licenses - The total number of licenses the team"," * has, for each day."," */","","/**"," * Storage Report Result. Each of the items in the storage report is an array of"," * values, one value per day. If there is no data for a day, then the value will"," * be None."," * @typedef {Object} TeamGetStorageReport"," * @property {string} start_date - First date present in the results as"," * 'YYYY-MM-DD' or None."," * @property {Array.<Object>} total_usage - Sum of the shared, unshared, and"," * datastore usages, for each day."," * @property {Array.<Object>} shared_usage - Array of the combined size (bytes)"," * of team members' shared folders, for each day."," * @property {Array.<Object>} unshared_usage - Array of the combined size"," * (bytes) of team members' root namespaces, for each day."," * @property {Array.<Object>} shared_folders - Array of the number of shared"," * folders owned by team members, for each day."," * @property {Array.<Array.<TeamStorageBucket>>} member_storage_map - Array of"," * storage summaries of team members' account sizes. Each storage summary is an"," * array of key, value pairs, where each pair describes a storage bucket. The"," * key indicates the upper bound of the bucket and the value is the number of"," * users in that bucket. There is one such summary per day. If there is no data"," * for a day, the storage summary will be empty."," */","","/**"," * Role of a user in group."," * @typedef {Object} TeamGroupAccessType"," * @property {('member'|'owner')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupCreateArg"," * @property {string} group_name - Group name."," * @property {string} [group_external_id] - The creator of a team can associate"," * an arbitrary external ID to the group."," * @property {TeamCommonGroupManagementType} [group_management_type] - Whether"," * the team can be managed by selected users, or only by team admins."," */","","/**"," * @typedef {Object} TeamGroupCreateError"," * @property {('group_name_already_used'|'group_name_invalid'|'external_id_already_in_use'|'system_managed_group_disallowed'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupDeleteError"," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'group_already_deleted')} .tag - Tag identifying the union variant."," */","","/**"," * Full description of a group."," * @typedef {Object} TeamGroupFullInfo"," * @property {string} group_name"," * @property {string} group_id"," * @property {TeamCommonGroupManagementType} group_management_type - Who is"," * allowed to manage the group."," * @property {number} created - The group creation time as a UTC timestamp in"," * milliseconds since the Unix epoch."," * @property {string} [group_external_id] - External ID of group. This is an"," * arbitrary ID that an admin can attach to a group."," * @property {number} [member_count] - The number of members in the group."," * @property {Array.<TeamGroupMemberInfo>} [members] - List of group members."," */","","/**"," * Profile of group member, and role in group."," * @typedef {Object} TeamGroupMemberInfo"," * @property {TeamMemberProfile} profile - Profile of group member."," * @property {TeamGroupAccessType} access_type - The role that the user has in"," * the group."," */","","/**"," * Argument for selecting a group and a single user."," * @typedef {Object} TeamGroupMemberSelector"," * @property {TeamGroupSelector} group - Specify a group."," * @property {TeamUserSelectorArg} user - Identity of a user that is a member of"," * group."," */","","/**"," * Error that can be raised when GroupMemberSelector is used, and the user is"," * required to be a member of the specified group."," * @typedef {Object} TeamGroupMemberSelectorError"," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'member_not_in_group')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupMemberSetAccessTypeError"," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'member_not_in_group'|'user_cannot_be_manager_of_company_managed_group')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupMembersAddArg"," * @property {TeamGroupSelector} group - Group to which users will be added."," * @property {Array.<TeamMemberAccess>} members - List of users to be added to"," * the group."," * @property {boolean} return_members - Whether to return the list of members in"," * the group.  Note that the default value will cause all the group members  to"," * be returned in the response. This may take a long time for large groups."," */","","/**"," * @typedef {Object} TeamGroupMembersAddError"," * @property {Array.<string>} [members_not_in_team] - Available if .tag is"," * members_not_in_team. These members are not part of your team. Currently, you"," * cannot add members to a group if they are not part of your team, though this"," * may change in a subsequent version. To add new members to your Dropbox"," * Business team, use the :route:`members/add` endpoint."," * @property {Array.<string>} [users_not_found] - Available if .tag is"," * users_not_found. These users were not found in Dropbox."," * @property {Array.<string>} [user_cannot_be_manager_of_company_managed_group]"," * - Available if .tag is user_cannot_be_manager_of_company_managed_group. A"," * company-managed group cannot be managed by a user."," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'duplicate_user'|'group_not_in_team'|'members_not_in_team'|'users_not_found'|'user_must_be_active_to_be_owner'|'user_cannot_be_manager_of_company_managed_group')} .tag - Tag identifying the union variant."," */","","/**"," * Result returned by groups/members/add and groups/members/remove."," * @typedef {Object} TeamGroupMembersChangeResult"," * @property {TeamGroupFullInfo} group_info - The group info after member change"," * operation has been performed."," * @property {string} async_job_id - An ID that can be used to obtain the status"," * of granting/revoking group-owned resources."," */","","/**"," * @typedef {Object} TeamGroupMembersRemoveArg"," * @property {TeamGroupSelector} group - Group from which users will be removed."," * @property {Array.<TeamUserSelectorArg>} users - List of users to be removed"," * from the group."," * @property {boolean} return_members - Whether to return the list of members in"," * the group.  Note that the default value will cause all the group members  to"," * be returned in the response. This may take a long time for large groups."," */","","/**"," * @typedef {Object} TeamGroupMembersRemoveError"," * @property {Array.<string>} [members_not_in_team] - Available if .tag is"," * members_not_in_team. These members are not part of your team."," * @property {Array.<string>} [users_not_found] - Available if .tag is"," * users_not_found. These users were not found in Dropbox."," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'member_not_in_group'|'group_not_in_team'|'members_not_in_team'|'users_not_found')} .tag - Tag identifying the union variant."," */","","/**"," * Argument for selecting a group and a list of users."," * @typedef {Object} TeamGroupMembersSelector"," * @property {TeamGroupSelector} group - Specify a group."," * @property {TeamUsersSelectorArg} users - A list of users that are members of"," * group."," */","","/**"," * Error that can be raised when GroupMembersSelector is used, and the users are"," * required to be members of the specified group."," * @typedef {Object} TeamGroupMembersSelectorError"," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'member_not_in_group')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupMembersSetAccessTypeArg"," * @property {TeamGroupSelector} group - Specify a group."," * @property {TeamUserSelectorArg} user - Identity of a user that is a member of"," * group."," * @property {TeamGroupAccessType} access_type - New group access type the user"," * will have."," * @property {boolean} return_members - Whether to return the list of members in"," * the group.  Note that the default value will cause all the group members  to"," * be returned in the response. This may take a long time for large groups."," */","","/**"," * Argument for selecting a single group, either by group_id or by external"," * group ID."," * @typedef {Object} TeamGroupSelector"," * @property {string} [group_id] - Available if .tag is group_id. Group ID."," * @property {string} [group_external_id] - Available if .tag is"," * group_external_id. External ID of the group."," * @property {('group_id'|'group_external_id')} .tag - Tag identifying the union variant."," */","","/**"," * Error that can be raised when GroupSelector is used."," * @typedef {Object} TeamGroupSelectorError"," * @property {('group_not_found'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Error that can be raised when GroupSelector is used and team groups are"," * disallowed from being used."," * @typedef {Object} TeamGroupSelectorWithTeamGroupError"," * @property {('group_not_found'|'other'|'system_managed_group_disallowed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupUpdateArgs"," * @property {TeamGroupSelector} group - Specify a group."," * @property {boolean} return_members - Whether to return the list of members in"," * the group.  Note that the default value will cause all the group members  to"," * be returned in the response. This may take a long time for large groups."," * @property {string} [new_group_name] - Optional argument. Set group name to"," * this if provided."," * @property {string} [new_group_external_id] - Optional argument. New group"," * external ID. If the argument is None, the group's external_id won't be"," * updated. If the argument is empty string, the group's external id will be"," * cleared."," * @property {TeamCommonGroupManagementType} [new_group_management_type] - Set"," * new group management type, if provided."," */","","/**"," * @typedef {Object} TeamGroupUpdateError"," * @property {('group_not_found'|'other'|'system_managed_group_disallowed'|'group_name_already_used'|'group_name_invalid'|'external_id_already_in_use')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupsGetInfoError"," * @property {('group_not_on_team'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupsGetInfoItem"," * @property {string} [id_not_found] - Available if .tag is id_not_found. An ID"," * that was provided as a parameter to :route:`groups/get_info`, and did not"," * match a corresponding group. The ID can be a group ID, or an external ID,"," * depending on how the method was called."," * @property {TeamGroupFullInfo} [group_info] - Available if .tag is group_info."," * Info about a group."," * @property {('id_not_found'|'group_info')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupsListArg"," * @property {number} limit - Number of results to return per call."," */","","/**"," * @typedef {Object} TeamGroupsListContinueArg"," * @property {string} cursor - Indicates from what point to get the next set of"," * groups."," */","","/**"," * @typedef {Object} TeamGroupsListContinueError"," * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupsListResult"," * @property {Array.<TeamCommonGroupSummary>} groups"," * @property {string} cursor - Pass the cursor into groups/list/continue to"," * obtain the additional groups."," * @property {boolean} has_more - Is true if there are additional groups that"," * have not been returned yet. An additional call to groups/list/continue can"," * retrieve them."," */","","/**"," * @typedef {Object} TeamGroupsMembersListArg"," * @property {TeamGroupSelector} group - The group whose members are to be"," * listed."," * @property {number} limit - Number of results to return per call."," */","","/**"," * @typedef {Object} TeamGroupsMembersListContinueArg"," * @property {string} cursor - Indicates from what point to get the next set of"," * groups."," */","","/**"," * @typedef {Object} TeamGroupsMembersListContinueError"," * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamGroupsMembersListResult"," * @property {Array.<TeamGroupMemberInfo>} members"," * @property {string} cursor - Pass the cursor into groups/members/list/continue"," * to obtain additional group members."," * @property {boolean} has_more - Is true if there are additional group members"," * that have not been returned yet. An additional call to"," * groups/members/list/continue can retrieve them."," */","","/**"," * @typedef {Object} TeamGroupsPollError"," * @property {('invalid_async_job_id'|'internal_error'|'other'|'access_denied')} .tag - Tag identifying the union variant."," */","","/**"," * Argument for selecting a list of groups, either by group_ids, or external"," * group IDs."," * @typedef {Object} TeamGroupsSelector"," * @property {Array.<Object>} [group_ids] - Available if .tag is group_ids. List"," * of group IDs."," * @property {Array.<string>} [group_external_ids] - Available if .tag is"," * group_external_ids. List of external IDs of groups."," * @property {('group_ids'|'group_external_ids')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamIncludeMembersArg"," * @property {boolean} return_members - Whether to return the list of members in"," * the group.  Note that the default value will cause all the group members  to"," * be returned in the response. This may take a long time for large groups."," */","","/**"," * @typedef {Object} TeamListMemberAppsArg"," * @property {string} team_member_id - The team member id"," */","","/**"," * Error returned by linked_apps/list_member_linked_apps."," * @typedef {Object} TeamListMemberAppsError"," * @property {('member_not_found'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamListMemberAppsResult"," * @property {Array.<TeamApiApp>} linked_api_apps - List of third party"," * applications linked by this team member"," */","","/**"," * @typedef {Object} TeamListMemberDevicesArg"," * @property {string} team_member_id - The team's member id"," * @property {boolean} include_web_sessions - Whether to list web sessions of"," * the team's member"," * @property {boolean} include_desktop_clients - Whether to list linked desktop"," * devices of the team's member"," * @property {boolean} include_mobile_clients - Whether to list linked mobile"," * devices of the team's member"," */","","/**"," * @typedef {Object} TeamListMemberDevicesError"," * @property {('member_not_found'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamListMemberDevicesResult"," * @property {Array.<TeamActiveWebSession>} [active_web_sessions] - List of web"," * sessions made by this team member"," * @property {Array.<TeamDesktopClientSession>} [desktop_client_sessions] - List"," * of desktop clients used by this team member"," * @property {Array.<TeamMobileClientSession>} [mobile_client_sessions] - List"," * of mobile client used by this team member"," */","","/**"," * Arguments for linked_apps/list_members_linked_apps."," * @typedef {Object} TeamListMembersAppsArg"," * @property {string} [cursor] - At the first call to the"," * linked_apps/list_members_linked_apps the cursor shouldn't be passed. Then, if"," * the result of the call includes a cursor, the following requests should"," * include the received cursors in order to receive the next sub list of the"," * team applications"," */","","/**"," * Error returned by linked_apps/list_members_linked_apps"," * @typedef {Object} TeamListMembersAppsError"," * @property {('reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information returned by linked_apps/list_members_linked_apps."," * @typedef {Object} TeamListMembersAppsResult"," * @property {Array.<TeamMemberLinkedApps>} apps - The linked applications of"," * each member of the team"," * @property {boolean} has_more - If true, then there are more apps available."," * Pass the cursor to linked_apps/list_members_linked_apps to retrieve the rest."," * @property {string} [cursor] - Pass the cursor into"," * linked_apps/list_members_linked_apps to receive the next sub list of team's"," * applications."," */","","/**"," * @typedef {Object} TeamListMembersDevicesArg"," * @property {string} [cursor] - At the first call to the"," * devices/list_members_devices the cursor shouldn't be passed. Then, if the"," * result of the call includes a cursor, the following requests should include"," * the received cursors in order to receive the next sub list of team devices"," * @property {boolean} include_web_sessions - Whether to list web sessions of"," * the team members"," * @property {boolean} include_desktop_clients - Whether to list desktop clients"," * of the team members"," * @property {boolean} include_mobile_clients - Whether to list mobile clients"," * of the team members"," */","","/**"," * @typedef {Object} TeamListMembersDevicesError"," * @property {('reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamListMembersDevicesResult"," * @property {Array.<TeamMemberDevices>} devices - The devices of each member of"," * the team"," * @property {boolean} has_more - If true, then there are more devices"," * available. Pass the cursor to devices/list_members_devices to retrieve the"," * rest."," * @property {string} [cursor] - Pass the cursor into"," * devices/list_members_devices to receive the next sub list of team's devices."," */","","/**"," * Arguments for linked_apps/list_team_linked_apps."," * @typedef {Object} TeamListTeamAppsArg"," * @property {string} [cursor] - At the first call to the"," * linked_apps/list_team_linked_apps the cursor shouldn't be passed. Then, if"," * the result of the call includes a cursor, the following requests should"," * include the received cursors in order to receive the next sub list of the"," * team applications"," */","","/**"," * Error returned by linked_apps/list_team_linked_apps"," * @typedef {Object} TeamListTeamAppsError"," * @property {('reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information returned by linked_apps/list_team_linked_apps."," * @typedef {Object} TeamListTeamAppsResult"," * @property {Array.<TeamMemberLinkedApps>} apps - The linked applications of"," * each member of the team"," * @property {boolean} has_more - If true, then there are more apps available."," * Pass the cursor to linked_apps/list_team_linked_apps to retrieve the rest."," * @property {string} [cursor] - Pass the cursor into"," * linked_apps/list_team_linked_apps to receive the next sub list of team's"," * applications."," */","","/**"," * @typedef {Object} TeamListTeamDevicesArg"," * @property {string} [cursor] - At the first call to the"," * devices/list_team_devices the cursor shouldn't be passed. Then, if the result"," * of the call includes a cursor, the following requests should include the"," * received cursors in order to receive the next sub list of team devices"," * @property {boolean} include_web_sessions - Whether to list web sessions of"," * the team members"," * @property {boolean} include_desktop_clients - Whether to list desktop clients"," * of the team members"," * @property {boolean} include_mobile_clients - Whether to list mobile clients"," * of the team members"," */","","/**"," * @typedef {Object} TeamListTeamDevicesError"," * @property {('reset'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamListTeamDevicesResult"," * @property {Array.<TeamMemberDevices>} devices - The devices of each member of"," * the team"," * @property {boolean} has_more - If true, then there are more devices"," * available. Pass the cursor to devices/list_team_devices to retrieve the rest."," * @property {string} [cursor] - Pass the cursor into devices/list_team_devices"," * to receive the next sub list of team's devices."," */","","/**"," * Specify access type a member should have when joined to a group."," * @typedef {Object} TeamMemberAccess"," * @property {TeamUserSelectorArg} user - Identity of a user."," * @property {TeamGroupAccessType} access_type - Access type."," */","","/**"," * @typedef {Object} TeamMemberAddArg"," * @property {string} member_email"," * @property {string} member_given_name - Member's first name."," * @property {string} member_surname - Member's last name."," * @property {string} [member_external_id] - External ID for member."," * @property {string} [member_persistent_id] - Persistent ID for member. This"," * field is only available to teams using persistent ID SAML configuration."," * @property {boolean} send_welcome_email - Whether to send a welcome email to"," * the member. If send_welcome_email is false, no email invitation will be sent"," * to the user. This may be useful for apps using single sign-on (SSO) flows for"," * onboarding that want to handle announcements themselves."," * @property {TeamAdminTier} role"," */","","/**"," * Describes the result of attempting to add a single user to the team."," * 'success' is the only value indicating that a user was indeed added to the"," * team - the other values explain the type of failure that occurred, and"," * include the email of the user for which the operation has failed."," * @typedef {Object} TeamMemberAddResult"," * @property {TeamTeamMemberInfo} [success] - Available if .tag is success."," * Describes a user that was successfully added to the team."," * @property {string} [team_license_limit] - Available if .tag is"," * team_license_limit. Team is already full. The organization has no available"," * licenses."," * @property {string} [free_team_member_limit_reached] - Available if .tag is"," * free_team_member_limit_reached. Team is already full. The free team member"," * limit has been reached."," * @property {string} [user_already_on_team] - Available if .tag is"," * user_already_on_team. User is already on this team. The provided email"," * address is associated with a user who is already a member of (including in"," * recoverable state) or invited to the team."," * @property {string} [user_on_another_team] - Available if .tag is"," * user_on_another_team. User is already on another team. The provided email"," * address is associated with a user that is already a member or invited to"," * another team."," * @property {string} [user_already_paired] - Available if .tag is"," * user_already_paired. User is already paired."," * @property {string} [user_migration_failed] - Available if .tag is"," * user_migration_failed. User migration has failed."," * @property {string} [duplicate_external_member_id] - Available if .tag is"," * duplicate_external_member_id. A user with the given external member ID"," * already exists on the team (including in recoverable state)."," * @property {string} [duplicate_member_persistent_id] - Available if .tag is"," * duplicate_member_persistent_id. A user with the given persistent ID already"," * exists on the team (including in recoverable state)."," * @property {string} [persistent_id_disabled] - Available if .tag is"," * persistent_id_disabled. Persistent ID is only available to teams with"," * persistent ID SAML configuration. Please contact Dropbox for more"," * information."," * @property {string} [user_creation_failed] - Available if .tag is"," * user_creation_failed. User creation has failed."," * @property {('success'|'team_license_limit'|'free_team_member_limit_reached'|'user_already_on_team'|'user_on_another_team'|'user_already_paired'|'user_migration_failed'|'duplicate_external_member_id'|'duplicate_member_persistent_id'|'persistent_id_disabled'|'user_creation_failed')} .tag - Tag identifying the union variant."," */","","/**"," * Information on devices of a team's member."," * @typedef {Object} TeamMemberDevices"," * @property {string} team_member_id - The member unique Id"," * @property {Array.<TeamActiveWebSession>} [web_sessions] - List of web"," * sessions made by this team member"," * @property {Array.<TeamDesktopClientSession>} [desktop_clients] - List of"," * desktop clients by this team member"," * @property {Array.<TeamMobileClientSession>} [mobile_clients] - List of mobile"," * clients by this team member"," */","","/**"," * Information on linked applications of a team member."," * @typedef {Object} TeamMemberLinkedApps"," * @property {string} team_member_id - The member unique Id"," * @property {Array.<TeamApiApp>} linked_api_apps - List of third party"," * applications linked by this team member"," */","","/**"," * Basic member profile."," * @typedef {Object} TeamMemberProfile"," * @property {string} team_member_id - ID of user as a member of a team."," * @property {string} email - Email address of user."," * @property {boolean} email_verified - Is true if the user's email is verified"," * to be owned by the user."," * @property {TeamTeamMemberStatus} status - The user's status as a member of a"," * specific team."," * @property {UsersName} name - Representations for a person's name."," * @property {TeamTeamMembershipType} membership_type - The user's membership"," * type: full (normal team member) vs limited (does not use a license; no access"," * to the team's shared quota)."," * @property {string} [external_id] - External ID that a team can attach to the"," * user. An application using the API may find it easier to use their own IDs"," * instead of Dropbox IDs like account_id or team_member_id."," * @property {string} [account_id] - A user's account identifier."," * @property {Timestamp} [joined_on] - The date and time the user joined as a"," * member of a specific team."," * @property {string} [persistent_id] - Persistent ID that a team can attach to"," * the user. The persistent ID is unique ID to be used for SAML authentication."," */","","/**"," * @typedef {Object} TeamMemberSelectorError"," * @property {('user_not_found'|'user_not_in_team')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersAddArg"," * @property {Array.<TeamMemberAddArg>} new_members - Details of new members to"," * be added to the team."," * @property {boolean} force_async - Whether to force the add to happen"," * asynchronously."," */","","/**"," * @typedef {Object} TeamMembersAddJobStatus"," * @property {Array.<TeamMemberAddResult>} [complete] - Available if .tag is"," * complete. The asynchronous job has finished. For each member that was"," * specified in the parameter :type:`MembersAddArg` that was provided to"," * :route:`members/add`, a corresponding item is returned in this list."," * @property {string} [failed] - Available if .tag is failed. The asynchronous"," * job returned an error. The string contains an error message."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersAddLaunch"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {Array.<TeamMemberAddResult>} [complete] - Available if .tag is"," * complete."," * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * Exactly one of team_member_id, email, or external_id must be provided to"," * identify the user account."," * @typedef {Object} TeamMembersDeactivateArg"," * @property {TeamUserSelectorArg} user - Identity of user to remove/suspend."," * @property {boolean} wipe_data - If provided, controls if the user's data will"," * be deleted on their linked devices."," */","","/**"," * @typedef {Object} TeamMembersDeactivateError"," * @property {('user_not_found'|'user_not_in_team'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersGetInfoArgs"," * @property {Array.<TeamUserSelectorArg>} members - List of team members."," */","","/**"," * @typedef {Object} TeamMembersGetInfoError"," * @property {'other'} .tag - Tag identifying the union variant."," */","","/**"," * Describes a result obtained for a single user whose id was specified in the"," * parameter of members/get_info."," * @typedef {Object} TeamMembersGetInfoItem"," * @property {string} [id_not_found] - Available if .tag is id_not_found. An ID"," * that was provided as a parameter to :route:`members/get_info`, and did not"," * match a corresponding user. This might be a team_member_id, an email, or an"," * external ID, depending on how the method was called."," * @property {TeamTeamMemberInfo} [member_info] - Available if .tag is"," * member_info. Info about a team member."," * @property {('id_not_found'|'member_info')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersListArg"," * @property {number} limit - Number of results to return per call."," * @property {boolean} include_removed - Whether to return removed members."," */","","/**"," * @typedef {Object} TeamMembersListContinueArg"," * @property {string} cursor - Indicates from what point to get the next set of"," * members."," */","","/**"," * @typedef {Object} TeamMembersListContinueError"," * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersListError"," * @property {'other'} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersListResult"," * @property {Array.<TeamTeamMemberInfo>} members - List of team members."," * @property {string} cursor - Pass the cursor into members/list/continue to"," * obtain the additional members."," * @property {boolean} has_more - Is true if there are additional team members"," * that have not been returned yet. An additional call to members/list/continue"," * can retrieve them."," */","","/**"," * Exactly one of team_member_id, email, or external_id must be provided to"," * identify the user account."," * @typedef {Object} TeamMembersRecoverArg"," * @property {TeamUserSelectorArg} user - Identity of user to recover."," */","","/**"," * @typedef {Object} TeamMembersRecoverError"," * @property {('user_not_found'|'user_unrecoverable'|'user_not_in_team'|'team_license_limit'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersRemoveArg"," * @property {TeamUserSelectorArg} user - Identity of user to remove/suspend."," * @property {boolean} wipe_data - If provided, controls if the user's data will"," * be deleted on their linked devices."," * @property {TeamUserSelectorArg} [transfer_dest_id] - If provided, files from"," * the deleted member account will be transferred to this user."," * @property {TeamUserSelectorArg} [transfer_admin_id] - If provided, errors"," * during the transfer process will be sent via email to this user. If the"," * transfer_dest_id argument was provided, then this argument must be provided"," * as well."," * @property {boolean} keep_account - Downgrade the member to a Basic account."," * The user will retain the email address associated with their Dropbox  account"," * and data in their account that is not restricted to team members. In order to"," * keep the account the argument wipe_data should be set to False."," */","","/**"," * @typedef {Object} TeamMembersRemoveError"," * @property {('user_not_found'|'user_not_in_team'|'other'|'remove_last_admin'|'removed_and_transfer_dest_should_differ'|'removed_and_transfer_admin_should_differ'|'transfer_dest_user_not_found'|'transfer_dest_user_not_in_team'|'transfer_admin_user_not_found'|'transfer_admin_user_not_in_team'|'unspecified_transfer_admin_id'|'transfer_admin_is_not_admin'|'cannot_keep_account_and_transfer'|'cannot_keep_account_and_delete_data'|'email_address_too_long_to_be_disabled')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersSendWelcomeError"," * @property {('user_not_found'|'user_not_in_team'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Exactly one of team_member_id, email, or external_id must be provided to"," * identify the user account."," * @typedef {Object} TeamMembersSetPermissionsArg"," * @property {TeamUserSelectorArg} user - Identity of user whose role will be"," * set."," * @property {TeamAdminTier} new_role - The new role of the member."," */","","/**"," * @typedef {Object} TeamMembersSetPermissionsError"," * @property {('user_not_found'|'last_admin'|'user_not_in_team'|'cannot_set_permissions'|'team_license_limit'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersSetPermissionsResult"," * @property {string} team_member_id - The member ID of the user to which the"," * change was applied."," * @property {TeamAdminTier} role - The role after the change."," */","","/**"," * Exactly one of team_member_id, email, or external_id must be provided to"," * identify the user account. At least one of new_email, new_external_id,"," * new_given_name, and/or new_surname must be provided."," * @typedef {Object} TeamMembersSetProfileArg"," * @property {TeamUserSelectorArg} user - Identity of user whose profile will be"," * set."," * @property {string} [new_email] - New email for member."," * @property {string} [new_external_id] - New external ID for member."," * @property {string} [new_given_name] - New given name for member."," * @property {string} [new_surname] - New surname for member."," * @property {string} [new_persistent_id] - New persistent ID. This field only"," * available to teams using persistent ID SAML configuration."," */","","/**"," * @typedef {Object} TeamMembersSetProfileError"," * @property {('user_not_found'|'user_not_in_team'|'external_id_and_new_external_id_unsafe'|'no_new_data_specified'|'email_reserved_for_other_user'|'external_id_used_by_other_user'|'set_profile_disallowed'|'param_cannot_be_empty'|'persistent_id_disabled'|'persistent_id_used_by_other_user'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMembersSuspendError"," * @property {('user_not_found'|'user_not_in_team'|'other'|'suspend_inactive_user'|'suspend_last_admin'|'team_license_limit')} .tag - Tag identifying the union variant."," */","","/**"," * Exactly one of team_member_id, email, or external_id must be provided to"," * identify the user account."," * @typedef {Object} TeamMembersUnsuspendArg"," * @property {TeamUserSelectorArg} user - Identity of user to unsuspend."," */","","/**"," * @typedef {Object} TeamMembersUnsuspendError"," * @property {('user_not_found'|'user_not_in_team'|'other'|'unsuspend_non_suspended_member'|'team_license_limit')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamMobileClientPlatform"," * @property {('iphone'|'ipad'|'android'|'windows_phone'|'blackberry'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information about linked Dropbox mobile client sessions"," * @typedef {Object} TeamMobileClientSession"," * @property {string} session_id - The session id"," * @property {string} device_name - The device name"," * @property {TeamMobileClientPlatform} client_type - The mobile application"," * type"," * @property {string} [ip_address] - The IP address of the last activity from"," * this session"," * @property {string} [country] - The country from which the last activity from"," * this session was made"," * @property {Timestamp} [created] - The time this session was created"," * @property {Timestamp} [updated] - The time of the last activity from this"," * session"," * @property {string} [client_version] - The dropbox client version"," * @property {string} [os_version] - The hosting OS version"," * @property {string} [last_carrier] - last carrier used by the device"," */","","/**"," * @typedef {Object} TeamRemovedStatus"," * @property {boolean} is_recoverable - True if the removed team member is"," * recoverable"," */","","/**"," * @typedef {Object} TeamRevokeDesktopClientArg"," * @property {string} session_id - The session id"," * @property {string} team_member_id - The unique id of the member owning the"," * device"," * @property {boolean} delete_on_unlink - Whether to delete all files of the"," * account (this is possible only if supported by the desktop client and  will"," * be made the next time the client access the account)"," */","","/**"," * @typedef {Object} TeamRevokeDeviceSessionArg"," * @property {TeamDeviceSessionArg} [web_session] - Available if .tag is"," * web_session. End an active session"," * @property {TeamRevokeDesktopClientArg} [desktop_client] - Available if .tag"," * is desktop_client. Unlink a linked desktop device"," * @property {TeamDeviceSessionArg} [mobile_client] - Available if .tag is"," * mobile_client. Unlink a linked mobile device"," * @property {('web_session'|'desktop_client'|'mobile_client')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamRevokeDeviceSessionBatchArg"," * @property {Array.<TeamRevokeDeviceSessionArg>} revoke_devices"," */","","/**"," * @typedef {Object} TeamRevokeDeviceSessionBatchError"," * @property {'other'} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamRevokeDeviceSessionBatchResult"," * @property {Array.<TeamRevokeDeviceSessionStatus>} revoke_devices_status"," */","","/**"," * @typedef {Object} TeamRevokeDeviceSessionError"," * @property {('device_session_not_found'|'member_not_found'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamRevokeDeviceSessionStatus"," * @property {boolean} success - Result of the revoking request"," * @property {TeamRevokeDeviceSessionError} [error_type] - The error cause in"," * case of a failure"," */","","/**"," * @typedef {Object} TeamRevokeLinkedApiAppArg"," * @property {string} app_id - The application's unique id"," * @property {string} team_member_id - The unique id of the member owning the"," * device"," * @property {boolean} keep_app_folder - Whether to keep the application"," * dedicated folder (in case the application uses  one)"," */","","/**"," * @typedef {Object} TeamRevokeLinkedApiAppBatchArg"," * @property {Array.<TeamRevokeLinkedApiAppArg>} revoke_linked_app"," */","","/**"," * Error returned by linked_apps/revoke_linked_app_batch."," * @typedef {Object} TeamRevokeLinkedAppBatchError"," * @property {'other'} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamRevokeLinkedAppBatchResult"," * @property {Array.<TeamRevokeLinkedAppStatus>} revoke_linked_app_status"," */","","/**"," * Error returned by linked_apps/revoke_linked_app."," * @typedef {Object} TeamRevokeLinkedAppError"," * @property {('app_not_found'|'member_not_found'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamRevokeLinkedAppStatus"," * @property {boolean} success - Result of the revoking request"," * @property {TeamRevokeLinkedAppError} [error_type] - The error cause in case"," * of a failure"," */","","/**"," * Describes the number of users in a specific storage bucket."," * @typedef {Object} TeamStorageBucket"," * @property {string} bucket - The name of the storage bucket. For example, '1G'"," * is a bucket of users with storage size up to 1 Giga."," * @property {number} users - The number of people whose storage is in the range"," * of this storage bucket."," */","","/**"," * @typedef {Object} TeamTeamFolderAccessError"," * @property {('invalid_team_folder_id'|'no_access'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderActivateError"," * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is"," * access_error."," * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if"," * .tag is status_error."," * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderArchiveArg"," * @property {string} team_folder_id - The ID of the team folder."," * @property {boolean} force_async_off - Whether to force the archive to happen"," * synchronously."," */","","/**"," * @typedef {Object} TeamTeamFolderArchiveError"," * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is"," * access_error."," * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if"," * .tag is status_error."," * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderArchiveJobStatus"," * @property {TeamTeamFolderMetadata} [complete] - Available if .tag is"," * complete. The archive job has finished. The value is the metadata for the"," * resulting team folder."," * @property {TeamTeamFolderArchiveError} [failed] - Available if .tag is"," * failed. Error occurred while performing an asynchronous job from"," * :route:`team_folder/archive`."," * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderArchiveLaunch"," * @property {string} [async_job_id] - Available if .tag is async_job_id. This"," * response indicates that the processing is asynchronous. The string is an id"," * that can be used to obtain the status of the asynchronous job."," * @property {TeamTeamFolderMetadata} [complete] - Available if .tag is"," * complete."," * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderCreateArg"," * @property {string} name - Name for the new team folder."," */","","/**"," * @typedef {Object} TeamTeamFolderCreateError"," * @property {('invalid_folder_name'|'folder_name_already_used'|'folder_name_reserved'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderGetInfoItem"," * @property {string} [id_not_found] - Available if .tag is id_not_found. An ID"," * that was provided as a parameter to :route:`team_folder/get_info` did not"," * match any of the team's team folders."," * @property {TeamTeamFolderMetadata} [team_folder_metadata] - Available if .tag"," * is team_folder_metadata. Properties of a team folder."," * @property {('id_not_found'|'team_folder_metadata')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderIdArg"," * @property {string} team_folder_id - The ID of the team folder."," */","","/**"," * @typedef {Object} TeamTeamFolderIdListArg"," * @property {Array.<Object>} team_folder_ids - The list of team folder IDs."," */","","/**"," * @typedef {Object} TeamTeamFolderInvalidStatusError"," * @property {('active'|'archived'|'archive_in_progress'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderListArg"," * @property {number} limit - The maximum number of results to return per"," * request."," */","","/**"," * @typedef {Object} TeamTeamFolderListError"," * @property {TeamTeamFolderAccessError} access_error"," */","","/**"," * Result for team_folder/list."," * @typedef {Object} TeamTeamFolderListResult"," * @property {Array.<TeamTeamFolderMetadata>} team_folders - List of all team"," * folders in the authenticated team."," */","","/**"," * Properties of a team folder."," * @typedef {Object} TeamTeamFolderMetadata"," * @property {string} team_folder_id - The ID of the team folder."," * @property {string} name - The name of the team folder."," * @property {TeamTeamFolderStatus} status - The status of the team folder."," */","","/**"," * @typedef {Object} TeamTeamFolderPermanentlyDeleteError"," * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is"," * access_error."," * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if"," * .tag is status_error."," * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderRenameArg"," * @property {string} team_folder_id - The ID of the team folder."," * @property {string} name - New team folder name."," */","","/**"," * @typedef {Object} TeamTeamFolderRenameError"," * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is"," * access_error."," * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if"," * .tag is status_error."," * @property {('access_error'|'status_error'|'other'|'invalid_folder_name'|'folder_name_already_used'|'folder_name_reserved')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamFolderStatus"," * @property {('active'|'archived'|'archive_in_progress'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamGetInfoResult"," * @property {string} name - The name of the team."," * @property {string} team_id - The ID of the team."," * @property {number} num_licensed_users - The number of licenses available to"," * the team."," * @property {number} num_provisioned_users - The number of accounts that have"," * been invited or are already active members of the team."," * @property {TeamPoliciesTeamMemberPolicies} policies"," */","","/**"," * Information about a team member."," * @typedef {Object} TeamTeamMemberInfo"," * @property {TeamTeamMemberProfile} profile - Profile of a user as a member of"," * a team."," * @property {TeamAdminTier} role - The user's role in the team."," */","","/**"," * Profile of a user as a member of a team."," * @typedef {Object} TeamTeamMemberProfile"," * @property {string} team_member_id - ID of user as a member of a team."," * @property {string} email - Email address of user."," * @property {boolean} email_verified - Is true if the user's email is verified"," * to be owned by the user."," * @property {TeamTeamMemberStatus} status - The user's status as a member of a"," * specific team."," * @property {UsersName} name - Representations for a person's name."," * @property {TeamTeamMembershipType} membership_type - The user's membership"," * type: full (normal team member) vs limited (does not use a license; no access"," * to the team's shared quota)."," * @property {Array.<Object>} groups - List of group IDs of groups that the user"," * belongs to."," * @property {string} [external_id] - External ID that a team can attach to the"," * user. An application using the API may find it easier to use their own IDs"," * instead of Dropbox IDs like account_id or team_member_id."," * @property {string} [account_id] - A user's account identifier."," * @property {Timestamp} [joined_on] - The date and time the user joined as a"," * member of a specific team."," * @property {string} [persistent_id] - Persistent ID that a team can attach to"," * the user. The persistent ID is unique ID to be used for SAML authentication."," */","","/**"," * The user's status as a member of a specific team."," * @typedef {Object} TeamTeamMemberStatus"," * @property {TeamRemovedStatus} [removed] - Available if .tag is removed. User"," * is no longer a member of the team. Removed users are only listed when"," * include_removed is true in members/list."," * @property {('active'|'invited'|'suspended'|'removed')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamTeamMembershipType"," * @property {('full'|'limited')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} TeamUpdatePropertyTemplateArg"," * @property {string} template_id - An identifier for property template added by"," * properties/template/add."," * @property {string} [name] - A display name for the property template."," * Property template names can be up to 256 bytes."," * @property {string} [description] - Description for new property template."," * Property template descriptions can be up to 1024 bytes."," * @property {Array.<PropertiesPropertyFieldTemplate>} [add_fields] - This is a"," * list of custom properties to add to the property template. There can be up to"," * 64 properties in a single property template."," */","","/**"," * @typedef {Object} TeamUpdatePropertyTemplateResult"," * @property {string} template_id - An identifier for property template added by"," * properties/template/add."," */","","/**"," * Argument for selecting a single user, either by team_member_id, external_id"," * or email."," * @typedef {Object} TeamUserSelectorArg"," * @property {string} [team_member_id] - Available if .tag is team_member_id."," * @property {string} [external_id] - Available if .tag is external_id."," * @property {string} [email] - Available if .tag is email."," * @property {('team_member_id'|'external_id'|'email')} .tag - Tag identifying the union variant."," */","","/**"," * Error that can be returned whenever a struct derived from UserSelectorArg is"," * used."," * @typedef {Object} TeamUserSelectorError"," * @property {'user_not_found'} .tag - Tag identifying the union variant."," */","","/**"," * Argument for selecting a list of users, either by team_member_ids,"," * external_ids or emails."," * @typedef {Object} TeamUsersSelectorArg"," * @property {Array.<Object>} [team_member_ids] - Available if .tag is"," * team_member_ids. List of member IDs."," * @property {Array.<Object>} [external_ids] - Available if .tag is"," * external_ids. List of external user IDs."," * @property {Array.<Object>} [emails] - Available if .tag is emails. List of"," * email addresses."," * @property {('team_member_ids'|'external_ids'|'emails')} .tag - Tag identifying the union variant."," */","","/**"," * The group type determines how a group is managed."," * @typedef {Object} TeamCommonGroupManagementType"," * @property {('user_managed'|'company_managed'|'system_managed'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information about a group."," * @typedef {Object} TeamCommonGroupSummary"," * @property {string} group_name"," * @property {string} group_id"," * @property {TeamCommonGroupManagementType} group_management_type - Who is"," * allowed to manage the group."," * @property {string} [group_external_id] - External ID of group. This is an"," * arbitrary ID that an admin can attach to a group."," * @property {number} [member_count] - The number of members in the group."," */","","/**"," * The group type determines how a group is created and managed."," * @typedef {Object} TeamCommonGroupType"," * @property {('team'|'user_managed'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Time range."," * @typedef {Object} TeamCommonTimeRange"," * @property {Timestamp} [start_time] - Optional starting time (inclusive)."," * @property {Timestamp} [end_time] - Optional ending time (exclusive)."," */","","/**"," * @typedef {Object} TeamPoliciesEmmState"," * @property {('disabled'|'optional'|'required'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Policy governing which shared folders a team member can join."," * @typedef {Object} TeamPoliciesSharedFolderJoinPolicy"," * @property {('from_team_only'|'from_anyone'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Policy governing who can be a member of a folder shared by a team member."," * @typedef {Object} TeamPoliciesSharedFolderMemberPolicy"," * @property {('team'|'anyone'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Policy governing the visibility of shared links. This policy can apply to"," * newly created shared links, or all shared links."," * @typedef {Object} TeamPoliciesSharedLinkCreatePolicy"," * @property {('default_public'|'default_team_only'|'team_only'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Policies governing team members."," * @typedef {Object} TeamPoliciesTeamMemberPolicies"," * @property {TeamPoliciesTeamSharingPolicies} sharing - Policies governing"," * sharing."," * @property {TeamPoliciesEmmState} emm_state - This describes the Enterprise"," * Mobility Management (EMM) state for this team. This information can be used"," * to understand if an organization is integrating with a third-party EMM vendor"," * to further manage and apply restrictions upon the team's Dropbox usage on"," * mobile devices. This is a new feature and in the future we'll be adding more"," * new fields and additional documentation."," */","","/**"," * Policies governing sharing within and outside of the team."," * @typedef {Object} TeamPoliciesTeamSharingPolicies"," * @property {TeamPoliciesSharedFolderMemberPolicy} shared_folder_member_policy"," * - Who can join folders shared by team members."," * @property {TeamPoliciesSharedFolderJoinPolicy} shared_folder_join_policy -"," * Which shared folders team members can join."," * @property {TeamPoliciesSharedLinkCreatePolicy} shared_link_create_policy -"," * Who can view shared links owned by team members."," */","","/**"," * The amount of detail revealed about an account depends on the user being"," * queried and the user making the query."," * @typedef {Object} UsersAccount"," * @property {string} account_id - The user's unique Dropbox ID."," * @property {UsersName} name - Details of a user's name."," * @property {string} email - The user's e-mail address. Do not rely on this"," * without checking the email_verified field. Even then, it's possible that the"," * user has since lost access to their e-mail."," * @property {boolean} email_verified - Whether the user has verified their"," * e-mail address."," * @property {boolean} disabled - Whether the user has been disabled."," * @property {string} [profile_photo_url] - URL for the photo representing the"," * user, if one is set."," */","","/**"," * What type of account this user has."," * @typedef {Object} UsersAccountType"," * @property {('basic'|'pro'|'business')} .tag - Tag identifying the union variant."," */","","/**"," * Basic information about any account."," * @typedef {Object} UsersBasicAccount"," * @property {string} account_id - The user's unique Dropbox ID."," * @property {UsersName} name - Details of a user's name."," * @property {string} email - The user's e-mail address. Do not rely on this"," * without checking the email_verified field. Even then, it's possible that the"," * user has since lost access to their e-mail."," * @property {boolean} email_verified - Whether the user has verified their"," * e-mail address."," * @property {boolean} disabled - Whether the user has been disabled."," * @property {boolean} is_teammate - Whether this user is a teammate of the"," * current user. If this account is the current user's account, then this will"," * be true."," * @property {string} [profile_photo_url] - URL for the photo representing the"," * user, if one is set."," * @property {string} [team_member_id] - The user's unique team member id. This"," * field will only be present if the user is part of a team and is_teammate is"," * true."," */","","/**"," * Detailed information about the current user's account."," * @typedef {Object} UsersFullAccount"," * @property {string} account_id - The user's unique Dropbox ID."," * @property {UsersName} name - Details of a user's name."," * @property {string} email - The user's e-mail address. Do not rely on this"," * without checking the email_verified field. Even then, it's possible that the"," * user has since lost access to their e-mail."," * @property {boolean} email_verified - Whether the user has verified their"," * e-mail address."," * @property {boolean} disabled - Whether the user has been disabled."," * @property {string} locale - The language that the user specified. Locale tags"," * will be IETF language tags http://en.wikipedia.org/wiki/IETF_language_tag."," * @property {string} referral_link - The user's referral link"," * https://www.dropbox.com/referrals."," * @property {boolean} is_paired - Whether the user has a personal and work"," * account. If the current account is personal, then team will always be null,"," * but is_paired will indicate if a work account is linked."," * @property {UsersAccountType} account_type - What type of account this user"," * has."," * @property {string} [profile_photo_url] - URL for the photo representing the"," * user, if one is set."," * @property {string} [country] - The user's two-letter country code, if"," * available. Country codes are based on ISO 3166-1"," * http://en.wikipedia.org/wiki/ISO_3166-1."," * @property {UsersFullTeam} [team] - If this account is a member of a team,"," * information about that team."," * @property {string} [team_member_id] - This account's unique team member id."," * This field will only be present if team is present."," */","","/**"," * Detailed information about a team."," * @typedef {Object} UsersFullTeam"," * @property {string} id - The team's unique ID."," * @property {string} name - The name of the team."," * @property {TeamPoliciesTeamSharingPolicies} sharing_policies - Team policies"," * governing sharing."," */","","/**"," * @typedef {Object} UsersGetAccountArg"," * @property {string} account_id - A user's account identifier."," */","","/**"," * @typedef {Object} UsersGetAccountBatchArg"," * @property {Array.<Object>} account_ids - List of user account identifiers."," * Should not contain any duplicate account IDs."," */","","/**"," * @typedef {Object} UsersGetAccountBatchError"," * @property {string} [no_account] - Available if .tag is no_account. The value"," * is an account ID specified in :field:`GetAccountBatchArg.account_ids` that"," * does not exist."," * @property {('no_account'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} UsersGetAccountError"," * @property {('no_account'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * @typedef {Object} UsersIndividualSpaceAllocation"," * @property {number} allocated - The total space allocated to the user's"," * account (bytes)."," */","","/**"," * Representations for a person's name to assist with internationalization."," * @typedef {Object} UsersName"," * @property {string} given_name - Also known as a first name."," * @property {string} surname - Also known as a last name or family name."," * @property {string} familiar_name - Locale-dependent name. In the US, a"," * person's familiar name is their given_name, but elsewhere, it could be any"," * combination of a person's given_name and surname."," * @property {string} display_name - A name that can be used directly to"," * represent the name of a user's Dropbox account."," * @property {string} abbreviated_name - An abbreviated form of the person's"," * name. Their initials in most locales."," */","","/**"," * Space is allocated differently based on the type of account."," * @typedef {Object} UsersSpaceAllocation"," * @property {UsersIndividualSpaceAllocation} [individual] - Available if .tag"," * is individual. The user's space allocation applies only to their individual"," * account."," * @property {UsersTeamSpaceAllocation} [team] - Available if .tag is team. The"," * user shares space with other members of their team."," * @property {('individual'|'team'|'other')} .tag - Tag identifying the union variant."," */","","/**"," * Information about a user's space usage and quota."," * @typedef {Object} UsersSpaceUsage"," * @property {number} used - The user's total space usage (bytes)."," * @property {UsersSpaceAllocation} allocation - The user's space allocation."," */","","/**"," * Information about a team."," * @typedef {Object} UsersTeam"," * @property {string} id - The team's unique ID."," * @property {string} name - The name of the team."," */","","/**"," * @typedef {Object} UsersTeamSpaceAllocation"," * @property {number} used - The total space currently used by the user's team"," * (bytes)."," * @property {number} allocated - The total space allocated to the user's team"," * (bytes)."," */",""],"l":{}},"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/upload-request.js":{"path":"/home/travis/build/npmtest/node-npmtest-dropbox/node_modules/dropbox/src/upload-request.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":23},"end":{"line":7,"column":50}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":20},"end":{"line":15,"column":79}}},"3":{"name":"(anonymous_3)","line":20,"loc":{"start":{"line":20,"column":24},"end":{"line":20,"column":51}}},"4":{"name":"success","line":28,"loc":{"start":{"line":28,"column":4},"end":{"line":28,"column":27}}},"5":{"name":"failure","line":34,"loc":{"start":{"line":34,"column":4},"end":{"line":34,"column":28}}},"6":{"name":"responseHandler","line":40,"loc":{"start":{"line":40,"column":4},"end":{"line":40,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":36}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":13,"column":2}},"6":{"start":{"line":8,"column":2},"end":{"line":12,"column":4}},"7":{"start":{"line":15,"column":0},"end":{"line":63,"column":2}},"8":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"9":{"start":{"line":17,"column":4},"end":{"line":17,"column":53}},"10":{"start":{"line":20,"column":2},"end":{"line":60,"column":4}},"11":{"start":{"line":21,"column":4},"end":{"line":21,"column":19}},"12":{"start":{"line":25,"column":4},"end":{"line":25,"column":33}},"13":{"start":{"line":26,"column":4},"end":{"line":26,"column":25}},"14":{"start":{"line":28,"column":4},"end":{"line":32,"column":5}},"15":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"16":{"start":{"line":30,"column":8},"end":{"line":30,"column":22}},"17":{"start":{"line":34,"column":4},"end":{"line":38,"column":5}},"18":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":22}},"20":{"start":{"line":40,"column":4},"end":{"line":46,"column":5}},"21":{"start":{"line":41,"column":6},"end":{"line":45,"column":7}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":51}},"23":{"start":{"line":44,"column":8},"end":{"line":44,"column":31}},"24":{"start":{"line":48,"column":4},"end":{"line":51,"column":56}},"25":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"26":{"start":{"line":54,"column":6},"end":{"line":54,"column":73}},"27":{"start":{"line":57,"column":4},"end":{"line":59,"column":28}},"28":{"start":{"line":62,"column":2},"end":{"line":62,"column":38}},"29":{"start":{"line":65,"column":0},"end":{"line":65,"column":31}}},"branchMap":{"1":{"line":10,"type":"binary-expr","locations":[{"start":{"line":10,"column":12},"end":{"line":10,"column":43}},{"start":{"line":10,"column":48},"end":{"line":10,"column":64}}]},"2":{"line":10,"type":"cond-expr","locations":[{"start":{"line":10,"column":23},"end":{"line":10,"column":36}},{"start":{"line":10,"column":39},"end":{"line":10,"column":43}}]},"3":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"4":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"5":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"6":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]}},"code":["var request = require('superagent');","var Promise = require('es6-promise').Promise;","var getBaseURL = require('./get-base-url');","var httpHeaderSafeJson = require('./http-header-safe-json');","","// This doesn't match what was spec'd in paper doc yet","var buildCustomError = function (error, response) {","  return {","    status: error.status,","    error: (response ? response.text : null) || error.toString(),","    response: response","  };","};","","var uploadRequest = function (path, args, auth, host, accessToken, selectUser) {","  if (auth !== 'user') {","    throw new Error('Unexpected auth type: ' + auth);","  }","","  var promiseFunction = function (resolve, reject) {","    var apiRequest;","","    // Since args.contents is sent as the body of the request and not added to","    // the url, it needs to be remove it from args.","    var contents = args.contents;","    delete args.contents;","","    function success(data) {","      if (resolve) {","        resolve(data);","      }","    }","","    function failure(error) {","      if (reject) {","        reject(error);","      }","    }","","    function responseHandler(error, response) {","      if (error) {","        failure(buildCustomError(error, response));","      } else {","        success(response.body);","      }","    }","","    apiRequest = request.post(getBaseURL(host) + path)","      .type('application/octet-stream')","      .set('Authorization', 'Bearer ' + accessToken)","      .set('Dropbox-API-Arg', httpHeaderSafeJson(args));","","    if (selectUser) {","      apiRequest = apiRequest.set('Dropbox-API-Select-User', selectUser);","    }","","    apiRequest","      .send(contents)","      .end(responseHandler);","  };","","  return new Promise(promiseFunction);","};","","module.exports = uploadRequest;",""],"l":{"1":1,"2":1,"3":1,"4":1,"7":1,"8":0,"15":1,"16":0,"17":0,"20":0,"21":0,"25":0,"26":0,"28":1,"29":0,"30":0,"34":1,"35":0,"36":0,"40":1,"41":0,"42":0,"44":0,"48":0,"53":0,"54":0,"57":0,"62":0,"65":1}}}